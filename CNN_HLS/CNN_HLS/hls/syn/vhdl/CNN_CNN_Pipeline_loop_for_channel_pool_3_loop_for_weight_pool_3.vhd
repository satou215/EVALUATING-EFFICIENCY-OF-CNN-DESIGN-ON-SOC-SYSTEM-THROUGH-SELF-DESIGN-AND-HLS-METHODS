-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_channel_pool_3_loop_for_weight_pool_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutPool3_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_9_ce0 : OUT STD_LOGIC;
    OutPool3_9_we0 : OUT STD_LOGIC;
    OutPool3_9_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_8_ce0 : OUT STD_LOGIC;
    OutPool3_8_we0 : OUT STD_LOGIC;
    OutPool3_8_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_7_ce0 : OUT STD_LOGIC;
    OutPool3_7_we0 : OUT STD_LOGIC;
    OutPool3_7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_6_ce0 : OUT STD_LOGIC;
    OutPool3_6_we0 : OUT STD_LOGIC;
    OutPool3_6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_5_ce0 : OUT STD_LOGIC;
    OutPool3_5_we0 : OUT STD_LOGIC;
    OutPool3_5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_4_ce0 : OUT STD_LOGIC;
    OutPool3_4_we0 : OUT STD_LOGIC;
    OutPool3_4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_3_ce0 : OUT STD_LOGIC;
    OutPool3_3_we0 : OUT STD_LOGIC;
    OutPool3_3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_2_ce0 : OUT STD_LOGIC;
    OutPool3_2_we0 : OUT STD_LOGIC;
    OutPool3_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_1_ce0 : OUT STD_LOGIC;
    OutPool3_1_we0 : OUT STD_LOGIC;
    OutPool3_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_ce0 : OUT STD_LOGIC;
    OutPool3_we0 : OUT STD_LOGIC;
    OutPool3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutConv7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv7_ce0 : OUT STD_LOGIC;
    OutConv7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutConv7_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv7_ce1 : OUT STD_LOGIC;
    OutConv7_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_channel_pool_3_loop_for_weight_pool_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv11_34 : STD_LOGIC_VECTOR (10 downto 0) := "00000110100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_F600 : STD_LOGIC_VECTOR (15 downto 0) := "1111011000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln74_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln77_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_575 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_575_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_575_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_575_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_575_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_575_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_reg_575_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_310_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln74_reg_580 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln74_reg_580_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln74_reg_580_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln74_reg_580_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln74_reg_580_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln74_reg_580_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln74_reg_580_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln86_fu_462_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln86_reg_597 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln82_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln82_1_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln86_2_fu_511_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_104 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln87_fu_324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (4 downto 0);
    signal z_fu_108 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln74_1_fu_349_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten181_fu_112 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln74_fu_295_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten181_load : STD_LOGIC_VECTOR (9 downto 0);
    signal OutConv7_ce1_local : STD_LOGIC;
    signal OutConv7_ce0_local : STD_LOGIC;
    signal OutPool3_8_we0_local : STD_LOGIC;
    signal trunc_ln86_fu_524_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_1_fu_493_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPool3_8_ce0_local : STD_LOGIC;
    signal OutPool3_7_we0_local : STD_LOGIC;
    signal OutPool3_7_ce0_local : STD_LOGIC;
    signal OutPool3_6_we0_local : STD_LOGIC;
    signal OutPool3_6_ce0_local : STD_LOGIC;
    signal OutPool3_5_we0_local : STD_LOGIC;
    signal OutPool3_5_ce0_local : STD_LOGIC;
    signal OutPool3_4_we0_local : STD_LOGIC;
    signal OutPool3_4_ce0_local : STD_LOGIC;
    signal OutPool3_3_we0_local : STD_LOGIC;
    signal OutPool3_3_ce0_local : STD_LOGIC;
    signal OutPool3_2_we0_local : STD_LOGIC;
    signal OutPool3_2_ce0_local : STD_LOGIC;
    signal OutPool3_1_we0_local : STD_LOGIC;
    signal OutPool3_1_ce0_local : STD_LOGIC;
    signal OutPool3_we0_local : STD_LOGIC;
    signal OutPool3_ce0_local : STD_LOGIC;
    signal OutPool3_9_we0_local : STD_LOGIC;
    signal OutPool3_9_ce0_local : STD_LOGIC;
    signal add_ln74_1_fu_343_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_364_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_356_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_fu_372_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_376_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_382_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_406_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln81_fu_413_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln81_fu_417_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_1_fu_392_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln81_1_fu_428_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln86_fu_442_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln86_fu_442_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln86_fu_442_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_448_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln86_1_fu_458_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_192_fu_400_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln83_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_fu_479_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln83_1_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal mul_ln86_fu_442_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_urem_5ns_5ns_4_9_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component CNN_mul_5ns_7ns_11_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_5ns_5ns_4_9_1_U387 : component CNN_urem_5ns_5ns_4_9_1
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 5,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln74_fu_310_p3,
        din1 => ap_const_lv5_A,
        ce => ap_const_logic_1,
        dout => grp_fu_318_p2);

    mul_5ns_7ns_11_1_1_U388 : component CNN_mul_5ns_7ns_11_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        din0 => mul_ln86_fu_442_p0,
        din1 => mul_ln86_fu_442_p1,
        dout => mul_ln86_fu_442_p2);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten181_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln74_fu_289_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten181_fu_112 <= add_ln74_fu_295_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten181_fu_112 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln74_fu_289_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_104 <= add_ln87_fu_324_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_104 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    z_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    z_fu_108 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    z_fu_108 <= select_ln74_1_fu_349_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln86_reg_597 <= add_ln86_fu_462_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                icmp_ln77_reg_575_pp0_iter2_reg <= icmp_ln77_reg_575_pp0_iter1_reg;
                icmp_ln77_reg_575_pp0_iter3_reg <= icmp_ln77_reg_575_pp0_iter2_reg;
                icmp_ln77_reg_575_pp0_iter4_reg <= icmp_ln77_reg_575_pp0_iter3_reg;
                icmp_ln77_reg_575_pp0_iter5_reg <= icmp_ln77_reg_575_pp0_iter4_reg;
                icmp_ln77_reg_575_pp0_iter6_reg <= icmp_ln77_reg_575_pp0_iter5_reg;
                select_ln74_reg_580_pp0_iter2_reg <= select_ln74_reg_580_pp0_iter1_reg;
                select_ln74_reg_580_pp0_iter3_reg <= select_ln74_reg_580_pp0_iter2_reg;
                select_ln74_reg_580_pp0_iter4_reg <= select_ln74_reg_580_pp0_iter3_reg;
                select_ln74_reg_580_pp0_iter5_reg <= select_ln74_reg_580_pp0_iter4_reg;
                select_ln74_reg_580_pp0_iter6_reg <= select_ln74_reg_580_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln77_reg_575 <= icmp_ln77_fu_304_p2;
                icmp_ln77_reg_575_pp0_iter1_reg <= icmp_ln77_reg_575;
                select_ln74_reg_580 <= select_ln74_fu_310_p3;
                select_ln74_reg_580_pp0_iter1_reg <= select_ln74_reg_580;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv7_address0 <= zext_ln82_1_fu_434_p1(11 - 1 downto 0);
    OutConv7_address1 <= zext_ln82_fu_423_p1(11 - 1 downto 0);
    OutConv7_ce0 <= OutConv7_ce0_local;

    OutConv7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            OutConv7_ce0_local <= ap_const_logic_1;
        else 
            OutConv7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutConv7_ce1 <= OutConv7_ce1_local;

    OutConv7_ce1_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            OutConv7_ce1_local <= ap_const_logic_1;
        else 
            OutConv7_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_1_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_1_ce0 <= OutPool3_1_ce0_local;

    OutPool3_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_1_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_1_d0 <= max_1_fu_493_p3;
    OutPool3_1_we0 <= OutPool3_1_we0_local;

    OutPool3_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (trunc_ln86_fu_524_p1 = ap_const_lv4_1))) then 
            OutPool3_1_we0_local <= ap_const_logic_1;
        else 
            OutPool3_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_2_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_2_ce0 <= OutPool3_2_ce0_local;

    OutPool3_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_2_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_2_d0 <= max_1_fu_493_p3;
    OutPool3_2_we0 <= OutPool3_2_we0_local;

    OutPool3_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (trunc_ln86_fu_524_p1 = ap_const_lv4_2))) then 
            OutPool3_2_we0_local <= ap_const_logic_1;
        else 
            OutPool3_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_3_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_3_ce0 <= OutPool3_3_ce0_local;

    OutPool3_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_3_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_3_d0 <= max_1_fu_493_p3;
    OutPool3_3_we0 <= OutPool3_3_we0_local;

    OutPool3_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (trunc_ln86_fu_524_p1 = ap_const_lv4_3))) then 
            OutPool3_3_we0_local <= ap_const_logic_1;
        else 
            OutPool3_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_4_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_4_ce0 <= OutPool3_4_ce0_local;

    OutPool3_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_4_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_4_d0 <= max_1_fu_493_p3;
    OutPool3_4_we0 <= OutPool3_4_we0_local;

    OutPool3_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (trunc_ln86_fu_524_p1 = ap_const_lv4_4))) then 
            OutPool3_4_we0_local <= ap_const_logic_1;
        else 
            OutPool3_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_5_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_5_ce0 <= OutPool3_5_ce0_local;

    OutPool3_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_5_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_5_d0 <= max_1_fu_493_p3;
    OutPool3_5_we0 <= OutPool3_5_we0_local;

    OutPool3_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (trunc_ln86_fu_524_p1 = ap_const_lv4_5))) then 
            OutPool3_5_we0_local <= ap_const_logic_1;
        else 
            OutPool3_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_6_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_6_ce0 <= OutPool3_6_ce0_local;

    OutPool3_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_6_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_6_d0 <= max_1_fu_493_p3;
    OutPool3_6_we0 <= OutPool3_6_we0_local;

    OutPool3_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (trunc_ln86_fu_524_p1 = ap_const_lv4_6))) then 
            OutPool3_6_we0_local <= ap_const_logic_1;
        else 
            OutPool3_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_7_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_7_ce0 <= OutPool3_7_ce0_local;

    OutPool3_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_7_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_7_d0 <= max_1_fu_493_p3;
    OutPool3_7_we0 <= OutPool3_7_we0_local;

    OutPool3_7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (trunc_ln86_fu_524_p1 = ap_const_lv4_7))) then 
            OutPool3_7_we0_local <= ap_const_logic_1;
        else 
            OutPool3_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_8_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_8_ce0 <= OutPool3_8_ce0_local;

    OutPool3_8_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_8_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_8_d0 <= max_1_fu_493_p3;
    OutPool3_8_we0 <= OutPool3_8_we0_local;

    OutPool3_8_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (trunc_ln86_fu_524_p1 = ap_const_lv4_8))) then 
            OutPool3_8_we0_local <= ap_const_logic_1;
        else 
            OutPool3_8_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_9_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_9_ce0 <= OutPool3_9_ce0_local;

    OutPool3_9_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_9_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_9_d0 <= max_1_fu_493_p3;
    OutPool3_9_we0 <= OutPool3_9_we0_local;

    OutPool3_9_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if ((not((trunc_ln86_fu_524_p1 = ap_const_lv4_0)) and not((trunc_ln86_fu_524_p1 = ap_const_lv4_1)) and not((trunc_ln86_fu_524_p1 = ap_const_lv4_2)) and not((trunc_ln86_fu_524_p1 = ap_const_lv4_3)) and not((trunc_ln86_fu_524_p1 = ap_const_lv4_4)) and not((trunc_ln86_fu_524_p1 = ap_const_lv4_5)) and not((trunc_ln86_fu_524_p1 = ap_const_lv4_6)) and not((trunc_ln86_fu_524_p1 = ap_const_lv4_7)) and not((trunc_ln86_fu_524_p1 = ap_const_lv4_8)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_9_we0_local <= ap_const_logic_1;
        else 
            OutPool3_9_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_address0 <= zext_ln86_2_fu_511_p1(6 - 1 downto 0);
    OutPool3_ce0 <= OutPool3_ce0_local;

    OutPool3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            OutPool3_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_d0 <= max_1_fu_493_p3;
    OutPool3_we0 <= OutPool3_we0_local;

    OutPool3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001, trunc_ln86_fu_524_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (trunc_ln86_fu_524_p1 = ap_const_lv4_0))) then 
            OutPool3_we0_local <= ap_const_logic_1;
        else 
            OutPool3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln74_1_fu_343_p2 <= std_logic_vector(unsigned(z_fu_108) + unsigned(ap_const_lv6_1));
    add_ln74_fu_295_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten181_load) + unsigned(ap_const_lv10_1));
    add_ln81_1_fu_428_p2 <= std_logic_vector(unsigned(zext_ln81_fu_413_p1) + unsigned(tmp_1_fu_392_p3));
    add_ln81_fu_417_p2 <= std_logic_vector(unsigned(zext_ln81_fu_413_p1) + unsigned(empty_fu_376_p2));
    add_ln86_fu_462_p2 <= std_logic_vector(unsigned(zext_ln86_1_fu_458_p1) + unsigned(empty_192_fu_400_p2));
    add_ln87_fu_324_p2 <= std_logic_vector(unsigned(select_ln74_fu_310_p3) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln74_fu_289_p2)
    begin
        if (((icmp_ln74_fu_289_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter7_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten181_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten181_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten181_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten181_load <= indvar_flatten181_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_104, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_104;
        end if; 
    end process;

    empty_192_fu_400_p2 <= std_logic_vector(shift_left(unsigned(select_ln74_1_fu_349_p3),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    empty_fu_376_p2 <= std_logic_vector(unsigned(p_shl_fu_356_p3) + unsigned(p_shl4_fu_372_p1));
    icmp_ln74_fu_289_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten181_load = ap_const_lv10_280) else "0";
    icmp_ln77_fu_304_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv5_14) else "0";
    icmp_ln83_1_fu_487_p2 <= "1" when (signed(OutConv7_q0) > signed(max_fu_479_p3)) else "0";
    icmp_ln83_fu_473_p2 <= "1" when (signed(OutConv7_q1) > signed(ap_const_lv16_F600)) else "0";
    max_1_fu_493_p3 <= 
        OutConv7_q0 when (icmp_ln83_1_fu_487_p2(0) = '1') else 
        max_fu_479_p3;
    max_fu_479_p3 <= 
        OutConv7_q1 when (icmp_ln83_fu_473_p2(0) = '1') else 
        ap_const_lv16_F600;
    mul_ln86_fu_442_p0 <= mul_ln86_fu_442_p00(5 - 1 downto 0);
    mul_ln86_fu_442_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln74_reg_580_pp0_iter6_reg),11));
    mul_ln86_fu_442_p1 <= ap_const_lv11_34(7 - 1 downto 0);
    p_shl4_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_364_p3),11));
    p_shl_fu_356_p3 <= (select_ln74_1_fu_349_p3 & ap_const_lv5_0);
    select_ln74_1_fu_349_p3 <= 
        add_ln74_1_fu_343_p2 when (icmp_ln77_reg_575_pp0_iter6_reg(0) = '1') else 
        z_fu_108;
    select_ln74_fu_310_p3 <= 
        ap_const_lv5_0 when (icmp_ln77_fu_304_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    tmp_1_fu_392_p3 <= (tmp_s_fu_382_p4 & ap_const_lv1_1);
    tmp_2_fu_406_p3 <= (select_ln74_reg_580_pp0_iter6_reg & ap_const_lv1_0);
    tmp_3_fu_448_p4 <= mul_ln86_fu_442_p2(10 downto 9);
    tmp_fu_364_p3 <= (select_ln74_1_fu_349_p3 & ap_const_lv3_0);
    tmp_s_fu_382_p4 <= empty_fu_376_p2(10 downto 1);
    trunc_ln86_fu_524_p1 <= grp_fu_318_p2(4 - 1 downto 0);
    zext_ln81_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_406_p3),11));
    zext_ln82_1_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_1_fu_428_p2),64));
    zext_ln82_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln81_fu_417_p2),64));
    zext_ln86_1_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_448_p4),6));
    zext_ln86_2_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_reg_597),64));
end behav;
