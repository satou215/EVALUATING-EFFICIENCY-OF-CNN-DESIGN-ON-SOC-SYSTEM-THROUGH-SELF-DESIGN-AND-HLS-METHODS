-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_3_channel_pad_3_loop_for_channel_pad_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutPadConv3_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv3_2_ce0 : OUT STD_LOGIC;
    OutPadConv3_2_we0 : OUT STD_LOGIC;
    OutPadConv3_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv3_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv3_1_ce0 : OUT STD_LOGIC;
    OutPadConv3_1_we0 : OUT STD_LOGIC;
    OutPadConv3_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv3_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv3_ce0 : OUT STD_LOGIC;
    OutPadConv3_we0 : OUT STD_LOGIC;
    OutPadConv3_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutConv2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv2_ce0 : OUT STD_LOGIC;
    OutConv2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_3_channel_pad_3_loop_for_channel_pad_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_520 : STD_LOGIC_VECTOR (10 downto 0) := "10100100000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_A4 : STD_LOGIC_VECTOR (7 downto 0) := "10100100";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_A1 : STD_LOGIC_VECTOR (7 downto 0) := "10100001";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv23_AAB : STD_LOGIC_VECTOR (22 downto 0) := "00000000000101010101011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_A4 : STD_LOGIC_VECTOR (10 downto 0) := "00010100100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln83_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln83_fu_184_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_reg_411_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln83_1_fu_198_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_reg_418_pp0_iter9_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln86_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln86_reg_425_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln86_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln86_1_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln86_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_78 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln85_fu_244_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_load : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_82 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten37_fu_86 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln83_fu_166_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten37_load : STD_LOGIC_VECTOR (10 downto 0);
    signal OutConv2_ce0_local : STD_LOGIC;
    signal OutPadConv3_1_we0_local : STD_LOGIC;
    signal trunc_ln86_fu_355_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal storemerge573_fu_359_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv3_1_ce0_local : STD_LOGIC;
    signal OutPadConv3_we0_local : STD_LOGIC;
    signal OutPadConv3_ce0_local : STD_LOGIC;
    signal OutPadConv3_2_we0_local : STD_LOGIC;
    signal OutPadConv3_2_ce0_local : STD_LOGIC;
    signal icmp_ln85_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln83_1_fu_192_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_206_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_216_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_cast69_fu_212_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_275_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_268_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln85_2_fu_282_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln86_1_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln85_1_fu_295_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln86_2_fu_308_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln86_fu_314_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln85_1_fu_286_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln86_3_fu_318_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_377_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln86_fu_332_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln86_fu_332_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln86_fu_332_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_17_fu_338_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_238_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_377_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_377_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_377_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_377_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_377_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln86_fu_332_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_urem_8ns_3ns_2_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component CNN_mul_11ns_13ns_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component CNN_mac_muladd_8ns_4ns_8ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_8ns_3ns_2_12_1_U126 : component CNN_urem_8ns_3ns_2_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        din1 => grp_fu_238_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_238_p2);

    mul_11ns_13ns_23_1_1_U127 : component CNN_mul_11ns_13ns_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 13,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln86_fu_332_p0,
        din1 => mul_ln86_fu_332_p1,
        dout => mul_ln86_fu_332_p2);

    mac_muladd_8ns_4ns_8ns_11_4_1_U128 : component CNN_mac_muladd_8ns_4ns_8ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 4,
        din2_WIDTH => 8,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_377_p0,
        din1 => grp_fu_377_p1,
        din2 => grp_fu_377_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_377_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln83_fu_160_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c_fu_82 <= select_ln83_1_fu_198_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_82 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten37_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln83_fu_160_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten37_fu_86 <= add_ln83_fu_166_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten37_fu_86 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    n_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln83_fu_160_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_fu_78 <= add_ln85_fu_244_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_78 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln86_reg_425_pp0_iter2_reg <= icmp_ln86_reg_425_pp0_iter1_reg;
                icmp_ln86_reg_425_pp0_iter3_reg <= icmp_ln86_reg_425_pp0_iter2_reg;
                icmp_ln86_reg_425_pp0_iter4_reg <= icmp_ln86_reg_425_pp0_iter3_reg;
                icmp_ln86_reg_425_pp0_iter5_reg <= icmp_ln86_reg_425_pp0_iter4_reg;
                icmp_ln86_reg_425_pp0_iter6_reg <= icmp_ln86_reg_425_pp0_iter5_reg;
                icmp_ln86_reg_425_pp0_iter7_reg <= icmp_ln86_reg_425_pp0_iter6_reg;
                icmp_ln86_reg_425_pp0_iter8_reg <= icmp_ln86_reg_425_pp0_iter7_reg;
                icmp_ln86_reg_425_pp0_iter9_reg <= icmp_ln86_reg_425_pp0_iter8_reg;
                or_ln86_reg_445 <= or_ln86_fu_303_p2;
                select_ln83_1_reg_418_pp0_iter2_reg <= select_ln83_1_reg_418_pp0_iter1_reg;
                select_ln83_1_reg_418_pp0_iter3_reg <= select_ln83_1_reg_418_pp0_iter2_reg;
                select_ln83_1_reg_418_pp0_iter4_reg <= select_ln83_1_reg_418_pp0_iter3_reg;
                select_ln83_1_reg_418_pp0_iter5_reg <= select_ln83_1_reg_418_pp0_iter4_reg;
                select_ln83_1_reg_418_pp0_iter6_reg <= select_ln83_1_reg_418_pp0_iter5_reg;
                select_ln83_1_reg_418_pp0_iter7_reg <= select_ln83_1_reg_418_pp0_iter6_reg;
                select_ln83_1_reg_418_pp0_iter8_reg <= select_ln83_1_reg_418_pp0_iter7_reg;
                select_ln83_1_reg_418_pp0_iter9_reg <= select_ln83_1_reg_418_pp0_iter8_reg;
                select_ln83_reg_411_pp0_iter2_reg <= select_ln83_reg_411_pp0_iter1_reg;
                select_ln83_reg_411_pp0_iter3_reg <= select_ln83_reg_411_pp0_iter2_reg;
                select_ln83_reg_411_pp0_iter4_reg <= select_ln83_reg_411_pp0_iter3_reg;
                select_ln83_reg_411_pp0_iter5_reg <= select_ln83_reg_411_pp0_iter4_reg;
                select_ln83_reg_411_pp0_iter6_reg <= select_ln83_reg_411_pp0_iter5_reg;
                select_ln83_reg_411_pp0_iter7_reg <= select_ln83_reg_411_pp0_iter6_reg;
                select_ln83_reg_411_pp0_iter8_reg <= select_ln83_reg_411_pp0_iter7_reg;
                select_ln83_reg_411_pp0_iter9_reg <= select_ln83_reg_411_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln86_reg_425 <= icmp_ln86_fu_226_p2;
                icmp_ln86_reg_425_pp0_iter1_reg <= icmp_ln86_reg_425;
                select_ln83_1_reg_418 <= select_ln83_1_fu_198_p3;
                select_ln83_1_reg_418_pp0_iter1_reg <= select_ln83_1_reg_418;
                select_ln83_reg_411 <= select_ln83_fu_184_p3;
                select_ln83_reg_411_pp0_iter1_reg <= select_ln83_reg_411;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv2_address0 <= zext_ln86_1_fu_324_p1(11 - 1 downto 0);
    OutConv2_ce0 <= OutConv2_ce0_local;

    OutConv2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OutConv2_ce0_local <= ap_const_logic_1;
        else 
            OutConv2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv3_1_address0 <= zext_ln86_fu_348_p1(9 - 1 downto 0);
    OutPadConv3_1_ce0 <= OutPadConv3_1_ce0_local;

    OutPadConv3_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            OutPadConv3_1_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv3_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv3_1_d0 <= storemerge573_fu_359_p3;
    OutPadConv3_1_we0 <= OutPadConv3_1_we0_local;

    OutPadConv3_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln86_fu_355_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln86_fu_355_p1 = ap_const_lv2_1))) then 
            OutPadConv3_1_we0_local <= ap_const_logic_1;
        else 
            OutPadConv3_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv3_2_address0 <= zext_ln86_fu_348_p1(9 - 1 downto 0);
    OutPadConv3_2_ce0 <= OutPadConv3_2_ce0_local;

    OutPadConv3_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            OutPadConv3_2_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv3_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv3_2_d0 <= storemerge573_fu_359_p3;
    OutPadConv3_2_we0 <= OutPadConv3_2_we0_local;

    OutPadConv3_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln86_fu_355_p1)
    begin
        if ((not((trunc_ln86_fu_355_p1 = ap_const_lv2_0)) and not((trunc_ln86_fu_355_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            OutPadConv3_2_we0_local <= ap_const_logic_1;
        else 
            OutPadConv3_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv3_address0 <= zext_ln86_fu_348_p1(9 - 1 downto 0);
    OutPadConv3_ce0 <= OutPadConv3_ce0_local;

    OutPadConv3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            OutPadConv3_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv3_d0 <= storemerge573_fu_359_p3;
    OutPadConv3_we0 <= OutPadConv3_we0_local;

    OutPadConv3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, trunc_ln86_fu_355_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (trunc_ln86_fu_355_p1 = ap_const_lv2_0))) then 
            OutPadConv3_we0_local <= ap_const_logic_1;
        else 
            OutPadConv3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln83_1_fu_192_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c_load) + unsigned(ap_const_lv4_1));
    add_ln83_fu_166_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten37_load) + unsigned(ap_const_lv11_1));
    add_ln85_1_fu_286_p2 <= std_logic_vector(unsigned(p_shl_fu_268_p3) + unsigned(zext_ln85_2_fu_282_p1));
    add_ln85_fu_244_p2 <= std_logic_vector(unsigned(select_ln83_fu_184_p3) + unsigned(ap_const_lv8_1));
    add_ln86_2_fu_308_p2 <= std_logic_vector(unsigned(zext_ln85_1_fu_295_p1) + unsigned(ap_const_lv9_1FE));
    add_ln86_3_fu_318_p2 <= std_logic_vector(signed(sext_ln86_fu_314_p1) + signed(add_ln85_1_fu_286_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln83_fu_160_p2)
    begin
        if (((icmp_ln83_fu_160_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c_fu_82)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_82;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten37_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten37_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten37_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten37_load <= indvar_flatten37_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_n_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_78, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_n_load <= n_fu_78;
        end if; 
    end process;

    empty_fu_206_p2 <= std_logic_vector(shift_left(unsigned(select_ln83_1_fu_198_p3),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    grp_fu_238_p0 <= std_logic_vector(unsigned(select_ln83_fu_184_p3) + unsigned(p_cast69_fu_212_p1));
    grp_fu_238_p1 <= ap_const_lv8_3(3 - 1 downto 0);
    grp_fu_377_p0 <= ap_const_lv11_A4(8 - 1 downto 0);
    grp_fu_377_p1 <= grp_fu_377_p10(4 - 1 downto 0);
    grp_fu_377_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_1_reg_418_pp0_iter7_reg),11));
    grp_fu_377_p2 <= grp_fu_377_p20(8 - 1 downto 0);
    grp_fu_377_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_reg_411_pp0_iter9_reg),11));
    icmp_ln83_fu_160_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten37_load = ap_const_lv11_520) else "0";
    icmp_ln85_fu_178_p2 <= "1" when (ap_sig_allocacmp_n_load = ap_const_lv8_A4) else "0";
    icmp_ln86_1_fu_298_p2 <= "1" when (unsigned(select_ln83_reg_411_pp0_iter9_reg) > unsigned(ap_const_lv8_A1)) else "0";
    icmp_ln86_fu_226_p2 <= "1" when (tmp_16_fu_216_p4 = ap_const_lv7_0) else "0";
    mul_ln86_fu_332_p0 <= mul_ln86_fu_332_p00(11 - 1 downto 0);
    mul_ln86_fu_332_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_377_p3),23));
    mul_ln86_fu_332_p1 <= ap_const_lv23_AAB(13 - 1 downto 0);
    or_ln86_fu_303_p2 <= (icmp_ln86_reg_425_pp0_iter9_reg or icmp_ln86_1_fu_298_p2);
    p_cast69_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_206_p2),8));
    p_shl_fu_268_p3 <= (select_ln83_1_reg_418_pp0_iter9_reg & ap_const_lv7_0);
    select_ln83_1_fu_198_p3 <= 
        add_ln83_1_fu_192_p2 when (icmp_ln85_fu_178_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    select_ln83_fu_184_p3 <= 
        ap_const_lv8_0 when (icmp_ln85_fu_178_p2(0) = '1') else 
        ap_sig_allocacmp_n_load;
        sext_ln86_fu_314_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln86_2_fu_308_p2),11));

    storemerge573_fu_359_p3 <= 
        ap_const_lv16_0 when (or_ln86_reg_445(0) = '1') else 
        OutConv2_q0;
    tmp_16_fu_216_p4 <= select_ln83_fu_184_p3(7 downto 1);
    tmp_17_fu_338_p4 <= mul_ln86_fu_332_p2(22 downto 13);
    tmp_fu_275_p3 <= (select_ln83_1_reg_418_pp0_iter9_reg & ap_const_lv5_0);
    trunc_ln86_fu_355_p1 <= grp_fu_238_p2(2 - 1 downto 0);
    zext_ln85_1_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_reg_411_pp0_iter9_reg),9));
    zext_ln85_2_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_275_p3),11));
    zext_ln86_1_fu_324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln86_3_fu_318_p2),64));
    zext_ln86_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_338_p4),64));
end behav;
