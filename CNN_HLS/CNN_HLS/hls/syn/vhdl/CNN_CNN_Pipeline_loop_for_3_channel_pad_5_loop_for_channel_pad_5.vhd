-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_3_channel_pad_5_loop_for_channel_pad_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutPadConv5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutPadConv5_ce0 : OUT STD_LOGIC;
    OutPadConv5_we0 : OUT STD_LOGIC;
    OutPadConv5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutConv4_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv4_ce0 : OUT STD_LOGIC;
    OutConv4_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_3_channel_pad_5_loop_for_channel_pad_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_540 : STD_LOGIC_VECTOR (10 downto 0) := "10101000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_51 : STD_LOGIC_VECTOR (6 downto 0) := "1010001";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv11_54 : STD_LOGIC_VECTOR (10 downto 0) := "00001010100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln135_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln135_fu_140_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln135_reg_310 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln135_reg_310_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln135_1_fu_154_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln135_1_reg_317 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln135_1_reg_317_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln138_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_328 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln138_reg_328_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln138_reg_338 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln138_1_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln138_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_60 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln137_fu_182_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_load : STD_LOGIC_VECTOR (6 downto 0);
    signal c_fu_64 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten72_fu_68 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln135_fu_122_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten72_load : STD_LOGIC_VECTOR (10 downto 0);
    signal OutConv4_ce0_local : STD_LOGIC;
    signal OutPadConv5_we0_local : STD_LOGIC;
    signal storemerge591_fu_268_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv5_ce0_local : STD_LOGIC;
    signal icmp_ln137_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln135_1_fu_148_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_166_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_210_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_203_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln137_2_fu_217_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln138_1_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln137_1_fu_230_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln138_1_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln138_fu_249_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln137_1_fu_221_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln138_2_fu_253_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_276_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_276_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_276_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_276_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_276_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mac_muladd_7ns_5ns_7ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_7ns_5ns_7ns_11_4_1_U347 : component CNN_mac_muladd_7ns_5ns_7ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_276_p0,
        din1 => grp_fu_276_p1,
        din2 => grp_fu_276_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_276_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    c_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln135_fu_116_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c_fu_64 <= select_ln135_1_fu_154_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_64 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten72_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln135_fu_116_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten72_fu_68 <= add_ln135_fu_122_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten72_fu_68 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    n_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln135_fu_116_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_fu_60 <= add_ln137_fu_182_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_60 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln138_reg_328 <= icmp_ln138_fu_176_p2;
                icmp_ln138_reg_328_pp0_iter1_reg <= icmp_ln138_reg_328;
                select_ln135_1_reg_317 <= select_ln135_1_fu_154_p3;
                select_ln135_1_reg_317_pp0_iter1_reg <= select_ln135_1_reg_317;
                select_ln135_reg_310 <= select_ln135_fu_140_p3;
                select_ln135_reg_310_pp0_iter1_reg <= select_ln135_reg_310;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_ln138_reg_338 <= or_ln138_fu_238_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv4_address0 <= zext_ln138_1_fu_259_p1(11 - 1 downto 0);
    OutConv4_ce0 <= OutConv4_ce0_local;

    OutConv4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            OutConv4_ce0_local <= ap_const_logic_1;
        else 
            OutConv4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv5_address0 <= zext_ln138_fu_264_p1(11 - 1 downto 0);
    OutPadConv5_ce0 <= OutPadConv5_ce0_local;

    OutPadConv5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPadConv5_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv5_d0 <= storemerge591_fu_268_p3;
    OutPadConv5_we0 <= OutPadConv5_we0_local;

    OutPadConv5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPadConv5_we0_local <= ap_const_logic_1;
        else 
            OutPadConv5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln135_1_fu_148_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c_load) + unsigned(ap_const_lv5_1));
    add_ln135_fu_122_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten72_load) + unsigned(ap_const_lv11_1));
    add_ln137_1_fu_221_p2 <= std_logic_vector(unsigned(p_shl_fu_203_p3) + unsigned(zext_ln137_2_fu_217_p1));
    add_ln137_fu_182_p2 <= std_logic_vector(unsigned(select_ln135_fu_140_p3) + unsigned(ap_const_lv7_1));
    add_ln138_1_fu_243_p2 <= std_logic_vector(unsigned(zext_ln137_1_fu_230_p1) + unsigned(ap_const_lv8_FE));
    add_ln138_2_fu_253_p2 <= std_logic_vector(signed(sext_ln138_fu_249_p1) + signed(add_ln137_1_fu_221_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln135_fu_116_p2)
    begin
        if (((icmp_ln135_fu_116_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c_fu_64)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten72_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten72_fu_68)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten72_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten72_load <= indvar_flatten72_fu_68;
        end if; 
    end process;


    ap_sig_allocacmp_n_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_60, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_n_load <= n_fu_60;
        end if; 
    end process;

    grp_fu_276_p0 <= ap_const_lv11_54(7 - 1 downto 0);
    grp_fu_276_p1 <= grp_fu_276_p10(5 - 1 downto 0);
    grp_fu_276_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln135_1_fu_154_p3),11));
    grp_fu_276_p2 <= grp_fu_276_p20(7 - 1 downto 0);
    grp_fu_276_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln135_reg_310_pp0_iter1_reg),11));
    icmp_ln135_fu_116_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten72_load = ap_const_lv11_540) else "0";
    icmp_ln137_fu_134_p2 <= "1" when (ap_sig_allocacmp_n_load = ap_const_lv7_54) else "0";
    icmp_ln138_1_fu_233_p2 <= "1" when (unsigned(select_ln135_reg_310_pp0_iter1_reg) > unsigned(ap_const_lv7_51)) else "0";
    icmp_ln138_fu_176_p2 <= "1" when (tmp_12_fu_166_p4 = ap_const_lv6_0) else "0";
    or_ln138_fu_238_p2 <= (icmp_ln138_reg_328_pp0_iter1_reg or icmp_ln138_1_fu_233_p2);
    p_shl_fu_203_p3 <= (select_ln135_1_reg_317_pp0_iter1_reg & ap_const_lv6_0);
    select_ln135_1_fu_154_p3 <= 
        add_ln135_1_fu_148_p2 when (icmp_ln137_fu_134_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    select_ln135_fu_140_p3 <= 
        ap_const_lv7_0 when (icmp_ln137_fu_134_p2(0) = '1') else 
        ap_sig_allocacmp_n_load;
        sext_ln138_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln138_1_fu_243_p2),11));

    storemerge591_fu_268_p3 <= 
        ap_const_lv16_0 when (or_ln138_reg_338(0) = '1') else 
        OutConv4_q0;
    tmp_12_fu_166_p4 <= select_ln135_fu_140_p3(6 downto 1);
    tmp_fu_210_p3 <= (select_ln135_1_reg_317_pp0_iter1_reg & ap_const_lv4_0);
    zext_ln137_1_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln135_reg_310_pp0_iter1_reg),8));
    zext_ln137_2_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_210_p3),11));
    zext_ln138_1_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln138_2_fu_253_p2),64));
    zext_ln138_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_276_p3),64));
end behav;
