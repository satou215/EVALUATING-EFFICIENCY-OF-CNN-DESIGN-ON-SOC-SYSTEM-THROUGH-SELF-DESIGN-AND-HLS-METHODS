-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_3_channel_pad_6_loop_for_channel_pad_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutPadConv6_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPadConv6_ce0 : OUT STD_LOGIC;
    OutPadConv6_we0 : OUT STD_LOGIC;
    OutPadConv6_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPool2_ce0 : OUT STD_LOGIC;
    OutPool2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_3_channel_pad_6_loop_for_channel_pad_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_2C0 : STD_LOGIC_VECTOR (9 downto 0) := "1011000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv7_7E : STD_LOGIC_VECTOR (6 downto 0) := "1111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_2C : STD_LOGIC_VECTOR (9 downto 0) := "0000101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln161_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln161_fu_138_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln161_reg_308 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln161_reg_308_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln161_1_fu_152_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln161_1_reg_315 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln161_1_reg_315_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln164_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_reg_326 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln164_reg_326_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln164_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln164_reg_336 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln164_1_fu_257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln164_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_58 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln163_fu_180_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_load : STD_LOGIC_VECTOR (5 downto 0);
    signal c_fu_62 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten113_fu_66 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln161_fu_120_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten113_load : STD_LOGIC_VECTOR (9 downto 0);
    signal OutPool2_ce0_local : STD_LOGIC;
    signal OutPadConv6_we0_local : STD_LOGIC;
    signal storemerge601_fu_266_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv6_ce0_local : STD_LOGIC;
    signal icmp_ln163_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln161_1_fu_146_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_164_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_208_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_201_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln163_2_fu_215_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln164_1_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln163_1_fu_228_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln164_1_fu_241_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln164_fu_247_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln163_1_fu_219_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln164_2_fu_251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_274_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_274_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_274_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_274_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_274_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mac_muladd_6ns_5ns_6ns_10_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_6ns_5ns_6ns_10_4_1_U361 : component CNN_mac_muladd_6ns_5ns_6ns_10_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 6,
        dout_WIDTH => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_274_p0,
        din1 => grp_fu_274_p1,
        din2 => grp_fu_274_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    c_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln161_fu_114_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c_fu_62 <= select_ln161_1_fu_152_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_62 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten113_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln161_fu_114_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten113_fu_66 <= add_ln161_fu_120_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten113_fu_66 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    n_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln161_fu_114_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_fu_58 <= add_ln163_fu_180_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_58 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln164_reg_326 <= icmp_ln164_fu_174_p2;
                icmp_ln164_reg_326_pp0_iter1_reg <= icmp_ln164_reg_326;
                select_ln161_1_reg_315 <= select_ln161_1_fu_152_p3;
                select_ln161_1_reg_315_pp0_iter1_reg <= select_ln161_1_reg_315;
                select_ln161_reg_308 <= select_ln161_fu_138_p3;
                select_ln161_reg_308_pp0_iter1_reg <= select_ln161_reg_308;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                or_ln164_reg_336 <= or_ln164_fu_236_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutPadConv6_address0 <= zext_ln164_fu_262_p1(10 - 1 downto 0);
    OutPadConv6_ce0 <= OutPadConv6_ce0_local;

    OutPadConv6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPadConv6_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv6_d0 <= storemerge601_fu_266_p3;
    OutPadConv6_we0 <= OutPadConv6_we0_local;

    OutPadConv6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPadConv6_we0_local <= ap_const_logic_1;
        else 
            OutPadConv6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool2_address0 <= zext_ln164_1_fu_257_p1(10 - 1 downto 0);
    OutPool2_ce0 <= OutPool2_ce0_local;

    OutPool2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            OutPool2_ce0_local <= ap_const_logic_1;
        else 
            OutPool2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln161_1_fu_146_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c_load) + unsigned(ap_const_lv5_1));
    add_ln161_fu_120_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten113_load) + unsigned(ap_const_lv10_1));
    add_ln163_1_fu_219_p2 <= std_logic_vector(unsigned(p_shl_fu_201_p3) + unsigned(zext_ln163_2_fu_215_p1));
    add_ln163_fu_180_p2 <= std_logic_vector(unsigned(select_ln161_fu_138_p3) + unsigned(ap_const_lv6_1));
    add_ln164_1_fu_241_p2 <= std_logic_vector(unsigned(zext_ln163_1_fu_228_p1) + unsigned(ap_const_lv7_7E));
    add_ln164_2_fu_251_p2 <= std_logic_vector(signed(sext_ln164_fu_247_p1) + signed(add_ln163_1_fu_219_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln161_fu_114_p2)
    begin
        if (((icmp_ln161_fu_114_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten113_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten113_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten113_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten113_load <= indvar_flatten113_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_n_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_58, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_n_load <= n_fu_58;
        end if; 
    end process;

    grp_fu_274_p0 <= ap_const_lv10_2C(6 - 1 downto 0);
    grp_fu_274_p1 <= grp_fu_274_p10(5 - 1 downto 0);
    grp_fu_274_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln161_1_fu_152_p3),10));
    grp_fu_274_p2 <= grp_fu_274_p20(6 - 1 downto 0);
    grp_fu_274_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln161_reg_308_pp0_iter1_reg),10));
    icmp_ln161_fu_114_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten113_load = ap_const_lv10_2C0) else "0";
    icmp_ln163_fu_132_p2 <= "1" when (ap_sig_allocacmp_n_load = ap_const_lv6_2C) else "0";
    icmp_ln164_1_fu_231_p2 <= "1" when (unsigned(select_ln161_reg_308_pp0_iter1_reg) > unsigned(ap_const_lv6_29)) else "0";
    icmp_ln164_fu_174_p2 <= "1" when (tmp_11_fu_164_p4 = ap_const_lv5_0) else "0";
    or_ln164_fu_236_p2 <= (icmp_ln164_reg_326_pp0_iter1_reg or icmp_ln164_1_fu_231_p2);
    p_shl_fu_201_p3 <= (select_ln161_1_reg_315_pp0_iter1_reg & ap_const_lv5_0);
    select_ln161_1_fu_152_p3 <= 
        add_ln161_1_fu_146_p2 when (icmp_ln163_fu_132_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    select_ln161_fu_138_p3 <= 
        ap_const_lv6_0 when (icmp_ln163_fu_132_p2(0) = '1') else 
        ap_sig_allocacmp_n_load;
        sext_ln164_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln164_1_fu_241_p2),10));

    storemerge601_fu_266_p3 <= 
        ap_const_lv16_0 when (or_ln164_reg_336(0) = '1') else 
        OutPool2_q0;
    tmp_11_fu_164_p4 <= select_ln161_fu_138_p3(5 downto 1);
    tmp_fu_208_p3 <= (select_ln161_1_reg_315_pp0_iter1_reg & ap_const_lv3_0);
    zext_ln163_1_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln161_reg_308_pp0_iter1_reg),7));
    zext_ln163_2_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_208_p3),10));
    zext_ln164_1_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln164_2_fu_251_p2),64));
    zext_ln164_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_274_p3),64));
end behav;
