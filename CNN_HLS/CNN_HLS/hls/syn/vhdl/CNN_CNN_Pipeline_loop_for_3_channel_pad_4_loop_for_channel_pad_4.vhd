-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_3_channel_pad_4_loop_for_channel_pad_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutPadConv4_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OutPadConv4_2_ce0 : OUT STD_LOGIC;
    OutPadConv4_2_we0 : OUT STD_LOGIC;
    OutPadConv4_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv4_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OutPadConv4_1_ce0 : OUT STD_LOGIC;
    OutPadConv4_1_we0 : OUT STD_LOGIC;
    OutPadConv4_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OutPadConv4_ce0 : OUT STD_LOGIC;
    OutPadConv4_we0 : OUT STD_LOGIC;
    OutPadConv4_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPool1_ce0 : OUT STD_LOGIC;
    OutPool1_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_3_channel_pad_4_loop_for_channel_pad_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_2A0 : STD_LOGIC_VECTOR (9 downto 0) := "1010100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_54 : STD_LOGIC_VECTOR (6 downto 0) := "1010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_51 : STD_LOGIC_VECTOR (6 downto 0) := "1010001";
    constant ap_const_lv15_AB : STD_LOGIC_VECTOR (14 downto 0) := "000000010101011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln109_fu_162_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln111_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_422_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_422_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_422_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_422_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_422_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_422_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_422_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_422_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln109_fu_183_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_reg_427 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_reg_427_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_reg_427_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_reg_427_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_reg_427_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_reg_427_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_reg_427_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_reg_427_pp0_iter7_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_reg_427_pp0_iter8_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln112_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_435 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_435_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_435_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_435_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_435_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_435_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_435_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_435_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_435_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln112_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln112_reg_440 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln112_fu_337_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln112_reg_445 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln112_2_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln112_1_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_80 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln111_fu_213_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_load : STD_LOGIC_VECTOR (6 downto 0);
    signal c_fu_84 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln109_1_fu_238_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten58_fu_88 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln109_fu_168_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten58_load : STD_LOGIC_VECTOR (9 downto 0);
    signal OutPool1_ce0_local : STD_LOGIC;
    signal OutPadConv4_1_we0_local : STD_LOGIC;
    signal trunc_ln112_fu_375_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal storemerge583_fu_379_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv4_1_ce0_local : STD_LOGIC;
    signal OutPadConv4_we0_local : STD_LOGIC;
    signal OutPadConv4_ce0_local : STD_LOGIC;
    signal OutPadConv4_2_we0_local : STD_LOGIC;
    signal OutPadConv4_2_ce0_local : STD_LOGIC;
    signal tmp_14_fu_191_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_207_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln109_1_fu_232_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_253_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_fu_245_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_fu_261_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln111_fu_271_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_283_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_fu_275_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln111_fu_291_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln112_1_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln112_fu_317_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln112_fu_317_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln112_fu_317_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_15_fu_323_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln112_fu_333_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln111_fu_295_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln111_1_fu_301_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln112_1_fu_343_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln112_fu_349_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_265_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln112_2_fu_353_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal mul_ln112_fu_317_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_urem_7ns_3ns_2_11_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component CNN_mul_7ns_9ns_15_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_7ns_3ns_2_11_1_U241 : component CNN_urem_7ns_3ns_2_11_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln109_fu_183_p3,
        din1 => grp_fu_207_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_207_p2);

    mul_7ns_9ns_15_1_1_U242 : component CNN_mul_7ns_9ns_15_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 9,
        dout_WIDTH => 15)
    port map (
        din0 => mul_ln112_fu_317_p0,
        din1 => mul_ln112_fu_317_p1,
        dout => mul_ln112_fu_317_p2);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c_fu_84 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    c_fu_84 <= select_ln109_1_fu_238_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten58_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln109_fu_162_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten58_fu_88 <= add_ln109_fu_168_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten58_fu_88 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    n_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln109_fu_162_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_fu_80 <= add_ln111_fu_213_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_80 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln112_reg_445 <= add_ln112_fu_337_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln111_reg_422_pp0_iter2_reg <= icmp_ln111_reg_422_pp0_iter1_reg;
                icmp_ln111_reg_422_pp0_iter3_reg <= icmp_ln111_reg_422_pp0_iter2_reg;
                icmp_ln111_reg_422_pp0_iter4_reg <= icmp_ln111_reg_422_pp0_iter3_reg;
                icmp_ln111_reg_422_pp0_iter5_reg <= icmp_ln111_reg_422_pp0_iter4_reg;
                icmp_ln111_reg_422_pp0_iter6_reg <= icmp_ln111_reg_422_pp0_iter5_reg;
                icmp_ln111_reg_422_pp0_iter7_reg <= icmp_ln111_reg_422_pp0_iter6_reg;
                icmp_ln111_reg_422_pp0_iter8_reg <= icmp_ln111_reg_422_pp0_iter7_reg;
                icmp_ln112_reg_435_pp0_iter2_reg <= icmp_ln112_reg_435_pp0_iter1_reg;
                icmp_ln112_reg_435_pp0_iter3_reg <= icmp_ln112_reg_435_pp0_iter2_reg;
                icmp_ln112_reg_435_pp0_iter4_reg <= icmp_ln112_reg_435_pp0_iter3_reg;
                icmp_ln112_reg_435_pp0_iter5_reg <= icmp_ln112_reg_435_pp0_iter4_reg;
                icmp_ln112_reg_435_pp0_iter6_reg <= icmp_ln112_reg_435_pp0_iter5_reg;
                icmp_ln112_reg_435_pp0_iter7_reg <= icmp_ln112_reg_435_pp0_iter6_reg;
                icmp_ln112_reg_435_pp0_iter8_reg <= icmp_ln112_reg_435_pp0_iter7_reg;
                or_ln112_reg_440 <= or_ln112_fu_309_p2;
                select_ln109_reg_427_pp0_iter2_reg <= select_ln109_reg_427_pp0_iter1_reg;
                select_ln109_reg_427_pp0_iter3_reg <= select_ln109_reg_427_pp0_iter2_reg;
                select_ln109_reg_427_pp0_iter4_reg <= select_ln109_reg_427_pp0_iter3_reg;
                select_ln109_reg_427_pp0_iter5_reg <= select_ln109_reg_427_pp0_iter4_reg;
                select_ln109_reg_427_pp0_iter6_reg <= select_ln109_reg_427_pp0_iter5_reg;
                select_ln109_reg_427_pp0_iter7_reg <= select_ln109_reg_427_pp0_iter6_reg;
                select_ln109_reg_427_pp0_iter8_reg <= select_ln109_reg_427_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln111_reg_422 <= icmp_ln111_fu_177_p2;
                icmp_ln111_reg_422_pp0_iter1_reg <= icmp_ln111_reg_422;
                icmp_ln112_reg_435 <= icmp_ln112_fu_201_p2;
                icmp_ln112_reg_435_pp0_iter1_reg <= icmp_ln112_reg_435;
                select_ln109_reg_427 <= select_ln109_fu_183_p3;
                select_ln109_reg_427_pp0_iter1_reg <= select_ln109_reg_427;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutPadConv4_1_address0 <= zext_ln112_1_fu_369_p1(8 - 1 downto 0);
    OutPadConv4_1_ce0 <= OutPadConv4_1_ce0_local;

    OutPadConv4_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OutPadConv4_1_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv4_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv4_1_d0 <= storemerge583_fu_379_p3;
    OutPadConv4_1_we0 <= OutPadConv4_1_we0_local;

    OutPadConv4_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln112_fu_375_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln112_fu_375_p1 = ap_const_lv2_1))) then 
            OutPadConv4_1_we0_local <= ap_const_logic_1;
        else 
            OutPadConv4_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv4_2_address0 <= zext_ln112_1_fu_369_p1(8 - 1 downto 0);
    OutPadConv4_2_ce0 <= OutPadConv4_2_ce0_local;

    OutPadConv4_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OutPadConv4_2_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv4_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv4_2_d0 <= storemerge583_fu_379_p3;
    OutPadConv4_2_we0 <= OutPadConv4_2_we0_local;

    OutPadConv4_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln112_fu_375_p1)
    begin
        if ((not((trunc_ln112_fu_375_p1 = ap_const_lv2_0)) and not((trunc_ln112_fu_375_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OutPadConv4_2_we0_local <= ap_const_logic_1;
        else 
            OutPadConv4_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv4_address0 <= zext_ln112_1_fu_369_p1(8 - 1 downto 0);
    OutPadConv4_ce0 <= OutPadConv4_ce0_local;

    OutPadConv4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then 
            OutPadConv4_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv4_d0 <= storemerge583_fu_379_p3;
    OutPadConv4_we0 <= OutPadConv4_we0_local;

    OutPadConv4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001, trunc_ln112_fu_375_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln112_fu_375_p1 = ap_const_lv2_0))) then 
            OutPadConv4_we0_local <= ap_const_logic_1;
        else 
            OutPadConv4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool1_address0 <= zext_ln112_2_fu_359_p1(10 - 1 downto 0);
    OutPool1_ce0 <= OutPool1_ce0_local;

    OutPool1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            OutPool1_ce0_local <= ap_const_logic_1;
        else 
            OutPool1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln109_1_fu_232_p2 <= std_logic_vector(unsigned(c_fu_84) + unsigned(ap_const_lv4_1));
    add_ln109_fu_168_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten58_load) + unsigned(ap_const_lv10_1));
    add_ln111_fu_213_p2 <= std_logic_vector(unsigned(select_ln109_fu_183_p3) + unsigned(ap_const_lv7_1));
    add_ln112_1_fu_343_p2 <= std_logic_vector(unsigned(zext_ln111_1_fu_301_p1) + unsigned(ap_const_lv8_FE));
    add_ln112_2_fu_353_p2 <= std_logic_vector(signed(sext_ln112_fu_349_p1) + signed(empty_fu_265_p2));
    add_ln112_fu_337_p2 <= std_logic_vector(unsigned(zext_ln112_fu_333_p1) + unsigned(sub_ln111_fu_295_p2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln109_fu_162_p2)
    begin
        if (((icmp_ln109_fu_162_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten58_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten58_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten58_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten58_load <= indvar_flatten58_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_n_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_80, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_n_load <= n_fu_80;
        end if; 
    end process;

    empty_fu_265_p2 <= std_logic_vector(unsigned(p_shl7_fu_245_p3) + unsigned(p_shl8_fu_261_p1));
    grp_fu_207_p1 <= ap_const_lv7_3(3 - 1 downto 0);
    icmp_ln109_fu_162_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten58_load = ap_const_lv10_2A0) else "0";
    icmp_ln111_fu_177_p2 <= "1" when (ap_sig_allocacmp_n_load = ap_const_lv7_54) else "0";
    icmp_ln112_1_fu_304_p2 <= "1" when (unsigned(select_ln109_reg_427_pp0_iter8_reg) > unsigned(ap_const_lv7_51)) else "0";
    icmp_ln112_fu_201_p2 <= "1" when (tmp_14_fu_191_p4 = ap_const_lv6_0) else "0";
    mul_ln112_fu_317_p0 <= mul_ln112_fu_317_p00(7 - 1 downto 0);
    mul_ln112_fu_317_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln109_reg_427_pp0_iter8_reg),15));
    mul_ln112_fu_317_p1 <= ap_const_lv15_AB(9 - 1 downto 0);
    or_ln112_fu_309_p2 <= (icmp_ln112_reg_435_pp0_iter8_reg or icmp_ln112_1_fu_304_p2);
    p_shl7_fu_245_p3 <= (select_ln109_1_fu_238_p3 & ap_const_lv6_0);
    p_shl8_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_253_p3),10));
    p_shl_fu_275_p3 <= (trunc_ln111_fu_271_p1 & ap_const_lv5_0);
    select_ln109_1_fu_238_p3 <= 
        add_ln109_1_fu_232_p2 when (icmp_ln111_reg_422_pp0_iter8_reg(0) = '1') else 
        c_fu_84;
    select_ln109_fu_183_p3 <= 
        ap_const_lv7_0 when (icmp_ln111_fu_177_p2(0) = '1') else 
        ap_sig_allocacmp_n_load;
        sext_ln112_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln112_1_fu_343_p2),10));

    storemerge583_fu_379_p3 <= 
        ap_const_lv16_0 when (or_ln112_reg_440(0) = '1') else 
        OutPool1_q0;
    sub_ln111_fu_295_p2 <= std_logic_vector(unsigned(p_shl_fu_275_p3) - unsigned(zext_ln111_fu_291_p1));
    tmp_13_fu_283_p3 <= (select_ln109_1_fu_238_p3 & ap_const_lv2_0);
    tmp_14_fu_191_p4 <= select_ln109_fu_183_p3(6 downto 1);
    tmp_15_fu_323_p4 <= mul_ln112_fu_317_p2(14 downto 9);
    tmp_fu_253_p3 <= (select_ln109_1_fu_238_p3 & ap_const_lv4_0);
    trunc_ln111_fu_271_p1 <= select_ln109_1_fu_238_p3(3 - 1 downto 0);
    trunc_ln112_fu_375_p1 <= grp_fu_207_p2(2 - 1 downto 0);
    zext_ln111_1_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln109_reg_427_pp0_iter8_reg),8));
    zext_ln111_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_283_p3),8));
    zext_ln112_1_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_reg_445),64));
    zext_ln112_2_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln112_2_fu_353_p2),64));
    zext_ln112_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_323_p4),8));
end behav;
