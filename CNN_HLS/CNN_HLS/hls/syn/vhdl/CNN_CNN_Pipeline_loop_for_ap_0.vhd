-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_ap_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutPadConv0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv0_ce0 : OUT STD_LOGIC;
    OutPadConv0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv0_ce1 : OUT STD_LOGIC;
    OutPadConv0_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv0_address2 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv0_ce2 : OUT STD_LOGIC;
    OutPadConv0_q2 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv0_address3 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv0_ce3 : OUT STD_LOGIC;
    OutPadConv0_q3 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv0_address4 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv0_ce4 : OUT STD_LOGIC;
    OutPadConv0_q4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln23_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln23_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln23_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln23_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln23_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i16_i86_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_cast41_cast : IN STD_LOGIC_VECTOR (9 downto 0);
    OutConv0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv0_ce0 : OUT STD_LOGIC;
    OutConv0_we0 : OUT STD_LOGIC;
    OutConv0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Weights_load : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_ap_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_140 : STD_LOGIC_VECTOR (8 downto 0) := "101000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_4 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln17_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_cast41_cast_cast_fu_198_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast41_cast_cast_reg_481 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_i_i16_i86_i_cast_fu_202_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv_i_i16_i86_i_cast_reg_486 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln23_9_cast_fu_206_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln23_9_cast_reg_491 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln23_8_cast_fu_210_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln23_8_cast_reg_496 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln23_6_cast_fu_214_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln23_6_cast_reg_501 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln23_4_cast_fu_218_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln23_4_cast_reg_506 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln23_2_cast_fu_222_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln23_2_cast_reg_511 : STD_LOGIC_VECTOR (23 downto 0);
    signal y_1_reg_516 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_516_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_516_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_516_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_516_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_516_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_516_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_reg_555 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_555_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv0_load_2_reg_560 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv0_load_3_reg_565 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv0_load_3_reg_565_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv0_load_4_reg_570 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv0_load_4_reg_570_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv0_load_4_reg_570_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln17_fu_246_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln23_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_273_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_3_fu_284_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_72 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln23_fu_240_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_1 : STD_LOGIC_VECTOR (8 downto 0);
    signal OutPadConv0_ce4_local : STD_LOGIC;
    signal OutPadConv0_ce3_local : STD_LOGIC;
    signal OutPadConv0_ce2_local : STD_LOGIC;
    signal OutPadConv0_ce1_local : STD_LOGIC;
    signal OutPadConv0_ce0_local : STD_LOGIC;
    signal OutConv0_we0_local : STD_LOGIC;
    signal select_ln25_fu_428_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutConv0_ce0_local : STD_LOGIC;
    signal add_ln23_2_fu_256_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_4_fu_267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln23_6_fu_278_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln23_fu_298_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln23_fu_298_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_330_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_437_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_330_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_350_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_445_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_350_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_367_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_453_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_367_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1_fu_387_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_461_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1_fu_387_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln25_fu_396_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln25_fu_400_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln17_1_fu_384_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln25_1_fu_413_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_405_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_2_fu_423_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_445_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_445_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_453_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_453_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_461_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_461_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mul_16s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_24_1_1_U3 : component CNN_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => OutPadConv0_q4,
        din1 => mul_ln23_fu_298_p1,
        dout => mul_ln23_fu_298_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U4 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv0_q3,
        din1 => grp_fu_437_p1,
        din2 => grp_fu_437_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_437_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U5 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv0_load_2_reg_560,
        din1 => grp_fu_445_p1,
        din2 => grp_fu_445_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_445_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U6 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv0_load_3_reg_565_pp0_iter2_reg,
        din1 => grp_fu_453_p1,
        din2 => grp_fu_453_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_453_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U7 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv0_load_4_reg_570_pp0_iter3_reg,
        din1 => grp_fu_461_p1,
        din2 => grp_fu_461_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_461_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    y_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln17_fu_234_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_72 <= add_ln23_fu_240_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_72 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                OutPadConv0_load_2_reg_560 <= OutPadConv0_q2;
                OutPadConv0_load_3_reg_565 <= OutPadConv0_q1;
                OutPadConv0_load_4_reg_570 <= OutPadConv0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                OutPadConv0_load_3_reg_565_pp0_iter2_reg <= OutPadConv0_load_3_reg_565;
                OutPadConv0_load_4_reg_570_pp0_iter2_reg <= OutPadConv0_load_4_reg_570;
                OutPadConv0_load_4_reg_570_pp0_iter3_reg <= OutPadConv0_load_4_reg_570_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                tmp_s_reg_555_pp0_iter2_reg <= tmp_s_reg_555;
                y_1_reg_516_pp0_iter2_reg <= y_1_reg_516_pp0_iter1_reg;
                y_1_reg_516_pp0_iter3_reg <= y_1_reg_516_pp0_iter2_reg;
                y_1_reg_516_pp0_iter4_reg <= y_1_reg_516_pp0_iter3_reg;
                y_1_reg_516_pp0_iter5_reg <= y_1_reg_516_pp0_iter4_reg;
                y_1_reg_516_pp0_iter6_reg <= y_1_reg_516_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                conv_i_i16_i86_i_cast_reg_486 <= conv_i_i16_i86_i_cast_fu_202_p1;
                    p_cast41_cast_cast_reg_481(9 downto 0) <= p_cast41_cast_cast_fu_198_p1(9 downto 0);
                sext_ln23_2_cast_reg_511 <= sext_ln23_2_cast_fu_222_p1;
                sext_ln23_4_cast_reg_506 <= sext_ln23_4_cast_fu_218_p1;
                sext_ln23_6_cast_reg_501 <= sext_ln23_6_cast_fu_214_p1;
                sext_ln23_8_cast_reg_496 <= sext_ln23_8_cast_fu_210_p1;
                sext_ln23_9_cast_reg_491 <= sext_ln23_9_cast_fu_206_p1;
                tmp_s_reg_555 <= mul_ln23_fu_298_p2(23 downto 8);
                y_1_reg_516 <= ap_sig_allocacmp_y_1;
                y_1_reg_516_pp0_iter1_reg <= y_1_reg_516;
            end if;
        end if;
    end process;
    p_cast41_cast_cast_reg_481(10) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv0_address0 <= zext_ln25_fu_418_p1(11 - 1 downto 0);
    OutConv0_ce0 <= OutConv0_ce0_local;

    OutConv0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            OutConv0_ce0_local <= ap_const_logic_1;
        else 
            OutConv0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutConv0_d0 <= select_ln25_fu_428_p3;
    OutConv0_we0 <= OutConv0_we0_local;

    OutConv0_we0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            OutConv0_we0_local <= ap_const_logic_1;
        else 
            OutConv0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv0_address0 <= zext_ln23_3_fu_284_p1(9 - 1 downto 0);
    OutPadConv0_address1 <= zext_ln23_2_fu_273_p1(9 - 1 downto 0);
    OutPadConv0_address2 <= zext_ln23_1_fu_262_p1(9 - 1 downto 0);
    OutPadConv0_address3 <= zext_ln23_fu_251_p1(9 - 1 downto 0);
    OutPadConv0_address4 <= zext_ln17_fu_246_p1(9 - 1 downto 0);
    OutPadConv0_ce0 <= OutPadConv0_ce0_local;

    OutPadConv0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv0_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv0_ce1 <= OutPadConv0_ce1_local;

    OutPadConv0_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv0_ce1_local <= ap_const_logic_1;
        else 
            OutPadConv0_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv0_ce2 <= OutPadConv0_ce2_local;

    OutPadConv0_ce2_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv0_ce2_local <= ap_const_logic_1;
        else 
            OutPadConv0_ce2_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv0_ce3 <= OutPadConv0_ce3_local;

    OutPadConv0_ce3_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv0_ce3_local <= ap_const_logic_1;
        else 
            OutPadConv0_ce3_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv0_ce4 <= OutPadConv0_ce4_local;

    OutPadConv0_ce4_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv0_ce4_local <= ap_const_logic_1;
        else 
            OutPadConv0_ce4_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln23_2_fu_256_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_y_1) + unsigned(ap_const_lv9_2));
    add_ln23_4_fu_267_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_y_1) + unsigned(ap_const_lv9_3));
    add_ln23_6_fu_278_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_y_1) + unsigned(ap_const_lv9_4));
    add_ln23_fu_240_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_y_1) + unsigned(ap_const_lv9_1));
    add_ln25_1_fu_413_p2 <= std_logic_vector(unsigned(zext_ln17_1_fu_384_p1) + unsigned(p_cast41_cast_cast_reg_481));
    add_ln25_2_fu_423_p2 <= std_logic_vector(unsigned(Weights_load) + unsigned(trunc_ln1_fu_387_p4));
    add_ln25_fu_400_p2 <= std_logic_vector(signed(sext_ln25_fu_396_p1) + signed(conv_i_i16_i86_i_cast_reg_486));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln17_fu_234_p2)
    begin
        if (((icmp_ln17_fu_234_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_y_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_72, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_y_1 <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_y_1 <= y_fu_72;
        end if; 
    end process;

        conv_i_i16_i86_i_cast_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_i_i16_i86_i),17));

    grp_fu_437_p1 <= sext_ln23_4_cast_reg_506(16 - 1 downto 0);
    grp_fu_437_p2 <= (tmp_s_reg_555_pp0_iter2_reg & ap_const_lv8_0);
    grp_fu_445_p1 <= sext_ln23_6_cast_reg_501(16 - 1 downto 0);
    grp_fu_445_p2 <= (tmp_10_fu_330_p4 & ap_const_lv8_0);
    grp_fu_453_p1 <= sext_ln23_8_cast_reg_496(16 - 1 downto 0);
    grp_fu_453_p2 <= (tmp_11_fu_350_p4 & ap_const_lv8_0);
    grp_fu_461_p1 <= sext_ln23_9_cast_reg_491(16 - 1 downto 0);
    grp_fu_461_p2 <= (tmp_12_fu_367_p4 & ap_const_lv8_0);
    icmp_ln17_fu_234_p2 <= "1" when (ap_sig_allocacmp_y_1 = ap_const_lv9_140) else "0";
    mul_ln23_fu_298_p1 <= sext_ln23_2_cast_reg_511(16 - 1 downto 0);
    p_cast41_cast_cast_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast41_cast),11));
    select_ln25_fu_428_p3 <= 
        ap_const_lv16_0 when (tmp_fu_405_p3(0) = '1') else 
        add_ln25_2_fu_423_p2;
        sext_ln23_2_cast_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_2),24));

        sext_ln23_4_cast_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_4),24));

        sext_ln23_6_cast_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_6),24));

        sext_ln23_8_cast_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_8),24));

        sext_ln23_9_cast_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln23_9),24));

        sext_ln25_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_387_p4),17));

    tmp_10_fu_330_p1 <= grp_fu_437_p3;
    tmp_10_fu_330_p4 <= tmp_10_fu_330_p1(23 downto 8);
    tmp_11_fu_350_p1 <= grp_fu_445_p3;
    tmp_11_fu_350_p4 <= tmp_11_fu_350_p1(23 downto 8);
    tmp_12_fu_367_p1 <= grp_fu_453_p3;
    tmp_12_fu_367_p4 <= tmp_12_fu_367_p1(23 downto 8);
    tmp_fu_405_p3 <= add_ln25_fu_400_p2(16 downto 16);
    trunc_ln1_fu_387_p1 <= grp_fu_461_p3;
    trunc_ln1_fu_387_p4 <= trunc_ln1_fu_387_p1(23 downto 8);
    zext_ln17_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_1_reg_516_pp0_iter6_reg),11));
    zext_ln17_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_y_1),64));
    zext_ln23_1_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_2_fu_256_p2),64));
    zext_ln23_2_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_4_fu_267_p2),64));
    zext_ln23_3_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_6_fu_278_p2),64));
    zext_ln23_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_240_p2),64));
    zext_ln25_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln25_1_fu_413_p2),64));
end behav;
