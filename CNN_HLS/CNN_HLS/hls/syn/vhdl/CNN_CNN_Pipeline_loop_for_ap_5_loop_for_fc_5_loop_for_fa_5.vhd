-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_cast105 : IN STD_LOGIC_VECTOR (10 downto 0);
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutPadConv5_ce0 : OUT STD_LOGIC;
    OutPadConv5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i16_i86_i291 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutConv5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv5_ce0 : OUT STD_LOGIC;
    OutConv5_we0 : OUT STD_LOGIC;
    OutConv5_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Weights_load_130 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1900 : STD_LOGIC_VECTOR (12 downto 0) := "1100100000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_4EC : STD_LOGIC_VECTOR (10 downto 0) := "10011101100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_54 : STD_LOGIC_VECTOR (10 downto 0) := "00001010100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln147_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv_i_i16_i86_i291_cast_fu_173_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv_i_i16_i86_i291_cast_reg_604 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln150_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_reg_613 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_reg_613_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_reg_613_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_reg_613_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_reg_613_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_reg_613_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_reg_619_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_reg_619_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_reg_619_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_reg_619_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln147_reg_619_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_mid2_fu_275_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_624 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_624_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_624_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln150_fu_283_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln150_reg_630 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln150_reg_630_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln150_reg_630_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln152_1_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_641_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_641_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_641_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_641_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_641_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln152_1_reg_641_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_645_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_645_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_645_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_645_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_645_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_1_reg_645_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln147_1_fu_356_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln147_1_reg_649 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln147_1_reg_649_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln147_1_reg_649_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln147_1_reg_649_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln147_1_reg_649_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln153_4_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln153_1_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln155_fu_509_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_1_fu_92 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal s_fu_478_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_s_1_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_96 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln152_fu_295_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_100 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten79_fu_104 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln150_1_fu_319_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten79_load : STD_LOGIC_VECTOR (7 downto 0);
    signal y_fu_108 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal indvar_flatten99_fu_112 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln147_fu_219_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten99_load : STD_LOGIC_VECTOR (12 downto 0);
    signal Weights_ce0_local : STD_LOGIC;
    signal OutPadConv5_ce0_local : STD_LOGIC;
    signal OutConv5_we0_local : STD_LOGIC;
    signal select_ln155_fu_519_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutConv5_ce0_local : STD_LOGIC;
    signal icmp_ln152_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln147_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln147_fu_237_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln150_fu_263_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln150_1_fu_313_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln147_1_fu_350_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln152_2_fu_363_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln153_fu_366_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_384_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_fu_391_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln150_fu_381_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_201_fu_395_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_533_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast113_fu_401_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln153_2_fu_412_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln152_1_fu_405_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln153_5_fu_421_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln153_3_fu_427_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln153_2_fu_417_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln153_3_fu_431_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln147_2_fu_453_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_202_fu_460_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_fu_478_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_542_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln155_fu_487_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln155_fu_491_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln147_fu_475_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln155_1_fu_504_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln155_2_fu_514_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_533_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_533_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_533_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_533_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_533_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mac_muladd_7ns_5ns_7ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_7ns_5ns_7ns_11_4_1_U351 : component CNN_mac_muladd_7ns_5ns_7ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 5,
        din2_WIDTH => 7,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_533_p0,
        din1 => grp_fu_533_p1,
        din2 => grp_fu_533_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_533_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U352 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv5_q0,
        din1 => Weights_q0,
        din2 => grp_fu_542_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_542_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten79_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln147_fu_213_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten79_fu_104 <= select_ln150_1_fu_319_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten79_fu_104 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten99_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln147_fu_213_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten99_fu_112 <= add_ln147_fu_219_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten99_fu_112 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln147_fu_213_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_96 <= add_ln152_fu_295_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_96 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln147_fu_213_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_100 <= select_ln150_fu_283_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_100 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    s_1_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    s_1_fu_92 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    s_1_fu_92 <= s_fu_478_p1(23 downto 8);
                end if;
            end if; 
        end if;
    end process;

    y_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    y_fu_108 <= ap_const_lv7_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    y_fu_108 <= select_ln147_1_fu_356_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln147_reg_619 <= and_ln147_fu_257_p2;
                and_ln147_reg_619_pp0_iter1_reg <= and_ln147_reg_619;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                conv_i_i16_i86_i291_cast_reg_604 <= conv_i_i16_i86_i291_cast_fu_173_p1;
                icmp_ln150_1_reg_645 <= icmp_ln150_1_fu_307_p2;
                icmp_ln150_1_reg_645_pp0_iter1_reg <= icmp_ln150_1_reg_645;
                icmp_ln150_reg_613 <= icmp_ln150_fu_231_p2;
                icmp_ln150_reg_613_pp0_iter1_reg <= icmp_ln150_reg_613;
                icmp_ln152_1_reg_641 <= icmp_ln152_1_fu_301_p2;
                icmp_ln152_1_reg_641_pp0_iter1_reg <= icmp_ln152_1_reg_641;
                j_mid2_reg_624 <= j_mid2_fu_275_p3;
                j_mid2_reg_624_pp0_iter1_reg <= j_mid2_reg_624;
                select_ln150_reg_630 <= select_ln150_fu_283_p3;
                select_ln150_reg_630_pp0_iter1_reg <= select_ln150_reg_630;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln147_reg_619_pp0_iter2_reg <= and_ln147_reg_619_pp0_iter1_reg;
                and_ln147_reg_619_pp0_iter3_reg <= and_ln147_reg_619_pp0_iter2_reg;
                and_ln147_reg_619_pp0_iter4_reg <= and_ln147_reg_619_pp0_iter3_reg;
                and_ln147_reg_619_pp0_iter5_reg <= and_ln147_reg_619_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                icmp_ln150_1_reg_645_pp0_iter2_reg <= icmp_ln150_1_reg_645_pp0_iter1_reg;
                icmp_ln150_1_reg_645_pp0_iter3_reg <= icmp_ln150_1_reg_645_pp0_iter2_reg;
                icmp_ln150_1_reg_645_pp0_iter4_reg <= icmp_ln150_1_reg_645_pp0_iter3_reg;
                icmp_ln150_1_reg_645_pp0_iter5_reg <= icmp_ln150_1_reg_645_pp0_iter4_reg;
                icmp_ln150_1_reg_645_pp0_iter6_reg <= icmp_ln150_1_reg_645_pp0_iter5_reg;
                icmp_ln150_reg_613_pp0_iter2_reg <= icmp_ln150_reg_613_pp0_iter1_reg;
                icmp_ln150_reg_613_pp0_iter3_reg <= icmp_ln150_reg_613_pp0_iter2_reg;
                icmp_ln150_reg_613_pp0_iter4_reg <= icmp_ln150_reg_613_pp0_iter3_reg;
                icmp_ln150_reg_613_pp0_iter5_reg <= icmp_ln150_reg_613_pp0_iter4_reg;
                icmp_ln152_1_reg_641_pp0_iter2_reg <= icmp_ln152_1_reg_641_pp0_iter1_reg;
                icmp_ln152_1_reg_641_pp0_iter3_reg <= icmp_ln152_1_reg_641_pp0_iter2_reg;
                icmp_ln152_1_reg_641_pp0_iter4_reg <= icmp_ln152_1_reg_641_pp0_iter3_reg;
                icmp_ln152_1_reg_641_pp0_iter5_reg <= icmp_ln152_1_reg_641_pp0_iter4_reg;
                icmp_ln152_1_reg_641_pp0_iter6_reg <= icmp_ln152_1_reg_641_pp0_iter5_reg;
                j_mid2_reg_624_pp0_iter2_reg <= j_mid2_reg_624_pp0_iter1_reg;
                select_ln147_1_reg_649 <= select_ln147_1_fu_356_p3;
                select_ln147_1_reg_649_pp0_iter3_reg <= select_ln147_1_reg_649;
                select_ln147_1_reg_649_pp0_iter4_reg <= select_ln147_1_reg_649_pp0_iter3_reg;
                select_ln147_1_reg_649_pp0_iter5_reg <= select_ln147_1_reg_649_pp0_iter4_reg;
                select_ln147_1_reg_649_pp0_iter6_reg <= select_ln147_1_reg_649_pp0_iter5_reg;
                select_ln150_reg_630_pp0_iter2_reg <= select_ln150_reg_630_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv5_address0 <= zext_ln155_fu_509_p1(11 - 1 downto 0);
    OutConv5_ce0 <= OutConv5_ce0_local;

    OutConv5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            OutConv5_ce0_local <= ap_const_logic_1;
        else 
            OutConv5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutConv5_d0 <= select_ln155_fu_519_p3;
    OutConv5_we0 <= OutConv5_we0_local;

    OutConv5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, icmp_ln152_1_reg_641_pp0_iter6_reg, icmp_ln150_1_reg_645_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln150_1_reg_645_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln152_1_reg_641_pp0_iter6_reg = ap_const_lv1_1))) then 
            OutConv5_we0_local <= ap_const_logic_1;
        else 
            OutConv5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv5_address0 <= zext_ln153_1_fu_408_p1(11 - 1 downto 0);
    OutPadConv5_ce0 <= OutPadConv5_ce0_local;

    OutPadConv5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPadConv5_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Weights_address0 <= zext_ln153_4_fu_437_p1(14 - 1 downto 0);
    Weights_ce0 <= Weights_ce0_local;

    Weights_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            Weights_ce0_local <= ap_const_logic_1;
        else 
            Weights_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln147_1_fu_350_p2 <= std_logic_vector(unsigned(y_fu_108) + unsigned(ap_const_lv7_1));
    add_ln147_fu_219_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten99_load) + unsigned(ap_const_lv13_1));
    add_ln150_1_fu_313_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten79_load) + unsigned(ap_const_lv8_1));
    add_ln150_fu_263_p2 <= std_logic_vector(unsigned(select_ln147_fu_237_p3) + unsigned(ap_const_lv5_1));
    add_ln152_fu_295_p2 <= std_logic_vector(unsigned(j_mid2_fu_275_p3) + unsigned(ap_const_lv3_1));
    add_ln153_2_fu_412_p2 <= std_logic_vector(unsigned(p_cast105) + unsigned(p_cast113_fu_401_p1));
    add_ln153_3_fu_431_p2 <= std_logic_vector(unsigned(zext_ln153_3_fu_427_p1) + unsigned(zext_ln153_2_fu_417_p1));
    add_ln153_5_fu_421_p2 <= std_logic_vector(unsigned(zext_ln152_1_fu_405_p1) + unsigned(ap_const_lv11_4EC));
    add_ln153_fu_366_p2 <= std_logic_vector(unsigned(select_ln147_1_fu_356_p3) + unsigned(zext_ln152_2_fu_363_p1));
    add_ln155_1_fu_504_p2 <= std_logic_vector(unsigned(zext_ln147_fu_475_p1) + unsigned(p_cast105));
    add_ln155_2_fu_514_p2 <= std_logic_vector(unsigned(Weights_load_130) + unsigned(s_fu_478_p4));
    add_ln155_fu_491_p2 <= std_logic_vector(signed(sext_ln155_fu_487_p1) + signed(conv_i_i16_i86_i291_cast_reg_604));
    and_ln147_fu_257_p2 <= (xor_ln147_fu_245_p2 and icmp_ln152_fu_251_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln147_fu_213_p2)
    begin
        if (((icmp_ln147_fu_213_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten79_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten79_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten79_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten79_load <= indvar_flatten79_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten99_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten99_fu_112)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten99_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten99_load <= indvar_flatten99_fu_112;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_s_1_load_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0, s_1_fu_92, s_fu_478_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ap_sig_allocacmp_s_1_load <= s_fu_478_p1(23 downto 8);
        else 
            ap_sig_allocacmp_s_1_load <= s_1_fu_92;
        end if; 
    end process;

        conv_i_i16_i86_i291_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_i_i16_i86_i291),17));

    empty_201_fu_395_p2 <= std_logic_vector(unsigned(p_shl_fu_391_p1) + unsigned(zext_ln150_fu_381_p1));
    empty_202_fu_460_p3 <= 
        ap_sig_allocacmp_s_1_load when (and_ln147_reg_619_pp0_iter5_reg(0) = '1') else 
        select_ln147_2_fu_453_p3;
    empty_fu_269_p2 <= (icmp_ln150_fu_231_p2 or and_ln147_fu_257_p2);
    grp_fu_533_p0 <= ap_const_lv11_54(7 - 1 downto 0);
    grp_fu_533_p1 <= grp_fu_533_p10(5 - 1 downto 0);
    grp_fu_533_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln150_fu_283_p3),11));
    grp_fu_533_p2 <= grp_fu_533_p20(7 - 1 downto 0);
    grp_fu_533_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_fu_366_p2),11));
    grp_fu_542_p2 <= (empty_202_fu_460_p3 & ap_const_lv8_0);
    icmp_ln147_fu_213_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten99_load = ap_const_lv13_1900) else "0";
    icmp_ln150_1_fu_307_p2 <= "1" when (select_ln150_fu_283_p3 = ap_const_lv5_F) else "0";
    icmp_ln150_fu_231_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten79_load = ap_const_lv8_50) else "0";
    icmp_ln152_1_fu_301_p2 <= "1" when (add_ln152_fu_295_p2 = ap_const_lv3_5) else "0";
    icmp_ln152_fu_251_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv3_5) else "0";
    j_mid2_fu_275_p3 <= 
        ap_const_lv3_0 when (empty_fu_269_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    p_cast113_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_201_fu_395_p2),11));
    p_shl_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_384_p3),8));
    s_fu_478_p1 <= grp_fu_542_p3;
    s_fu_478_p4 <= s_fu_478_p1(23 downto 8);
    select_ln147_1_fu_356_p3 <= 
        add_ln147_1_fu_350_p2 when (icmp_ln150_reg_613_pp0_iter1_reg(0) = '1') else 
        y_fu_108;
    select_ln147_2_fu_453_p3 <= 
        ap_const_lv16_0 when (icmp_ln150_reg_613_pp0_iter5_reg(0) = '1') else 
        ap_sig_allocacmp_s_1_load;
    select_ln147_fu_237_p3 <= 
        ap_const_lv5_0 when (icmp_ln150_fu_231_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    select_ln150_1_fu_319_p3 <= 
        ap_const_lv8_1 when (icmp_ln150_fu_231_p2(0) = '1') else 
        add_ln150_1_fu_313_p2;
    select_ln150_fu_283_p3 <= 
        add_ln150_fu_263_p2 when (and_ln147_fu_257_p2(0) = '1') else 
        select_ln147_fu_237_p3;
    select_ln155_fu_519_p3 <= 
        ap_const_lv16_0 when (tmp_9_fu_496_p3(0) = '1') else 
        add_ln155_2_fu_514_p2;
        sext_ln155_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_fu_478_p4),17));

    tmp_9_fu_496_p3 <= add_ln155_fu_491_p2(16 downto 16);
    tmp_fu_384_p3 <= (select_ln150_reg_630_pp0_iter2_reg & ap_const_lv2_0);
    xor_ln147_fu_245_p2 <= (icmp_ln150_fu_231_p2 xor ap_const_lv1_1);
    zext_ln147_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln147_1_reg_649_pp0_iter6_reg),11));
    zext_ln150_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln150_reg_630_pp0_iter2_reg),8));
    zext_ln152_1_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_624_pp0_iter2_reg),11));
    zext_ln152_2_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_624_pp0_iter1_reg),7));
    zext_ln153_1_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_533_p3),64));
    zext_ln153_2_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_2_fu_412_p2),12));
    zext_ln153_3_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_5_fu_421_p2),12));
    zext_ln153_4_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln153_3_fu_431_p2),64));
    zext_ln155_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln155_1_fu_504_p2),64));
end behav;
