-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_a_Dense_0 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln9 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_1 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_2 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_3 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_4 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_5 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_6 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_7 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_8 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_9 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_10 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_11 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_12 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_13 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_14 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_15 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_16 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_17 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_18 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_19 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_20 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_21 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_22 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_23 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_24 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_25 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_26 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_27 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_28 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_29 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_30 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln9_31 : IN STD_LOGIC_VECTOR (11 downto 0);
    OutDense0_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    OutDense0_ce0 : OUT STD_LOGIC;
    OutDense0_we0 : OUT STD_LOGIC;
    OutDense0_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_a_Dense_0 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv14_2850 : STD_LOGIC_VECTOR (13 downto 0) := "10100001010000";
    constant ap_const_lv14_2864 : STD_LOGIC_VECTOR (13 downto 0) := "10100001100100";
    constant ap_const_lv14_283C : STD_LOGIC_VECTOR (13 downto 0) := "10100000111100";
    constant ap_const_lv14_2878 : STD_LOGIC_VECTOR (13 downto 0) := "10100001111000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv14_288C : STD_LOGIC_VECTOR (13 downto 0) := "10100010001100";
    constant ap_const_lv9_145 : STD_LOGIC_VECTOR (8 downto 0) := "101000101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_28B4 : STD_LOGIC_VECTOR (13 downto 0) := "10100010110100";
    constant ap_const_lv14_28C8 : STD_LOGIC_VECTOR (13 downto 0) := "10100011001000";
    constant ap_const_lv14_28DC : STD_LOGIC_VECTOR (13 downto 0) := "10100011011100";
    constant ap_const_lv14_28F0 : STD_LOGIC_VECTOR (13 downto 0) := "10100011110000";
    constant ap_const_lv14_2904 : STD_LOGIC_VECTOR (13 downto 0) := "10100100000100";
    constant ap_const_lv14_2918 : STD_LOGIC_VECTOR (13 downto 0) := "10100100011000";
    constant ap_const_lv14_292C : STD_LOGIC_VECTOR (13 downto 0) := "10100100101100";
    constant ap_const_lv8_A5 : STD_LOGIC_VECTOR (7 downto 0) := "10100101";
    constant ap_const_lv14_2954 : STD_LOGIC_VECTOR (13 downto 0) := "10100101010100";
    constant ap_const_lv14_2968 : STD_LOGIC_VECTOR (13 downto 0) := "10100101101000";
    constant ap_const_lv14_297C : STD_LOGIC_VECTOR (13 downto 0) := "10100101111100";
    constant ap_const_lv14_2990 : STD_LOGIC_VECTOR (13 downto 0) := "10100110010000";
    constant ap_const_lv14_29A4 : STD_LOGIC_VECTOR (13 downto 0) := "10100110100100";
    constant ap_const_lv14_29B8 : STD_LOGIC_VECTOR (13 downto 0) := "10100110111000";
    constant ap_const_lv14_29CC : STD_LOGIC_VECTOR (13 downto 0) := "10100111001100";
    constant ap_const_lv9_14F : STD_LOGIC_VECTOR (8 downto 0) := "101001111";
    constant ap_const_lv14_29F4 : STD_LOGIC_VECTOR (13 downto 0) := "10100111110100";
    constant ap_const_lv14_2A08 : STD_LOGIC_VECTOR (13 downto 0) := "10101000001000";
    constant ap_const_lv14_2A1C : STD_LOGIC_VECTOR (13 downto 0) := "10101000011100";
    constant ap_const_lv14_2A30 : STD_LOGIC_VECTOR (13 downto 0) := "10101000110000";
    constant ap_const_lv14_2A44 : STD_LOGIC_VECTOR (13 downto 0) := "10101001000100";
    constant ap_const_lv14_2A58 : STD_LOGIC_VECTOR (13 downto 0) := "10101001011000";
    constant ap_const_lv14_2A6C : STD_LOGIC_VECTOR (13 downto 0) := "10101001101100";
    constant ap_const_lv7_55 : STD_LOGIC_VECTOR (6 downto 0) := "1010101";
    constant ap_const_lv14_2A94 : STD_LOGIC_VECTOR (13 downto 0) := "10101010010100";
    constant ap_const_lv14_2AA8 : STD_LOGIC_VECTOR (13 downto 0) := "10101010101000";
    constant ap_const_lv14_2ABC : STD_LOGIC_VECTOR (13 downto 0) := "10101010111100";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln5_reg_2326 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage16 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_670 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal reg_675 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal reg_680 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal reg_685 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal reg_690 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal reg_695 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal sext_ln9_31_cast_fu_700_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_31_cast_reg_2157 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln9_30_cast_fu_704_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_30_cast_reg_2162 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_29_cast_fu_708_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_29_cast_reg_2167 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_28_cast_fu_712_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_28_cast_reg_2172 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_27_cast_fu_716_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_27_cast_reg_2177 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_26_cast_fu_720_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_26_cast_reg_2182 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_25_cast_fu_724_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_25_cast_reg_2187 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_24_cast_fu_728_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_24_cast_reg_2192 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_23_cast_fu_732_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_23_cast_reg_2197 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_22_cast_fu_736_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_22_cast_reg_2202 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_21_cast_fu_740_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_21_cast_reg_2207 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_20_cast_fu_744_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_20_cast_reg_2212 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_19_cast_fu_748_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_19_cast_reg_2217 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_18_cast_fu_752_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_18_cast_reg_2222 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_17_cast_fu_756_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_17_cast_reg_2227 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_16_cast_fu_760_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_16_cast_reg_2232 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_15_cast_fu_764_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_15_cast_reg_2237 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_14_cast_fu_768_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_14_cast_reg_2242 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_13_cast_fu_772_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_13_cast_reg_2247 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_12_cast_fu_776_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_12_cast_reg_2252 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_11_cast_fu_780_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_11_cast_reg_2257 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_10_cast_fu_784_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_10_cast_reg_2262 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_9_cast_fu_788_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_9_cast_reg_2267 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_8_cast_fu_792_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_8_cast_reg_2272 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_7_cast_fu_796_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_7_cast_reg_2277 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_6_cast_fu_800_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_6_cast_reg_2282 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_5_cast_fu_804_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_5_cast_reg_2287 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_4_cast_fu_808_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_4_cast_reg_2292 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_3_cast_fu_812_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_3_cast_reg_2297 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_2_cast_fu_816_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_2_cast_reg_2302 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_1_cast_fu_820_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_1_cast_reg_2307 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_cast_fu_824_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln9_cast_reg_2312 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_2_reg_2317 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_2317_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln5_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln5_1_fu_848_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln5_1_reg_2330 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln5_1_reg_2330_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_2386 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_35_reg_2516 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_37_reg_2541 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_39_reg_2566 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_41_reg_2591 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal Weights_load_42_reg_2616 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_43_reg_2621 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_45_reg_2646 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal Weights_load_46_reg_2671 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_47_reg_2676 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal Weights_load_48_reg_2701 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_49_reg_2706 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal Weights_load_50_reg_2731 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_51_reg_2736 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln9_1_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln9_2_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln9_3_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_4_fu_931_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln9_5_fu_943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_6_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln9_7_fu_974_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_8_fu_1005_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln9_9_fu_1015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_10_fu_1046_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln9_11_fu_1056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_12_fu_1087_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln9_14_fu_1103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_15_fu_1134_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln9_16_fu_1144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_17_fu_1175_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln9_18_fu_1185_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_19_fu_1216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln9_20_fu_1226_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_21_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln9_22_fu_1269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_23_fu_1300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal zext_ln9_24_fu_1310_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_25_fu_1341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal zext_ln9_26_fu_1351_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_27_fu_1382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal zext_ln9_28_fu_1392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_29_fu_1423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal zext_ln9_31_fu_1439_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln9_32_fu_1469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal zext_ln9_33_fu_1479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_fu_1847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal zext_ln5_fu_1852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_188 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln5_fu_842_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal Weights_ce1_local : STD_LOGIC;
    signal Weights_address1_local : STD_LOGIC_VECTOR (13 downto 0);
    signal Weights_ce0_local : STD_LOGIC;
    signal Weights_address0_local : STD_LOGIC_VECTOR (13 downto 0);
    signal OutDense0_we0_local : STD_LOGIC;
    signal select_ln11_fu_1893_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutDense0_ce0_local : STD_LOGIC;
    signal add_ln9_fu_852_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_2_fu_863_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal thr_add_fu_879_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_4_fu_893_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln9_fu_907_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln9_fu_907_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln9_6_fu_926_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln9_5_cast_fu_936_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_9_fu_959_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_11_fu_969_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_31_fu_979_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1902_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_31_fu_979_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_13_fu_1000_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_15_fu_1010_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_32_fu_1020_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1910_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_32_fu_1020_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_17_fu_1041_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_19_fu_1051_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_33_fu_1061_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1918_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_33_fu_1061_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_21_fu_1082_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln9_13_fu_1092_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln9_14_cast_fu_1095_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_34_fu_1108_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1926_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_34_fu_1108_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_24_fu_1129_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_26_fu_1139_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_35_fu_1149_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1934_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_35_fu_1149_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_28_fu_1170_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_30_fu_1180_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_36_fu_1190_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1942_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_36_fu_1190_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_32_fu_1211_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_34_fu_1221_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_37_fu_1231_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1950_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_37_fu_1231_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_36_fu_1252_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln9_22_cast_fu_1262_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_38_fu_1274_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1958_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_38_fu_1274_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_39_fu_1295_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_41_fu_1305_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_39_fu_1315_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1966_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_39_fu_1315_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_43_fu_1336_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_45_fu_1346_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_40_fu_1356_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1974_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_40_fu_1356_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_47_fu_1377_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_49_fu_1387_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_41_fu_1397_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1982_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_41_fu_1397_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_51_fu_1418_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln9_30_fu_1428_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln9_31_cast_fu_1431_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_42_fu_1444_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1990_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_42_fu_1444_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln9_54_fu_1464_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln9_56_fu_1474_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_43_fu_1484_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1998_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_43_fu_1484_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_44_fu_1505_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2006_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_44_fu_1505_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_45_fu_1525_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2014_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_45_fu_1525_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_46_fu_1546_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2022_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_46_fu_1546_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_47_fu_1566_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2030_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_47_fu_1566_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_48_fu_1587_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2038_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_48_fu_1587_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_49_fu_1607_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2046_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_49_fu_1607_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_50_fu_1627_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2054_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_50_fu_1627_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_51_fu_1647_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2062_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_51_fu_1647_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_52_fu_1668_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2070_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_52_fu_1668_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_53_fu_1688_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2078_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_53_fu_1688_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_54_fu_1708_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2086_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_54_fu_1708_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_55_fu_1728_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2094_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_55_fu_1728_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_56_fu_1748_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2102_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_56_fu_1748_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_57_fu_1768_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2110_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_57_fu_1768_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_58_fu_1788_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2118_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_58_fu_1788_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_59_fu_1808_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2126_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_59_fu_1808_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_fu_1825_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2134_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_60_fu_1825_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln11_fu_1842_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln9_fu_1856_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2142_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln9_fu_1856_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln11_1_fu_1869_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln11_2_fu_1873_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln11_fu_1865_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln11_1_fu_1869_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln11_1_fu_1879_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_1885_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln11_2_fu_1873_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1902_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1902_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1910_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1910_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1918_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1918_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1926_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1926_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1934_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1934_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1942_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1942_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1950_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1950_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1958_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1958_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1966_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1966_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1974_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1974_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1982_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1982_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1990_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1990_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1998_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1998_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2006_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2006_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2014_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2014_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2022_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2022_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2030_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2030_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2038_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2038_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2046_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2046_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2054_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2054_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2062_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2062_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2070_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2070_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2078_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2078_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2086_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2086_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2094_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2094_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2102_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2102_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2110_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2110_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2118_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2118_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2126_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2126_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2134_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2134_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2142_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2142_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mul_16s_12s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_mac_muladd_16s_12s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_12s_24_1_1_U415 : component CNN_mul_16s_12s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 24)
    port map (
        din0 => Weights_q1,
        din1 => mul_ln9_fu_907_p1,
        dout => mul_ln9_fu_907_p2);

    mac_muladd_16s_12s_24ns_24_4_1_U416 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_q1,
        din1 => grp_fu_1902_p1,
        din2 => grp_fu_1902_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1902_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U417 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_670,
        din1 => grp_fu_1910_p1,
        din2 => grp_fu_1910_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1910_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U418 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_670,
        din1 => grp_fu_1918_p1,
        din2 => grp_fu_1918_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1918_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U419 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_670,
        din1 => grp_fu_1926_p1,
        din2 => grp_fu_1926_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1926_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U420 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_675,
        din1 => grp_fu_1934_p1,
        din2 => grp_fu_1934_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1934_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U421 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_670,
        din1 => grp_fu_1942_p1,
        din2 => grp_fu_1942_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1942_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U422 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_680,
        din1 => grp_fu_1950_p1,
        din2 => grp_fu_1950_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1950_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U423 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_675,
        din1 => grp_fu_1958_p1,
        din2 => grp_fu_1958_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1958_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U424 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_685,
        din1 => grp_fu_1966_p1,
        din2 => grp_fu_1966_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1966_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U425 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_670,
        din1 => grp_fu_1974_p1,
        din2 => grp_fu_1974_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1974_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U426 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_690,
        din1 => grp_fu_1982_p1,
        din2 => grp_fu_1982_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1982_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U427 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_680,
        din1 => grp_fu_1990_p1,
        din2 => grp_fu_1990_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1990_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U428 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_695,
        din1 => grp_fu_1998_p1,
        din2 => grp_fu_1998_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1998_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U429 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_675,
        din1 => grp_fu_2006_p1,
        din2 => grp_fu_2006_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2006_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U430 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_35_reg_2516,
        din1 => grp_fu_2014_p1,
        din2 => grp_fu_2014_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2014_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U431 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_685,
        din1 => grp_fu_2022_p1,
        din2 => grp_fu_2022_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2022_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U432 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_37_reg_2541,
        din1 => grp_fu_2030_p1,
        din2 => grp_fu_2030_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2030_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U433 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_670,
        din1 => grp_fu_2038_p1,
        din2 => grp_fu_2038_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2038_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U434 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_39_reg_2566,
        din1 => grp_fu_2046_p1,
        din2 => grp_fu_2046_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2046_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U435 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_690,
        din1 => grp_fu_2054_p1,
        din2 => grp_fu_2054_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2054_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U436 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_41_reg_2591,
        din1 => grp_fu_2062_p1,
        din2 => grp_fu_2062_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2062_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U437 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_42_reg_2616,
        din1 => grp_fu_2070_p1,
        din2 => grp_fu_2070_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2070_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U438 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_43_reg_2621,
        din1 => grp_fu_2078_p1,
        din2 => grp_fu_2078_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2078_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U439 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_695,
        din1 => grp_fu_2086_p1,
        din2 => grp_fu_2086_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2086_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U440 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_45_reg_2646,
        din1 => grp_fu_2094_p1,
        din2 => grp_fu_2094_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2094_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U441 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_46_reg_2671,
        din1 => grp_fu_2102_p1,
        din2 => grp_fu_2102_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2102_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U442 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_47_reg_2676,
        din1 => grp_fu_2110_p1,
        din2 => grp_fu_2110_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2110_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U443 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_48_reg_2701,
        din1 => grp_fu_2118_p1,
        din2 => grp_fu_2118_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2118_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U444 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_49_reg_2706,
        din1 => grp_fu_2126_p1,
        din2 => grp_fu_2126_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2126_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U445 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_50_reg_2731,
        din1 => grp_fu_2134_p1,
        din2 => grp_fu_2134_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2134_p3);

    mac_muladd_16s_12s_24ns_24_4_1_U446 : component CNN_mac_muladd_16s_12s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_51_reg_2736,
        din1 => grp_fu_2142_p1,
        din2 => grp_fu_2142_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2142_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage16,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage16)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln5_fu_836_p2 = ap_const_lv1_0))) then 
                    i_fu_188 <= add_ln5_fu_842_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_188 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;

    reg_670_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_670 <= Weights_q1;
            elsif ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                reg_670 <= Weights_q0;
            end if; 
        end if;
    end process;

    reg_675_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                reg_675 <= Weights_q1;
            elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                reg_675 <= Weights_q0;
            end if; 
        end if;
    end process;

    reg_680_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    reg_680 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    reg_680 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_685_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    reg_685 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    reg_685 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_690_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    reg_690 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    reg_690 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_695_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
                    reg_695 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    reg_695 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                Weights_load_35_reg_2516 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                Weights_load_37_reg_2541 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                Weights_load_39_reg_2566 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                Weights_load_41_reg_2591 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                Weights_load_42_reg_2616 <= Weights_q1;
                Weights_load_43_reg_2621 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                Weights_load_45_reg_2646 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                Weights_load_46_reg_2671 <= Weights_q1;
                Weights_load_47_reg_2676 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                Weights_load_48_reg_2701 <= Weights_q1;
                Weights_load_49_reg_2706 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then
                Weights_load_50_reg_2731 <= Weights_q1;
                Weights_load_51_reg_2736 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_2_reg_2317 <= ap_sig_allocacmp_i_2;
                i_2_reg_2317_pp0_iter1_reg <= i_2_reg_2317;
                icmp_ln5_reg_2326 <= icmp_ln5_fu_836_p2;
                sext_ln9_10_cast_reg_2262 <= sext_ln9_10_cast_fu_784_p1;
                sext_ln9_11_cast_reg_2257 <= sext_ln9_11_cast_fu_780_p1;
                sext_ln9_12_cast_reg_2252 <= sext_ln9_12_cast_fu_776_p1;
                sext_ln9_13_cast_reg_2247 <= sext_ln9_13_cast_fu_772_p1;
                sext_ln9_14_cast_reg_2242 <= sext_ln9_14_cast_fu_768_p1;
                sext_ln9_15_cast_reg_2237 <= sext_ln9_15_cast_fu_764_p1;
                sext_ln9_16_cast_reg_2232 <= sext_ln9_16_cast_fu_760_p1;
                sext_ln9_17_cast_reg_2227 <= sext_ln9_17_cast_fu_756_p1;
                sext_ln9_18_cast_reg_2222 <= sext_ln9_18_cast_fu_752_p1;
                sext_ln9_19_cast_reg_2217 <= sext_ln9_19_cast_fu_748_p1;
                sext_ln9_1_cast_reg_2307 <= sext_ln9_1_cast_fu_820_p1;
                sext_ln9_20_cast_reg_2212 <= sext_ln9_20_cast_fu_744_p1;
                sext_ln9_21_cast_reg_2207 <= sext_ln9_21_cast_fu_740_p1;
                sext_ln9_22_cast_reg_2202 <= sext_ln9_22_cast_fu_736_p1;
                sext_ln9_23_cast_reg_2197 <= sext_ln9_23_cast_fu_732_p1;
                sext_ln9_24_cast_reg_2192 <= sext_ln9_24_cast_fu_728_p1;
                sext_ln9_25_cast_reg_2187 <= sext_ln9_25_cast_fu_724_p1;
                sext_ln9_26_cast_reg_2182 <= sext_ln9_26_cast_fu_720_p1;
                sext_ln9_27_cast_reg_2177 <= sext_ln9_27_cast_fu_716_p1;
                sext_ln9_28_cast_reg_2172 <= sext_ln9_28_cast_fu_712_p1;
                sext_ln9_29_cast_reg_2167 <= sext_ln9_29_cast_fu_708_p1;
                sext_ln9_2_cast_reg_2302 <= sext_ln9_2_cast_fu_816_p1;
                sext_ln9_30_cast_reg_2162 <= sext_ln9_30_cast_fu_704_p1;
                sext_ln9_31_cast_reg_2157 <= sext_ln9_31_cast_fu_700_p1;
                sext_ln9_3_cast_reg_2297 <= sext_ln9_3_cast_fu_812_p1;
                sext_ln9_4_cast_reg_2292 <= sext_ln9_4_cast_fu_808_p1;
                sext_ln9_5_cast_reg_2287 <= sext_ln9_5_cast_fu_804_p1;
                sext_ln9_6_cast_reg_2282 <= sext_ln9_6_cast_fu_800_p1;
                sext_ln9_7_cast_reg_2277 <= sext_ln9_7_cast_fu_796_p1;
                sext_ln9_8_cast_reg_2272 <= sext_ln9_8_cast_fu_792_p1;
                sext_ln9_9_cast_reg_2267 <= sext_ln9_9_cast_fu_788_p1;
                sext_ln9_cast_reg_2312 <= sext_ln9_cast_fu_824_p1;
                    zext_ln5_1_reg_2330(4 downto 0) <= zext_ln5_1_fu_848_p1(4 downto 0);
                    zext_ln5_1_reg_2330_pp0_iter1_reg(4 downto 0) <= zext_ln5_1_reg_2330(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_s_reg_2386 <= mul_ln9_fu_907_p2(23 downto 8);
            end if;
        end if;
    end process;
    zext_ln5_1_reg_2330(13 downto 5) <= "000000000";
    zext_ln5_1_reg_2330_pp0_iter1_reg(13 downto 5) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage16_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    OutDense0_address0 <= zext_ln5_fu_1852_p1(5 - 1 downto 0);
    OutDense0_ce0 <= OutDense0_ce0_local;

    OutDense0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutDense0_ce0_local <= ap_const_logic_1;
        else 
            OutDense0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutDense0_d0 <= select_ln11_fu_1893_p3;
    OutDense0_we0 <= OutDense0_we0_local;

    OutDense0_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutDense0_we0_local <= ap_const_logic_1;
        else 
            OutDense0_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    Weights_address0 <= Weights_address0_local;

    Weights_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage16, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage0, zext_ln9_2_fu_869_p1, ap_block_pp0_stage1, zext_ln9_3_fu_898_p1, ap_block_pp0_stage2, zext_ln9_5_fu_943_p1, ap_block_pp0_stage3, zext_ln9_7_fu_974_p1, ap_block_pp0_stage4, zext_ln9_9_fu_1015_p1, ap_block_pp0_stage5, zext_ln9_11_fu_1056_p1, ap_block_pp0_stage6, zext_ln9_14_fu_1103_p1, ap_block_pp0_stage7, zext_ln9_16_fu_1144_p1, ap_block_pp0_stage8, zext_ln9_18_fu_1185_p1, ap_block_pp0_stage9, zext_ln9_20_fu_1226_p1, ap_block_pp0_stage10, zext_ln9_22_fu_1269_p1, ap_block_pp0_stage11, zext_ln9_24_fu_1310_p1, ap_block_pp0_stage12, zext_ln9_26_fu_1351_p1, ap_block_pp0_stage13, zext_ln9_28_fu_1392_p1, ap_block_pp0_stage14, zext_ln9_31_fu_1439_p1, ap_block_pp0_stage15, zext_ln9_33_fu_1479_p1, zext_ln11_fu_1847_p1, ap_block_pp0_stage16)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            Weights_address0_local <= zext_ln11_fu_1847_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            Weights_address0_local <= zext_ln9_33_fu_1479_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            Weights_address0_local <= zext_ln9_31_fu_1439_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            Weights_address0_local <= zext_ln9_28_fu_1392_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            Weights_address0_local <= zext_ln9_26_fu_1351_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            Weights_address0_local <= zext_ln9_24_fu_1310_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            Weights_address0_local <= zext_ln9_22_fu_1269_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            Weights_address0_local <= zext_ln9_20_fu_1226_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            Weights_address0_local <= zext_ln9_18_fu_1185_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            Weights_address0_local <= zext_ln9_16_fu_1144_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            Weights_address0_local <= zext_ln9_14_fu_1103_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            Weights_address0_local <= zext_ln9_11_fu_1056_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            Weights_address0_local <= zext_ln9_9_fu_1015_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            Weights_address0_local <= zext_ln9_7_fu_974_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Weights_address0_local <= zext_ln9_5_fu_943_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_address0_local <= zext_ln9_3_fu_898_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Weights_address0_local <= zext_ln9_2_fu_869_p1(14 - 1 downto 0);
        else 
            Weights_address0_local <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    Weights_address1 <= Weights_address1_local;

    Weights_address1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, zext_ln9_1_fu_858_p1, ap_block_pp0_stage0, zext_ln9_fu_884_p1, ap_block_pp0_stage1, zext_ln9_4_fu_931_p1, ap_block_pp0_stage2, zext_ln9_6_fu_964_p1, ap_block_pp0_stage3, zext_ln9_8_fu_1005_p1, ap_block_pp0_stage4, zext_ln9_10_fu_1046_p1, ap_block_pp0_stage5, zext_ln9_12_fu_1087_p1, ap_block_pp0_stage6, zext_ln9_15_fu_1134_p1, ap_block_pp0_stage7, zext_ln9_17_fu_1175_p1, ap_block_pp0_stage8, zext_ln9_19_fu_1216_p1, ap_block_pp0_stage9, zext_ln9_21_fu_1257_p1, ap_block_pp0_stage10, zext_ln9_23_fu_1300_p1, ap_block_pp0_stage11, zext_ln9_25_fu_1341_p1, ap_block_pp0_stage12, zext_ln9_27_fu_1382_p1, ap_block_pp0_stage13, zext_ln9_29_fu_1423_p1, ap_block_pp0_stage14, zext_ln9_32_fu_1469_p1, ap_block_pp0_stage15)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            Weights_address1_local <= zext_ln9_32_fu_1469_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            Weights_address1_local <= zext_ln9_29_fu_1423_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            Weights_address1_local <= zext_ln9_27_fu_1382_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            Weights_address1_local <= zext_ln9_25_fu_1341_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            Weights_address1_local <= zext_ln9_23_fu_1300_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            Weights_address1_local <= zext_ln9_21_fu_1257_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            Weights_address1_local <= zext_ln9_19_fu_1216_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            Weights_address1_local <= zext_ln9_17_fu_1175_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            Weights_address1_local <= zext_ln9_15_fu_1134_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            Weights_address1_local <= zext_ln9_12_fu_1087_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            Weights_address1_local <= zext_ln9_10_fu_1046_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            Weights_address1_local <= zext_ln9_8_fu_1005_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            Weights_address1_local <= zext_ln9_6_fu_964_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Weights_address1_local <= zext_ln9_4_fu_931_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_address1_local <= zext_ln9_fu_884_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Weights_address1_local <= zext_ln9_1_fu_858_p1(14 - 1 downto 0);
        else 
            Weights_address1_local <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    Weights_ce0 <= Weights_ce0_local;

    Weights_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage16, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_block_pp0_stage16_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 
    = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            Weights_ce0_local <= ap_const_logic_1;
        else 
            Weights_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Weights_ce1 <= Weights_ce1_local;

    Weights_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 
    = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            Weights_ce1_local <= ap_const_logic_1;
        else 
            Weights_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln11_1_fu_1879_p2 <= std_logic_vector(signed(sext_ln11_fu_1865_p1) + signed(sext_ln11_1_fu_1869_p1));
    add_ln11_2_fu_1873_p1 <= Weights_q0;
    add_ln11_2_fu_1873_p2 <= std_logic_vector(signed(trunc_ln9_fu_1856_p4) + signed(add_ln11_2_fu_1873_p1));
    add_ln11_fu_1842_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330_pp0_iter1_reg) + unsigned(ap_const_lv14_2ABC));
    add_ln5_fu_842_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv5_1));
    add_ln9_11_fu_969_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_28C8));
    add_ln9_13_fu_1000_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_28DC));
    add_ln9_15_fu_1010_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_28F0));
    add_ln9_17_fu_1041_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2904));
    add_ln9_19_fu_1051_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2918));
    add_ln9_21_fu_1082_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_292C));
    add_ln9_24_fu_1129_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2954));
    add_ln9_26_fu_1139_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2968));
    add_ln9_28_fu_1170_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_297C));
    add_ln9_2_fu_863_p2 <= std_logic_vector(unsigned(zext_ln5_1_fu_848_p1) + unsigned(ap_const_lv14_2864));
    add_ln9_30_fu_1180_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2990));
    add_ln9_32_fu_1211_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_29A4));
    add_ln9_34_fu_1221_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_29B8));
    add_ln9_36_fu_1252_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_29CC));
    add_ln9_39_fu_1295_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_29F4));
    add_ln9_41_fu_1305_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2A08));
    add_ln9_43_fu_1336_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2A1C));
    add_ln9_45_fu_1346_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2A30));
    add_ln9_47_fu_1377_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2A44));
    add_ln9_49_fu_1387_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2A58));
    add_ln9_4_fu_893_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2878));
    add_ln9_51_fu_1418_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2A6C));
    add_ln9_54_fu_1464_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2A94));
    add_ln9_56_fu_1474_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_2AA8));
    add_ln9_6_fu_926_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_288C));
    add_ln9_9_fu_959_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_28B4));
    add_ln9_fu_852_p2 <= std_logic_vector(unsigned(zext_ln5_1_fu_848_p1) + unsigned(ap_const_lv14_2850));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage16_assign_proc : process(ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln5_reg_2326)
    begin
        if (((icmp_ln5_reg_2326 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            ap_condition_exit_pp0_iter0_stage16 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln5_reg_2326, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln5_reg_2326 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage16;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage16_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_188, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_188;
        end if; 
    end process;

    grp_fu_1902_p1 <= sext_ln9_1_cast_reg_2307(12 - 1 downto 0);
    grp_fu_1902_p2 <= (tmp_s_reg_2386 & ap_const_lv8_0);
    grp_fu_1910_p1 <= sext_ln9_2_cast_reg_2302(12 - 1 downto 0);
    grp_fu_1910_p2 <= (tmp_31_fu_979_p4 & ap_const_lv8_0);
    grp_fu_1918_p1 <= sext_ln9_3_cast_reg_2297(12 - 1 downto 0);
    grp_fu_1918_p2 <= (tmp_32_fu_1020_p4 & ap_const_lv8_0);
    grp_fu_1926_p1 <= sext_ln9_4_cast_reg_2292(12 - 1 downto 0);
    grp_fu_1926_p2 <= (tmp_33_fu_1061_p4 & ap_const_lv8_0);
    grp_fu_1934_p1 <= sext_ln9_5_cast_reg_2287(12 - 1 downto 0);
    grp_fu_1934_p2 <= (tmp_34_fu_1108_p4 & ap_const_lv8_0);
    grp_fu_1942_p1 <= sext_ln9_6_cast_reg_2282(12 - 1 downto 0);
    grp_fu_1942_p2 <= (tmp_35_fu_1149_p4 & ap_const_lv8_0);
    grp_fu_1950_p1 <= sext_ln9_7_cast_reg_2277(12 - 1 downto 0);
    grp_fu_1950_p2 <= (tmp_36_fu_1190_p4 & ap_const_lv8_0);
    grp_fu_1958_p1 <= sext_ln9_8_cast_reg_2272(12 - 1 downto 0);
    grp_fu_1958_p2 <= (tmp_37_fu_1231_p4 & ap_const_lv8_0);
    grp_fu_1966_p1 <= sext_ln9_9_cast_reg_2267(12 - 1 downto 0);
    grp_fu_1966_p2 <= (tmp_38_fu_1274_p4 & ap_const_lv8_0);
    grp_fu_1974_p1 <= sext_ln9_10_cast_reg_2262(12 - 1 downto 0);
    grp_fu_1974_p2 <= (tmp_39_fu_1315_p4 & ap_const_lv8_0);
    grp_fu_1982_p1 <= sext_ln9_11_cast_reg_2257(12 - 1 downto 0);
    grp_fu_1982_p2 <= (tmp_40_fu_1356_p4 & ap_const_lv8_0);
    grp_fu_1990_p1 <= sext_ln9_12_cast_reg_2252(12 - 1 downto 0);
    grp_fu_1990_p2 <= (tmp_41_fu_1397_p4 & ap_const_lv8_0);
    grp_fu_1998_p1 <= sext_ln9_13_cast_reg_2247(12 - 1 downto 0);
    grp_fu_1998_p2 <= (tmp_42_fu_1444_p4 & ap_const_lv8_0);
    grp_fu_2006_p1 <= sext_ln9_14_cast_reg_2242(12 - 1 downto 0);
    grp_fu_2006_p2 <= (tmp_43_fu_1484_p4 & ap_const_lv8_0);
    grp_fu_2014_p1 <= sext_ln9_15_cast_reg_2237(12 - 1 downto 0);
    grp_fu_2014_p2 <= (tmp_44_fu_1505_p4 & ap_const_lv8_0);
    grp_fu_2022_p1 <= sext_ln9_16_cast_reg_2232(12 - 1 downto 0);
    grp_fu_2022_p2 <= (tmp_45_fu_1525_p4 & ap_const_lv8_0);
    grp_fu_2030_p1 <= sext_ln9_17_cast_reg_2227(12 - 1 downto 0);
    grp_fu_2030_p2 <= (tmp_46_fu_1546_p4 & ap_const_lv8_0);
    grp_fu_2038_p1 <= sext_ln9_18_cast_reg_2222(12 - 1 downto 0);
    grp_fu_2038_p2 <= (tmp_47_fu_1566_p4 & ap_const_lv8_0);
    grp_fu_2046_p1 <= sext_ln9_19_cast_reg_2217(12 - 1 downto 0);
    grp_fu_2046_p2 <= (tmp_48_fu_1587_p4 & ap_const_lv8_0);
    grp_fu_2054_p1 <= sext_ln9_20_cast_reg_2212(12 - 1 downto 0);
    grp_fu_2054_p2 <= (tmp_49_fu_1607_p4 & ap_const_lv8_0);
    grp_fu_2062_p1 <= sext_ln9_21_cast_reg_2207(12 - 1 downto 0);
    grp_fu_2062_p2 <= (tmp_50_fu_1627_p4 & ap_const_lv8_0);
    grp_fu_2070_p1 <= sext_ln9_22_cast_reg_2202(12 - 1 downto 0);
    grp_fu_2070_p2 <= (tmp_51_fu_1647_p4 & ap_const_lv8_0);
    grp_fu_2078_p1 <= sext_ln9_23_cast_reg_2197(12 - 1 downto 0);
    grp_fu_2078_p2 <= (tmp_52_fu_1668_p4 & ap_const_lv8_0);
    grp_fu_2086_p1 <= sext_ln9_24_cast_reg_2192(12 - 1 downto 0);
    grp_fu_2086_p2 <= (tmp_53_fu_1688_p4 & ap_const_lv8_0);
    grp_fu_2094_p1 <= sext_ln9_25_cast_reg_2187(12 - 1 downto 0);
    grp_fu_2094_p2 <= (tmp_54_fu_1708_p4 & ap_const_lv8_0);
    grp_fu_2102_p1 <= sext_ln9_26_cast_reg_2182(12 - 1 downto 0);
    grp_fu_2102_p2 <= (tmp_55_fu_1728_p4 & ap_const_lv8_0);
    grp_fu_2110_p1 <= sext_ln9_27_cast_reg_2177(12 - 1 downto 0);
    grp_fu_2110_p2 <= (tmp_56_fu_1748_p4 & ap_const_lv8_0);
    grp_fu_2118_p1 <= sext_ln9_28_cast_reg_2172(12 - 1 downto 0);
    grp_fu_2118_p2 <= (tmp_57_fu_1768_p4 & ap_const_lv8_0);
    grp_fu_2126_p1 <= sext_ln9_29_cast_reg_2167(12 - 1 downto 0);
    grp_fu_2126_p2 <= (tmp_58_fu_1788_p4 & ap_const_lv8_0);
    grp_fu_2134_p1 <= sext_ln9_30_cast_reg_2162(12 - 1 downto 0);
    grp_fu_2134_p2 <= (tmp_59_fu_1808_p4 & ap_const_lv8_0);
    grp_fu_2142_p1 <= sext_ln9_31_cast_reg_2157(12 - 1 downto 0);
    grp_fu_2142_p2 <= (tmp_60_fu_1825_p4 & ap_const_lv8_0);
    icmp_ln5_fu_836_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv5_14) else "0";
    mul_ln9_fu_907_p1 <= sext_ln9_cast_reg_2312(12 - 1 downto 0);
    select_ln11_fu_1893_p3 <= 
        ap_const_lv16_0 when (tmp_fu_1885_p3(0) = '1') else 
        add_ln11_2_fu_1873_p2;
    sext_ln11_1_fu_1869_p0 <= Weights_q0;
        sext_ln11_1_fu_1869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln11_1_fu_1869_p0),17));

        sext_ln11_fu_1865_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln9_fu_1856_p4),17));

        sext_ln9_10_cast_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_10),24));

        sext_ln9_11_cast_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_11),24));

        sext_ln9_12_cast_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_12),24));

        sext_ln9_13_cast_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_13),24));

        sext_ln9_14_cast_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_14),24));

        sext_ln9_15_cast_fu_764_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_15),24));

        sext_ln9_16_cast_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_16),24));

        sext_ln9_17_cast_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_17),24));

        sext_ln9_18_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_18),24));

        sext_ln9_19_cast_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_19),24));

        sext_ln9_1_cast_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_1),24));

        sext_ln9_20_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_20),24));

        sext_ln9_21_cast_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_21),24));

        sext_ln9_22_cast_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_22),24));

        sext_ln9_23_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_23),24));

        sext_ln9_24_cast_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_24),24));

        sext_ln9_25_cast_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_25),24));

        sext_ln9_26_cast_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_26),24));

        sext_ln9_27_cast_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_27),24));

        sext_ln9_28_cast_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_28),24));

        sext_ln9_29_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_29),24));

        sext_ln9_2_cast_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_2),24));

        sext_ln9_30_cast_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_30),24));

        sext_ln9_31_cast_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_31),24));

        sext_ln9_3_cast_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_3),24));

        sext_ln9_4_cast_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_4),24));

        sext_ln9_5_cast_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_5),24));

        sext_ln9_6_cast_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_6),24));

        sext_ln9_7_cast_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_7),24));

        sext_ln9_8_cast_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_8),24));

        sext_ln9_9_cast_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9_9),24));

        sext_ln9_cast_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln9),24));

    thr_add_fu_879_p2 <= std_logic_vector(unsigned(zext_ln5_1_reg_2330) + unsigned(ap_const_lv14_283C));
    tmp_31_fu_979_p1 <= grp_fu_1902_p3;
    tmp_31_fu_979_p4 <= tmp_31_fu_979_p1(23 downto 8);
    tmp_32_fu_1020_p1 <= grp_fu_1910_p3;
    tmp_32_fu_1020_p4 <= tmp_32_fu_1020_p1(23 downto 8);
    tmp_33_fu_1061_p1 <= grp_fu_1918_p3;
    tmp_33_fu_1061_p4 <= tmp_33_fu_1061_p1(23 downto 8);
    tmp_34_fu_1108_p1 <= grp_fu_1926_p3;
    tmp_34_fu_1108_p4 <= tmp_34_fu_1108_p1(23 downto 8);
    tmp_35_fu_1149_p1 <= grp_fu_1934_p3;
    tmp_35_fu_1149_p4 <= tmp_35_fu_1149_p1(23 downto 8);
    tmp_36_fu_1190_p1 <= grp_fu_1942_p3;
    tmp_36_fu_1190_p4 <= tmp_36_fu_1190_p1(23 downto 8);
    tmp_37_fu_1231_p1 <= grp_fu_1950_p3;
    tmp_37_fu_1231_p4 <= tmp_37_fu_1231_p1(23 downto 8);
    tmp_38_fu_1274_p1 <= grp_fu_1958_p3;
    tmp_38_fu_1274_p4 <= tmp_38_fu_1274_p1(23 downto 8);
    tmp_39_fu_1315_p1 <= grp_fu_1966_p3;
    tmp_39_fu_1315_p4 <= tmp_39_fu_1315_p1(23 downto 8);
    tmp_40_fu_1356_p1 <= grp_fu_1974_p3;
    tmp_40_fu_1356_p4 <= tmp_40_fu_1356_p1(23 downto 8);
    tmp_41_fu_1397_p1 <= grp_fu_1982_p3;
    tmp_41_fu_1397_p4 <= tmp_41_fu_1397_p1(23 downto 8);
    tmp_42_fu_1444_p1 <= grp_fu_1990_p3;
    tmp_42_fu_1444_p4 <= tmp_42_fu_1444_p1(23 downto 8);
    tmp_43_fu_1484_p1 <= grp_fu_1998_p3;
    tmp_43_fu_1484_p4 <= tmp_43_fu_1484_p1(23 downto 8);
    tmp_44_fu_1505_p1 <= grp_fu_2006_p3;
    tmp_44_fu_1505_p4 <= tmp_44_fu_1505_p1(23 downto 8);
    tmp_45_fu_1525_p1 <= grp_fu_2014_p3;
    tmp_45_fu_1525_p4 <= tmp_45_fu_1525_p1(23 downto 8);
    tmp_46_fu_1546_p1 <= grp_fu_2022_p3;
    tmp_46_fu_1546_p4 <= tmp_46_fu_1546_p1(23 downto 8);
    tmp_47_fu_1566_p1 <= grp_fu_2030_p3;
    tmp_47_fu_1566_p4 <= tmp_47_fu_1566_p1(23 downto 8);
    tmp_48_fu_1587_p1 <= grp_fu_2038_p3;
    tmp_48_fu_1587_p4 <= tmp_48_fu_1587_p1(23 downto 8);
    tmp_49_fu_1607_p1 <= grp_fu_2046_p3;
    tmp_49_fu_1607_p4 <= tmp_49_fu_1607_p1(23 downto 8);
    tmp_50_fu_1627_p1 <= grp_fu_2054_p3;
    tmp_50_fu_1627_p4 <= tmp_50_fu_1627_p1(23 downto 8);
    tmp_51_fu_1647_p1 <= grp_fu_2062_p3;
    tmp_51_fu_1647_p4 <= tmp_51_fu_1647_p1(23 downto 8);
    tmp_52_fu_1668_p1 <= grp_fu_2070_p3;
    tmp_52_fu_1668_p4 <= tmp_52_fu_1668_p1(23 downto 8);
    tmp_53_fu_1688_p1 <= grp_fu_2078_p3;
    tmp_53_fu_1688_p4 <= tmp_53_fu_1688_p1(23 downto 8);
    tmp_54_fu_1708_p1 <= grp_fu_2086_p3;
    tmp_54_fu_1708_p4 <= tmp_54_fu_1708_p1(23 downto 8);
    tmp_55_fu_1728_p1 <= grp_fu_2094_p3;
    tmp_55_fu_1728_p4 <= tmp_55_fu_1728_p1(23 downto 8);
    tmp_56_fu_1748_p1 <= grp_fu_2102_p3;
    tmp_56_fu_1748_p4 <= tmp_56_fu_1748_p1(23 downto 8);
    tmp_57_fu_1768_p1 <= grp_fu_2110_p3;
    tmp_57_fu_1768_p4 <= tmp_57_fu_1768_p1(23 downto 8);
    tmp_58_fu_1788_p1 <= grp_fu_2118_p3;
    tmp_58_fu_1788_p4 <= tmp_58_fu_1788_p1(23 downto 8);
    tmp_59_fu_1808_p1 <= grp_fu_2126_p3;
    tmp_59_fu_1808_p4 <= tmp_59_fu_1808_p1(23 downto 8);
    tmp_60_fu_1825_p1 <= grp_fu_2134_p3;
    tmp_60_fu_1825_p4 <= tmp_60_fu_1825_p1(23 downto 8);
    tmp_fu_1885_p3 <= add_ln11_1_fu_1879_p2(16 downto 16);
    trunc_ln9_fu_1856_p1 <= grp_fu_2142_p3;
    trunc_ln9_fu_1856_p4 <= trunc_ln9_fu_1856_p1(23 downto 8);
    zext_ln11_fu_1847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_fu_1842_p2),64));
    zext_ln5_1_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),14));
    zext_ln5_fu_1852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_2317_pp0_iter1_reg),64));
    zext_ln9_10_fu_1046_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_17_fu_1041_p2),64));
    zext_ln9_11_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_19_fu_1051_p2),64));
    zext_ln9_12_fu_1087_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_21_fu_1082_p2),64));
    zext_ln9_13_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_2317),6));
    zext_ln9_14_cast_fu_1095_p3 <= (ap_const_lv8_A5 & zext_ln9_13_fu_1092_p1);
    zext_ln9_14_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln9_14_cast_fu_1095_p3),64));
    zext_ln9_15_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_24_fu_1129_p2),64));
    zext_ln9_16_fu_1144_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_26_fu_1139_p2),64));
    zext_ln9_17_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_28_fu_1170_p2),64));
    zext_ln9_18_fu_1185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_30_fu_1180_p2),64));
    zext_ln9_19_fu_1216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_32_fu_1211_p2),64));
    zext_ln9_1_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_fu_852_p2),64));
    zext_ln9_20_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_34_fu_1221_p2),64));
    zext_ln9_21_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_36_fu_1252_p2),64));
    zext_ln9_22_cast_fu_1262_p3 <= (ap_const_lv9_14F & i_2_reg_2317);
    zext_ln9_22_fu_1269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln9_22_cast_fu_1262_p3),64));
    zext_ln9_23_fu_1300_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_39_fu_1295_p2),64));
    zext_ln9_24_fu_1310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_41_fu_1305_p2),64));
    zext_ln9_25_fu_1341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_43_fu_1336_p2),64));
    zext_ln9_26_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_45_fu_1346_p2),64));
    zext_ln9_27_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_47_fu_1377_p2),64));
    zext_ln9_28_fu_1392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_49_fu_1387_p2),64));
    zext_ln9_29_fu_1423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_51_fu_1418_p2),64));
    zext_ln9_2_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_2_fu_863_p2),64));
    zext_ln9_30_fu_1428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_2317),7));
    zext_ln9_31_cast_fu_1431_p3 <= (ap_const_lv7_55 & zext_ln9_30_fu_1428_p1);
    zext_ln9_31_fu_1439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln9_31_cast_fu_1431_p3),64));
    zext_ln9_32_fu_1469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_54_fu_1464_p2),64));
    zext_ln9_33_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_56_fu_1474_p2),64));
    zext_ln9_3_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_4_fu_893_p2),64));
    zext_ln9_4_fu_931_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_6_fu_926_p2),64));
    zext_ln9_5_cast_fu_936_p3 <= (ap_const_lv9_145 & i_2_reg_2317);
    zext_ln9_5_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln9_5_cast_fu_936_p3),64));
    zext_ln9_6_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_9_fu_959_p2),64));
    zext_ln9_7_fu_974_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_11_fu_969_p2),64));
    zext_ln9_8_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_13_fu_1000_p2),64));
    zext_ln9_9_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln9_15_fu_1010_p2),64));
    zext_ln9_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(thr_add_fu_879_p2),64));
end behav;
