-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_3_channel_pad_2_loop_for_channel_pad_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutPadConv2_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv2_1_ce0 : OUT STD_LOGIC;
    OutPadConv2_1_we0 : OUT STD_LOGIC;
    OutPadConv2_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv2_ce0 : OUT STD_LOGIC;
    OutPadConv2_we0 : OUT STD_LOGIC;
    OutPadConv2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPool0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPool0_ce0 : OUT STD_LOGIC;
    OutPool0_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_3_channel_pad_2_loop_for_channel_pad_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_290 : STD_LOGIC_VECTOR (9 downto 0) := "1010010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_A4 : STD_LOGIC_VECTOR (7 downto 0) := "10100100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_52 : STD_LOGIC_VECTOR (7 downto 0) := "01010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv8_A1 : STD_LOGIC_VECTOR (7 downto 0) := "10100001";
    constant ap_const_lv9_1FE : STD_LOGIC_VECTOR (8 downto 0) := "111111110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln57_fu_131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal trunc_ln59_fu_229_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln59_reg_351 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln60_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln60_reg_355 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln60_fu_265_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln60_reg_360 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln60_2_fu_287_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln60_1_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_62 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln59_fu_292_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_load : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_66 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln57_1_fu_169_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_c_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten23_fu_70 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln57_fu_137_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten23_load : STD_LOGIC_VECTOR (9 downto 0);
    signal OutPool0_ce0_local : STD_LOGIC;
    signal OutPadConv2_we0_local : STD_LOGIC;
    signal storemerge565_fu_318_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv2_ce0_local : STD_LOGIC;
    signal OutPadConv2_1_we0_local : STD_LOGIC;
    signal OutPadConv2_1_ce0_local : STD_LOGIC;
    signal icmp_ln59_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_1_fu_163_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_181_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_193_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_185_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_fu_201_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_205_fu_205_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln59_fu_215_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln59_fu_215_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln57_fu_155_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_233_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln60_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln60_1_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln60_fu_261_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln59_1_fu_221_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln59_2_fu_225_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln60_1_fu_271_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln60_fu_277_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_cast57_cast_fu_211_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln60_2_fu_281_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal mul_ln59_fu_215_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mul_3ns_8ns_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (2 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_3ns_8ns_8_1_1_U97 : component CNN_mul_3ns_8ns_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 3,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        din0 => mul_ln59_fu_215_p0,
        din1 => ap_const_lv8_52,
        dout => mul_ln59_fu_215_p2);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    c_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln57_fu_131_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    c_fu_66 <= select_ln57_1_fu_169_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_66 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten23_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln57_fu_131_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten23_fu_70 <= add_ln57_fu_137_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten23_fu_70 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    n_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln57_fu_131_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_fu_62 <= add_ln59_fu_292_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_62 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln60_reg_360 <= add_ln60_fu_265_p2;
                or_ln60_reg_355 <= or_ln60_fu_255_p2;
                trunc_ln59_reg_351 <= trunc_ln59_fu_229_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutPadConv2_1_address0 <= zext_ln60_1_fu_313_p1(9 - 1 downto 0);
    OutPadConv2_1_ce0 <= OutPadConv2_1_ce0_local;

    OutPadConv2_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv2_1_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv2_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv2_1_d0 <= storemerge565_fu_318_p3;
    OutPadConv2_1_we0 <= OutPadConv2_1_we0_local;

    OutPadConv2_1_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln59_reg_351, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln59_reg_351 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv2_1_we0_local <= ap_const_logic_1;
        else 
            OutPadConv2_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv2_address0 <= zext_ln60_1_fu_313_p1(9 - 1 downto 0);
    OutPadConv2_ce0 <= OutPadConv2_ce0_local;

    OutPadConv2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv2_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv2_d0 <= storemerge565_fu_318_p3;
    OutPadConv2_we0 <= OutPadConv2_we0_local;

    OutPadConv2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, trunc_ln59_reg_351, ap_block_pp0_stage0_11001)
    begin
        if (((trunc_ln59_reg_351 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPadConv2_we0_local <= ap_const_logic_1;
        else 
            OutPadConv2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool0_address0 <= zext_ln60_2_fu_287_p1(10 - 1 downto 0);
    OutPool0_ce0 <= OutPool0_ce0_local;

    OutPool0_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool0_ce0_local <= ap_const_logic_1;
        else 
            OutPool0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln57_1_fu_163_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_c_load) + unsigned(ap_const_lv3_1));
    add_ln57_fu_137_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten23_load) + unsigned(ap_const_lv10_1));
    add_ln59_fu_292_p2 <= std_logic_vector(unsigned(select_ln57_fu_155_p3) + unsigned(ap_const_lv8_1));
    add_ln60_1_fu_271_p2 <= std_logic_vector(unsigned(zext_ln59_2_fu_225_p1) + unsigned(ap_const_lv9_1FE));
    add_ln60_2_fu_281_p2 <= std_logic_vector(signed(sext_ln60_fu_277_p1) + signed(p_cast57_cast_fu_211_p1));
    add_ln60_fu_265_p2 <= std_logic_vector(unsigned(zext_ln60_fu_261_p1) + unsigned(zext_ln59_1_fu_221_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln57_fu_131_p2)
    begin
        if (((icmp_ln57_fu_131_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_c_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, c_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_c_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_c_load <= c_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten23_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten23_fu_70)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten23_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten23_load <= indvar_flatten23_fu_70;
        end if; 
    end process;


    ap_sig_allocacmp_n_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_62, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_n_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_n_load <= n_fu_62;
        end if; 
    end process;

    empty_205_fu_205_p2 <= std_logic_vector(unsigned(p_shl_fu_185_p3) + unsigned(p_shl4_fu_201_p1));
    empty_fu_181_p1 <= select_ln57_1_fu_169_p3(2 - 1 downto 0);
    icmp_ln57_fu_131_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten23_load = ap_const_lv10_290) else "0";
    icmp_ln59_fu_149_p2 <= "1" when (ap_sig_allocacmp_n_load = ap_const_lv8_A4) else "0";
    icmp_ln60_1_fu_249_p2 <= "1" when (unsigned(select_ln57_fu_155_p3) > unsigned(ap_const_lv8_A1)) else "0";
    icmp_ln60_fu_243_p2 <= "1" when (tmp_18_fu_233_p4 = ap_const_lv7_0) else "0";
    mul_ln59_fu_215_p0 <= mul_ln59_fu_215_p00(3 - 1 downto 0);
    mul_ln59_fu_215_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_1_fu_169_p3),8));
    or_ln60_fu_255_p2 <= (icmp_ln60_fu_243_p2 or icmp_ln60_1_fu_249_p2);
    p_cast57_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_205_fu_205_p2),10));
    p_shl4_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_193_p3),9));
    p_shl_fu_185_p3 <= (empty_fu_181_p1 & ap_const_lv7_0);
    select_ln57_1_fu_169_p3 <= 
        add_ln57_1_fu_163_p2 when (icmp_ln59_fu_149_p2(0) = '1') else 
        ap_sig_allocacmp_c_load;
    select_ln57_fu_155_p3 <= 
        ap_const_lv8_0 when (icmp_ln59_fu_149_p2(0) = '1') else 
        ap_sig_allocacmp_n_load;
        sext_ln60_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln60_1_fu_271_p2),10));

    storemerge565_fu_318_p3 <= 
        ap_const_lv16_0 when (or_ln60_reg_355(0) = '1') else 
        OutPool0_q0;
    tmp_18_fu_233_p4 <= select_ln57_fu_155_p3(7 downto 1);
    tmp_fu_193_p3 <= (select_ln57_1_fu_169_p3 & ap_const_lv5_0);
    trunc_ln59_fu_229_p1 <= select_ln57_fu_155_p3(1 - 1 downto 0);
    zext_ln59_1_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln59_fu_215_p2),9));
    zext_ln59_2_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_fu_155_p3),9));
    zext_ln60_1_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_reg_360),64));
    zext_ln60_2_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln60_2_fu_281_p2),64));
    zext_ln60_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_233_p4),9));
end behav;
