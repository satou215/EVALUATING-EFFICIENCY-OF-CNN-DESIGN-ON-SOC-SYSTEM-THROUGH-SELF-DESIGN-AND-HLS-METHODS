// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_detect (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        maxindex,
        out_Dense_address0,
        out_Dense_ce0,
        out_Dense_q0,
        conv_i_i_i127_i_out,
        conv_i_i_i127_i_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] maxindex;
output  [2:0] out_Dense_address0;
output   out_Dense_ce0;
input  [15:0] out_Dense_q0;
output  [15:0] conv_i_i_i127_i_out;
output   conv_i_i_i127_i_out_ap_vld;

reg ap_idle;
reg conv_i_i_i127_i_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln28_fu_96_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [2:0] i_reg_193;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln28_fu_102_p1;
wire    ap_block_pp0_stage0;
reg   [15:0] maxindex_1_fu_40;
wire   [15:0] maxindex_3_fu_149_p3;
wire    ap_loop_init;
reg   [15:0] conv_i_i_i127_i_fu_44;
wire   [15:0] select_ln29_fu_141_p3;
reg   [2:0] i_2_fu_48;
wire   [2:0] i_3_fu_107_p2;
reg   [2:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
reg    out_Dense_ce0_local;
wire   [10:0] shl_ln_fu_130_p3;
wire   [0:0] icmp_ln29_fu_124_p2;
wire   [15:0] zext_ln29_fu_137_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 maxindex_1_fu_40 = 16'd0;
#0 conv_i_i_i127_i_fu_44 = 16'd0;
#0 i_2_fu_48 = 3'd0;
#0 ap_done_reg = 1'b0;
end

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            conv_i_i_i127_i_fu_44 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            conv_i_i_i127_i_fu_44 <= select_ln29_fu_141_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_96_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_48 <= i_3_fu_107_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_48 <= 3'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            maxindex_1_fu_40 <= maxindex;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            maxindex_1_fu_40 <= maxindex_3_fu_149_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_193 <= ap_sig_allocacmp_i;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_96_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 3'd1;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_48;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln28_fu_96_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_i_i_i127_i_out_ap_vld = 1'b1;
    end else begin
        conv_i_i_i127_i_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_Dense_ce0_local = 1'b1;
    end else begin
        out_Dense_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign conv_i_i_i127_i_out = conv_i_i_i127_i_fu_44;

assign i_3_fu_107_p2 = (ap_sig_allocacmp_i + 3'd1);

assign icmp_ln28_fu_96_p2 = ((ap_sig_allocacmp_i == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_124_p2 = (($signed(out_Dense_q0) > $signed(maxindex_1_fu_40)) ? 1'b1 : 1'b0);

assign maxindex_3_fu_149_p3 = ((icmp_ln29_fu_124_p2[0:0] == 1'b1) ? out_Dense_q0 : maxindex_1_fu_40);

assign out_Dense_address0 = zext_ln28_fu_102_p1;

assign out_Dense_ce0 = out_Dense_ce0_local;

assign select_ln29_fu_141_p3 = ((icmp_ln29_fu_124_p2[0:0] == 1'b1) ? zext_ln29_fu_137_p1 : conv_i_i_i127_i_fu_44);

assign shl_ln_fu_130_p3 = {{i_reg_193}, {8'd0}};

assign zext_ln28_fu_102_p1 = ap_sig_allocacmp_i;

assign zext_ln29_fu_137_p1 = shl_ln_fu_130_p3;

endmodule //CNN_CNN_Pipeline_loop_detect
