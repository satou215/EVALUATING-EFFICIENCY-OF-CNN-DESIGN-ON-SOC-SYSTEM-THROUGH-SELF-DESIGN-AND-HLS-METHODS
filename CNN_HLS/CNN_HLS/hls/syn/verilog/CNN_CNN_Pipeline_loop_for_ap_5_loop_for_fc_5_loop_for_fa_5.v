// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_cast105,
        Weights_address0,
        Weights_ce0,
        Weights_q0,
        OutPadConv5_address0,
        OutPadConv5_ce0,
        OutPadConv5_q0,
        conv_i_i16_i86_i291,
        OutConv5_address0,
        OutConv5_ce0,
        OutConv5_we0,
        OutConv5_d0,
        Weights_load_130
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [10:0] p_cast105;
output  [13:0] Weights_address0;
output   Weights_ce0;
input  [15:0] Weights_q0;
output  [10:0] OutPadConv5_address0;
output   OutPadConv5_ce0;
input  [15:0] OutPadConv5_q0;
input  [15:0] conv_i_i16_i86_i291;
output  [10:0] OutConv5_address0;
output   OutConv5_ce0;
output   OutConv5_we0;
output  [15:0] OutConv5_d0;
input  [15:0] Weights_load_130;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln147_fu_213_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [16:0] conv_i_i16_i86_i291_cast_fu_173_p1;
reg  signed [16:0] conv_i_i16_i86_i291_cast_reg_604;
wire   [0:0] icmp_ln150_fu_231_p2;
reg   [0:0] icmp_ln150_reg_613;
reg   [0:0] icmp_ln150_reg_613_pp0_iter1_reg;
reg   [0:0] icmp_ln150_reg_613_pp0_iter2_reg;
reg   [0:0] icmp_ln150_reg_613_pp0_iter3_reg;
reg   [0:0] icmp_ln150_reg_613_pp0_iter4_reg;
reg   [0:0] icmp_ln150_reg_613_pp0_iter5_reg;
wire   [0:0] and_ln147_fu_257_p2;
reg   [0:0] and_ln147_reg_619;
reg   [0:0] and_ln147_reg_619_pp0_iter1_reg;
reg   [0:0] and_ln147_reg_619_pp0_iter2_reg;
reg   [0:0] and_ln147_reg_619_pp0_iter3_reg;
reg   [0:0] and_ln147_reg_619_pp0_iter4_reg;
reg   [0:0] and_ln147_reg_619_pp0_iter5_reg;
wire   [2:0] j_mid2_fu_275_p3;
reg   [2:0] j_mid2_reg_624;
reg   [2:0] j_mid2_reg_624_pp0_iter1_reg;
reg   [2:0] j_mid2_reg_624_pp0_iter2_reg;
wire   [4:0] select_ln150_fu_283_p3;
reg   [4:0] select_ln150_reg_630;
reg   [4:0] select_ln150_reg_630_pp0_iter1_reg;
reg   [4:0] select_ln150_reg_630_pp0_iter2_reg;
wire   [0:0] icmp_ln152_1_fu_301_p2;
reg   [0:0] icmp_ln152_1_reg_641;
reg   [0:0] icmp_ln152_1_reg_641_pp0_iter1_reg;
reg   [0:0] icmp_ln152_1_reg_641_pp0_iter2_reg;
reg   [0:0] icmp_ln152_1_reg_641_pp0_iter3_reg;
reg   [0:0] icmp_ln152_1_reg_641_pp0_iter4_reg;
reg   [0:0] icmp_ln152_1_reg_641_pp0_iter5_reg;
reg   [0:0] icmp_ln152_1_reg_641_pp0_iter6_reg;
wire   [0:0] icmp_ln150_1_fu_307_p2;
reg   [0:0] icmp_ln150_1_reg_645;
reg   [0:0] icmp_ln150_1_reg_645_pp0_iter1_reg;
reg   [0:0] icmp_ln150_1_reg_645_pp0_iter2_reg;
reg   [0:0] icmp_ln150_1_reg_645_pp0_iter3_reg;
reg   [0:0] icmp_ln150_1_reg_645_pp0_iter4_reg;
reg   [0:0] icmp_ln150_1_reg_645_pp0_iter5_reg;
reg   [0:0] icmp_ln150_1_reg_645_pp0_iter6_reg;
wire   [6:0] select_ln147_1_fu_356_p3;
reg   [6:0] select_ln147_1_reg_649;
reg   [6:0] select_ln147_1_reg_649_pp0_iter3_reg;
reg   [6:0] select_ln147_1_reg_649_pp0_iter4_reg;
reg   [6:0] select_ln147_1_reg_649_pp0_iter5_reg;
reg   [6:0] select_ln147_1_reg_649_pp0_iter6_reg;
wire   [63:0] zext_ln153_4_fu_437_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln153_1_fu_408_p1;
wire   [63:0] zext_ln155_fu_509_p1;
reg   [15:0] s_1_fu_92;
wire  signed [15:0] s_fu_478_p4;
reg   [15:0] ap_sig_allocacmp_s_1_load;
wire    ap_loop_init;
reg   [2:0] j_fu_96;
wire   [2:0] add_ln152_fu_295_p2;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [4:0] k_fu_100;
reg   [4:0] ap_sig_allocacmp_k_load;
reg   [7:0] indvar_flatten79_fu_104;
wire   [7:0] select_ln150_1_fu_319_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten79_load;
reg   [6:0] y_fu_108;
reg   [12:0] indvar_flatten99_fu_112;
wire   [12:0] add_ln147_fu_219_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten99_load;
reg    Weights_ce0_local;
reg    OutPadConv5_ce0_local;
reg    OutConv5_we0_local;
wire   [15:0] select_ln155_fu_519_p3;
reg    OutConv5_ce0_local;
wire   [0:0] icmp_ln152_fu_251_p2;
wire   [0:0] xor_ln147_fu_245_p2;
wire   [4:0] select_ln147_fu_237_p3;
wire   [0:0] empty_fu_269_p2;
wire   [4:0] add_ln150_fu_263_p2;
wire   [7:0] add_ln150_1_fu_313_p2;
wire   [6:0] add_ln147_1_fu_350_p2;
wire   [6:0] zext_ln152_2_fu_363_p1;
wire   [6:0] add_ln153_fu_366_p2;
wire   [6:0] tmp_fu_384_p3;
wire   [7:0] p_shl_fu_391_p1;
wire   [7:0] zext_ln150_fu_381_p1;
wire   [7:0] empty_201_fu_395_p2;
wire   [10:0] grp_fu_533_p3;
wire   [10:0] p_cast113_fu_401_p1;
wire   [10:0] add_ln153_2_fu_412_p2;
wire   [10:0] zext_ln152_1_fu_405_p1;
wire   [10:0] add_ln153_5_fu_421_p2;
wire   [11:0] zext_ln153_3_fu_427_p1;
wire   [11:0] zext_ln153_2_fu_417_p1;
wire   [11:0] add_ln153_3_fu_431_p2;
wire   [15:0] select_ln147_2_fu_453_p3;
wire   [15:0] empty_202_fu_460_p3;
wire  signed [23:0] s_fu_478_p1;
wire   [23:0] grp_fu_542_p3;
wire  signed [16:0] sext_ln155_fu_487_p1;
wire   [16:0] add_ln155_fu_491_p2;
wire   [10:0] zext_ln147_fu_475_p1;
wire   [10:0] add_ln155_1_fu_504_p2;
wire   [0:0] tmp_9_fu_496_p3;
wire   [15:0] add_ln155_2_fu_514_p2;
wire   [6:0] grp_fu_533_p0;
wire   [4:0] grp_fu_533_p1;
wire   [6:0] grp_fu_533_p2;
wire   [23:0] grp_fu_542_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [10:0] grp_fu_533_p10;
wire   [10:0] grp_fu_533_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 s_1_fu_92 = 16'd0;
#0 j_fu_96 = 3'd0;
#0 k_fu_100 = 5'd0;
#0 indvar_flatten79_fu_104 = 8'd0;
#0 y_fu_108 = 7'd0;
#0 indvar_flatten99_fu_112 = 13'd0;
#0 ap_done_reg = 1'b0;
end

CNN_mac_muladd_7ns_5ns_7ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 7 ),
    .dout_WIDTH( 11 ))
mac_muladd_7ns_5ns_7ns_11_4_1_U351(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_533_p0),
    .din1(grp_fu_533_p1),
    .din2(grp_fu_533_p2),
    .ce(1'b1),
    .dout(grp_fu_533_p3)
);

CNN_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U352(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(OutPadConv5_q0),
    .din1(Weights_q0),
    .din2(grp_fu_542_p2),
    .ce(1'b1),
    .dout(grp_fu_542_p3)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln147_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten79_fu_104 <= select_ln150_1_fu_319_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten79_fu_104 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln147_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten99_fu_112 <= add_ln147_fu_219_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten99_fu_112 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln147_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_96 <= add_ln152_fu_295_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_96 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln147_fu_213_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_100 <= select_ln150_fu_283_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_100 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_1_fu_92 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            s_1_fu_92 <= {{s_fu_478_p1[23:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_fu_108 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            y_fu_108 <= select_ln147_1_fu_356_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln147_reg_619 <= and_ln147_fu_257_p2;
        and_ln147_reg_619_pp0_iter1_reg <= and_ln147_reg_619;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        conv_i_i16_i86_i291_cast_reg_604 <= conv_i_i16_i86_i291_cast_fu_173_p1;
        icmp_ln150_1_reg_645 <= icmp_ln150_1_fu_307_p2;
        icmp_ln150_1_reg_645_pp0_iter1_reg <= icmp_ln150_1_reg_645;
        icmp_ln150_reg_613 <= icmp_ln150_fu_231_p2;
        icmp_ln150_reg_613_pp0_iter1_reg <= icmp_ln150_reg_613;
        icmp_ln152_1_reg_641 <= icmp_ln152_1_fu_301_p2;
        icmp_ln152_1_reg_641_pp0_iter1_reg <= icmp_ln152_1_reg_641;
        j_mid2_reg_624 <= j_mid2_fu_275_p3;
        j_mid2_reg_624_pp0_iter1_reg <= j_mid2_reg_624;
        select_ln150_reg_630 <= select_ln150_fu_283_p3;
        select_ln150_reg_630_pp0_iter1_reg <= select_ln150_reg_630;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln147_reg_619_pp0_iter2_reg <= and_ln147_reg_619_pp0_iter1_reg;
        and_ln147_reg_619_pp0_iter3_reg <= and_ln147_reg_619_pp0_iter2_reg;
        and_ln147_reg_619_pp0_iter4_reg <= and_ln147_reg_619_pp0_iter3_reg;
        and_ln147_reg_619_pp0_iter5_reg <= and_ln147_reg_619_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln150_1_reg_645_pp0_iter2_reg <= icmp_ln150_1_reg_645_pp0_iter1_reg;
        icmp_ln150_1_reg_645_pp0_iter3_reg <= icmp_ln150_1_reg_645_pp0_iter2_reg;
        icmp_ln150_1_reg_645_pp0_iter4_reg <= icmp_ln150_1_reg_645_pp0_iter3_reg;
        icmp_ln150_1_reg_645_pp0_iter5_reg <= icmp_ln150_1_reg_645_pp0_iter4_reg;
        icmp_ln150_1_reg_645_pp0_iter6_reg <= icmp_ln150_1_reg_645_pp0_iter5_reg;
        icmp_ln150_reg_613_pp0_iter2_reg <= icmp_ln150_reg_613_pp0_iter1_reg;
        icmp_ln150_reg_613_pp0_iter3_reg <= icmp_ln150_reg_613_pp0_iter2_reg;
        icmp_ln150_reg_613_pp0_iter4_reg <= icmp_ln150_reg_613_pp0_iter3_reg;
        icmp_ln150_reg_613_pp0_iter5_reg <= icmp_ln150_reg_613_pp0_iter4_reg;
        icmp_ln152_1_reg_641_pp0_iter2_reg <= icmp_ln152_1_reg_641_pp0_iter1_reg;
        icmp_ln152_1_reg_641_pp0_iter3_reg <= icmp_ln152_1_reg_641_pp0_iter2_reg;
        icmp_ln152_1_reg_641_pp0_iter4_reg <= icmp_ln152_1_reg_641_pp0_iter3_reg;
        icmp_ln152_1_reg_641_pp0_iter5_reg <= icmp_ln152_1_reg_641_pp0_iter4_reg;
        icmp_ln152_1_reg_641_pp0_iter6_reg <= icmp_ln152_1_reg_641_pp0_iter5_reg;
        j_mid2_reg_624_pp0_iter2_reg <= j_mid2_reg_624_pp0_iter1_reg;
        select_ln147_1_reg_649 <= select_ln147_1_fu_356_p3;
        select_ln147_1_reg_649_pp0_iter3_reg <= select_ln147_1_reg_649;
        select_ln147_1_reg_649_pp0_iter4_reg <= select_ln147_1_reg_649_pp0_iter3_reg;
        select_ln147_1_reg_649_pp0_iter5_reg <= select_ln147_1_reg_649_pp0_iter4_reg;
        select_ln147_1_reg_649_pp0_iter6_reg <= select_ln147_1_reg_649_pp0_iter5_reg;
        select_ln150_reg_630_pp0_iter2_reg <= select_ln150_reg_630_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        OutConv5_ce0_local = 1'b1;
    end else begin
        OutConv5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln150_1_reg_645_pp0_iter6_reg == 1'd1) & (icmp_ln152_1_reg_641_pp0_iter6_reg == 1'd1))) begin
        OutConv5_we0_local = 1'b1;
    end else begin
        OutConv5_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPadConv5_ce0_local = 1'b1;
    end else begin
        OutPadConv5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Weights_ce0_local = 1'b1;
    end else begin
        Weights_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln147_fu_213_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten79_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten79_load = indvar_flatten79_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten99_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten99_load = indvar_flatten99_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 5'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_sig_allocacmp_s_1_load = {{s_fu_478_p1[23:8]}};
    end else begin
        ap_sig_allocacmp_s_1_load = s_1_fu_92;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv5_address0 = zext_ln155_fu_509_p1;

assign OutConv5_ce0 = OutConv5_ce0_local;

assign OutConv5_d0 = select_ln155_fu_519_p3;

assign OutConv5_we0 = OutConv5_we0_local;

assign OutPadConv5_address0 = zext_ln153_1_fu_408_p1;

assign OutPadConv5_ce0 = OutPadConv5_ce0_local;

assign Weights_address0 = zext_ln153_4_fu_437_p1;

assign Weights_ce0 = Weights_ce0_local;

assign add_ln147_1_fu_350_p2 = (y_fu_108 + 7'd1);

assign add_ln147_fu_219_p2 = (ap_sig_allocacmp_indvar_flatten99_load + 13'd1);

assign add_ln150_1_fu_313_p2 = (ap_sig_allocacmp_indvar_flatten79_load + 8'd1);

assign add_ln150_fu_263_p2 = (select_ln147_fu_237_p3 + 5'd1);

assign add_ln152_fu_295_p2 = (j_mid2_fu_275_p3 + 3'd1);

assign add_ln153_2_fu_412_p2 = (p_cast105 + p_cast113_fu_401_p1);

assign add_ln153_3_fu_431_p2 = (zext_ln153_3_fu_427_p1 + zext_ln153_2_fu_417_p1);

assign add_ln153_5_fu_421_p2 = ($signed(zext_ln152_1_fu_405_p1) + $signed(11'd1260));

assign add_ln153_fu_366_p2 = (select_ln147_1_fu_356_p3 + zext_ln152_2_fu_363_p1);

assign add_ln155_1_fu_504_p2 = (zext_ln147_fu_475_p1 + p_cast105);

assign add_ln155_2_fu_514_p2 = ($signed(Weights_load_130) + $signed(s_fu_478_p4));

assign add_ln155_fu_491_p2 = ($signed(sext_ln155_fu_487_p1) + $signed(conv_i_i16_i86_i291_cast_reg_604));

assign and_ln147_fu_257_p2 = (xor_ln147_fu_245_p2 & icmp_ln152_fu_251_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign conv_i_i16_i86_i291_cast_fu_173_p1 = $signed(conv_i_i16_i86_i291);

assign empty_201_fu_395_p2 = (p_shl_fu_391_p1 + zext_ln150_fu_381_p1);

assign empty_202_fu_460_p3 = ((and_ln147_reg_619_pp0_iter5_reg[0:0] == 1'b1) ? ap_sig_allocacmp_s_1_load : select_ln147_2_fu_453_p3);

assign empty_fu_269_p2 = (icmp_ln150_fu_231_p2 | and_ln147_fu_257_p2);

assign grp_fu_533_p0 = 11'd84;

assign grp_fu_533_p1 = grp_fu_533_p10;

assign grp_fu_533_p10 = select_ln150_fu_283_p3;

assign grp_fu_533_p2 = grp_fu_533_p20;

assign grp_fu_533_p20 = add_ln153_fu_366_p2;

assign grp_fu_542_p2 = {{empty_202_fu_460_p3}, {8'd0}};

assign icmp_ln147_fu_213_p2 = ((ap_sig_allocacmp_indvar_flatten99_load == 13'd6400) ? 1'b1 : 1'b0);

assign icmp_ln150_1_fu_307_p2 = ((select_ln150_fu_283_p3 == 5'd15) ? 1'b1 : 1'b0);

assign icmp_ln150_fu_231_p2 = ((ap_sig_allocacmp_indvar_flatten79_load == 8'd80) ? 1'b1 : 1'b0);

assign icmp_ln152_1_fu_301_p2 = ((add_ln152_fu_295_p2 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln152_fu_251_p2 = ((ap_sig_allocacmp_j_load == 3'd5) ? 1'b1 : 1'b0);

assign j_mid2_fu_275_p3 = ((empty_fu_269_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign p_cast113_fu_401_p1 = empty_201_fu_395_p2;

assign p_shl_fu_391_p1 = tmp_fu_384_p3;

assign s_fu_478_p1 = grp_fu_542_p3;

assign s_fu_478_p4 = {{s_fu_478_p1[23:8]}};

assign select_ln147_1_fu_356_p3 = ((icmp_ln150_reg_613_pp0_iter1_reg[0:0] == 1'b1) ? add_ln147_1_fu_350_p2 : y_fu_108);

assign select_ln147_2_fu_453_p3 = ((icmp_ln150_reg_613_pp0_iter5_reg[0:0] == 1'b1) ? 16'd0 : ap_sig_allocacmp_s_1_load);

assign select_ln147_fu_237_p3 = ((icmp_ln150_fu_231_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_k_load);

assign select_ln150_1_fu_319_p3 = ((icmp_ln150_fu_231_p2[0:0] == 1'b1) ? 8'd1 : add_ln150_1_fu_313_p2);

assign select_ln150_fu_283_p3 = ((and_ln147_fu_257_p2[0:0] == 1'b1) ? add_ln150_fu_263_p2 : select_ln147_fu_237_p3);

assign select_ln155_fu_519_p3 = ((tmp_9_fu_496_p3[0:0] == 1'b1) ? 16'd0 : add_ln155_2_fu_514_p2);

assign sext_ln155_fu_487_p1 = s_fu_478_p4;

assign tmp_9_fu_496_p3 = add_ln155_fu_491_p2[32'd16];

assign tmp_fu_384_p3 = {{select_ln150_reg_630_pp0_iter2_reg}, {2'd0}};

assign xor_ln147_fu_245_p2 = (icmp_ln150_fu_231_p2 ^ 1'd1);

assign zext_ln147_fu_475_p1 = select_ln147_1_reg_649_pp0_iter6_reg;

assign zext_ln150_fu_381_p1 = select_ln150_reg_630_pp0_iter2_reg;

assign zext_ln152_1_fu_405_p1 = j_mid2_reg_624_pp0_iter2_reg;

assign zext_ln152_2_fu_363_p1 = j_mid2_reg_624_pp0_iter1_reg;

assign zext_ln153_1_fu_408_p1 = grp_fu_533_p3;

assign zext_ln153_2_fu_417_p1 = add_ln153_2_fu_412_p2;

assign zext_ln153_3_fu_427_p1 = add_ln153_5_fu_421_p2;

assign zext_ln153_4_fu_437_p1 = add_ln153_3_fu_431_p2;

assign zext_ln155_fu_509_p1 = add_ln155_1_fu_504_p2;

endmodule //CNN_CNN_Pipeline_loop_for_ap_5_loop_for_fc_5_loop_for_fa_5
