// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_channel_pool_0_loop_for_weight_pool_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutConv1_address0,
        OutConv1_ce0,
        OutConv1_q0,
        OutConv1_address1,
        OutConv1_ce1,
        OutConv1_q1,
        OutPool0_address0,
        OutPool0_ce0,
        OutPool0_we0,
        OutPool0_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] OutConv1_address0;
output   OutConv1_ce0;
input  [15:0] OutConv1_q0;
output  [10:0] OutConv1_address1;
output   OutConv1_ce1;
input  [15:0] OutConv1_q1;
output  [9:0] OutPool0_address0;
output   OutPool0_ce0;
output   OutPool0_we0;
output  [15:0] OutPool0_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln8_fu_136_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln19_fu_306_p2;
reg   [9:0] add_ln19_reg_400;
wire   [63:0] zext_ln16_fu_290_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln16_1_fu_301_p1;
wire   [63:0] zext_ln20_fu_362_p1;
reg   [7:0] y_fu_68;
wire   [7:0] add_ln21_fu_312_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_y_load;
reg   [2:0] z_fu_72;
wire   [2:0] select_ln8_1_fu_174_p3;
reg   [2:0] ap_sig_allocacmp_z_load;
reg   [9:0] indvar_flatten16_fu_76;
wire   [9:0] add_ln8_fu_142_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten16_load;
reg    OutConv1_ce1_local;
reg    OutConv1_ce0_local;
reg    OutPool0_we0_local;
wire   [15:0] max_4_fu_353_p3;
reg    OutPool0_ce0_local;
wire   [0:0] icmp_ln11_fu_154_p2;
wire   [2:0] add_ln8_1_fu_168_p2;
wire   [1:0] empty_fu_182_p1;
wire   [8:0] tmp_fu_194_p3;
wire   [9:0] p_shl2_fu_186_p3;
wire   [9:0] p_shl3_fu_202_p1;
wire   [9:0] empty_195_fu_206_p2;
wire   [7:0] tmp_6_fu_224_p3;
wire   [8:0] p_shl_fu_216_p3;
wire   [8:0] p_shl1_fu_232_p1;
wire   [8:0] empty_196_fu_236_p2;
wire   [8:0] tmp_s_fu_246_p4;
wire   [9:0] tmp_8_fu_256_p3;
wire   [7:0] select_ln8_fu_160_p3;
wire   [8:0] tmp_9_fu_272_p3;
wire   [10:0] zext_ln15_fu_280_p1;
wire   [10:0] p_cast52_cast_fu_212_p1;
wire   [10:0] add_ln15_fu_284_p2;
wire   [10:0] zext_ln11_fu_264_p1;
wire   [10:0] add_ln15_1_fu_295_p2;
wire   [9:0] zext_ln11_1_fu_268_p1;
wire   [9:0] p_cast55_cast_fu_242_p1;
wire   [0:0] icmp_ln17_fu_333_p2;
wire   [15:0] max_fu_339_p3;
wire   [0:0] icmp_ln17_1_fu_347_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 y_fu_68 = 8'd0;
#0 z_fu_72 = 3'd0;
#0 indvar_flatten16_fu_76 = 10'd0;
#0 ap_done_reg = 1'b0;
end

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln8_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten16_fu_76 <= add_ln8_fu_142_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten16_fu_76 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln8_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_68 <= add_ln21_fu_312_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_68 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln8_fu_136_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            z_fu_72 <= select_ln8_1_fu_174_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            z_fu_72 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln19_reg_400 <= add_ln19_fu_306_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv1_ce0_local = 1'b1;
    end else begin
        OutConv1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv1_ce1_local = 1'b1;
    end else begin
        OutConv1_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPool0_ce0_local = 1'b1;
    end else begin
        OutPool0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPool0_we0_local = 1'b1;
    end else begin
        OutPool0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_136_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten16_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten16_load = indvar_flatten16_fu_76;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_y_load = 8'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_68;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_z_load = 3'd0;
    end else begin
        ap_sig_allocacmp_z_load = z_fu_72;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv1_address0 = zext_ln16_1_fu_301_p1;

assign OutConv1_address1 = zext_ln16_fu_290_p1;

assign OutConv1_ce0 = OutConv1_ce0_local;

assign OutConv1_ce1 = OutConv1_ce1_local;

assign OutPool0_address0 = zext_ln20_fu_362_p1;

assign OutPool0_ce0 = OutPool0_ce0_local;

assign OutPool0_d0 = max_4_fu_353_p3;

assign OutPool0_we0 = OutPool0_we0_local;

assign add_ln15_1_fu_295_p2 = (zext_ln15_fu_280_p1 + zext_ln11_fu_264_p1);

assign add_ln15_fu_284_p2 = (zext_ln15_fu_280_p1 + p_cast52_cast_fu_212_p1);

assign add_ln19_fu_306_p2 = (zext_ln11_1_fu_268_p1 + p_cast55_cast_fu_242_p1);

assign add_ln21_fu_312_p2 = (select_ln8_fu_160_p3 + 8'd1);

assign add_ln8_1_fu_168_p2 = (ap_sig_allocacmp_z_load + 3'd1);

assign add_ln8_fu_142_p2 = (ap_sig_allocacmp_indvar_flatten16_load + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_195_fu_206_p2 = (p_shl2_fu_186_p3 + p_shl3_fu_202_p1);

assign empty_196_fu_236_p2 = (p_shl_fu_216_p3 + p_shl1_fu_232_p1);

assign empty_fu_182_p1 = select_ln8_1_fu_174_p3[1:0];

assign icmp_ln11_fu_154_p2 = ((ap_sig_allocacmp_y_load == 8'd160) ? 1'b1 : 1'b0);

assign icmp_ln17_1_fu_347_p2 = (($signed(OutConv1_q0) > $signed(max_fu_339_p3)) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_333_p2 = (($signed(OutConv1_q1) > $signed(16'd62976)) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_136_p2 = ((ap_sig_allocacmp_indvar_flatten16_load == 10'd640) ? 1'b1 : 1'b0);

assign max_4_fu_353_p3 = ((icmp_ln17_1_fu_347_p2[0:0] == 1'b1) ? OutConv1_q0 : max_fu_339_p3);

assign max_fu_339_p3 = ((icmp_ln17_fu_333_p2[0:0] == 1'b1) ? OutConv1_q1 : 16'd62976);

assign p_cast52_cast_fu_212_p1 = empty_195_fu_206_p2;

assign p_cast55_cast_fu_242_p1 = empty_196_fu_236_p2;

assign p_shl1_fu_232_p1 = tmp_6_fu_224_p3;

assign p_shl2_fu_186_p3 = {{empty_fu_182_p1}, {8'd0}};

assign p_shl3_fu_202_p1 = tmp_fu_194_p3;

assign p_shl_fu_216_p3 = {{empty_fu_182_p1}, {7'd0}};

assign select_ln8_1_fu_174_p3 = ((icmp_ln11_fu_154_p2[0:0] == 1'b1) ? add_ln8_1_fu_168_p2 : ap_sig_allocacmp_z_load);

assign select_ln8_fu_160_p3 = ((icmp_ln11_fu_154_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_y_load);

assign tmp_6_fu_224_p3 = {{select_ln8_1_fu_174_p3}, {5'd0}};

assign tmp_8_fu_256_p3 = {{tmp_s_fu_246_p4}, {1'd1}};

assign tmp_9_fu_272_p3 = {{select_ln8_fu_160_p3}, {1'd0}};

assign tmp_fu_194_p3 = {{select_ln8_1_fu_174_p3}, {6'd0}};

assign tmp_s_fu_246_p4 = {{empty_195_fu_206_p2[9:1]}};

assign zext_ln11_1_fu_268_p1 = select_ln8_fu_160_p3;

assign zext_ln11_fu_264_p1 = tmp_8_fu_256_p3;

assign zext_ln15_fu_280_p1 = tmp_9_fu_272_p3;

assign zext_ln16_1_fu_301_p1 = add_ln15_1_fu_295_p2;

assign zext_ln16_fu_290_p1 = add_ln15_fu_284_p2;

assign zext_ln20_fu_362_p1 = add_ln19_reg_400;

endmodule //CNN_CNN_Pipeline_loop_for_channel_pool_0_loop_for_weight_pool_0
