// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_3_channel_pad_3_loop_for_channel_pad_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutPadConv3_2_address0,
        OutPadConv3_2_ce0,
        OutPadConv3_2_we0,
        OutPadConv3_2_d0,
        OutPadConv3_1_address0,
        OutPadConv3_1_ce0,
        OutPadConv3_1_we0,
        OutPadConv3_1_d0,
        OutPadConv3_address0,
        OutPadConv3_ce0,
        OutPadConv3_we0,
        OutPadConv3_d0,
        OutConv2_address0,
        OutConv2_ce0,
        OutConv2_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] OutPadConv3_2_address0;
output   OutPadConv3_2_ce0;
output   OutPadConv3_2_we0;
output  [15:0] OutPadConv3_2_d0;
output  [8:0] OutPadConv3_1_address0;
output   OutPadConv3_1_ce0;
output   OutPadConv3_1_we0;
output  [15:0] OutPadConv3_1_d0;
output  [8:0] OutPadConv3_address0;
output   OutPadConv3_ce0;
output   OutPadConv3_we0;
output  [15:0] OutPadConv3_d0;
output  [10:0] OutConv2_address0;
output   OutConv2_ce0;
input  [15:0] OutConv2_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln83_fu_160_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [7:0] select_ln83_fu_184_p3;
reg   [7:0] select_ln83_reg_411;
reg   [7:0] select_ln83_reg_411_pp0_iter1_reg;
reg   [7:0] select_ln83_reg_411_pp0_iter2_reg;
reg   [7:0] select_ln83_reg_411_pp0_iter3_reg;
reg   [7:0] select_ln83_reg_411_pp0_iter4_reg;
reg   [7:0] select_ln83_reg_411_pp0_iter5_reg;
reg   [7:0] select_ln83_reg_411_pp0_iter6_reg;
reg   [7:0] select_ln83_reg_411_pp0_iter7_reg;
reg   [7:0] select_ln83_reg_411_pp0_iter8_reg;
reg   [7:0] select_ln83_reg_411_pp0_iter9_reg;
wire   [3:0] select_ln83_1_fu_198_p3;
reg   [3:0] select_ln83_1_reg_418;
reg   [3:0] select_ln83_1_reg_418_pp0_iter1_reg;
reg   [3:0] select_ln83_1_reg_418_pp0_iter2_reg;
reg   [3:0] select_ln83_1_reg_418_pp0_iter3_reg;
reg   [3:0] select_ln83_1_reg_418_pp0_iter4_reg;
reg   [3:0] select_ln83_1_reg_418_pp0_iter5_reg;
reg   [3:0] select_ln83_1_reg_418_pp0_iter6_reg;
reg   [3:0] select_ln83_1_reg_418_pp0_iter7_reg;
reg   [3:0] select_ln83_1_reg_418_pp0_iter8_reg;
reg   [3:0] select_ln83_1_reg_418_pp0_iter9_reg;
wire   [0:0] icmp_ln86_fu_226_p2;
reg   [0:0] icmp_ln86_reg_425;
reg   [0:0] icmp_ln86_reg_425_pp0_iter1_reg;
reg   [0:0] icmp_ln86_reg_425_pp0_iter2_reg;
reg   [0:0] icmp_ln86_reg_425_pp0_iter3_reg;
reg   [0:0] icmp_ln86_reg_425_pp0_iter4_reg;
reg   [0:0] icmp_ln86_reg_425_pp0_iter5_reg;
reg   [0:0] icmp_ln86_reg_425_pp0_iter6_reg;
reg   [0:0] icmp_ln86_reg_425_pp0_iter7_reg;
reg   [0:0] icmp_ln86_reg_425_pp0_iter8_reg;
reg   [0:0] icmp_ln86_reg_425_pp0_iter9_reg;
wire   [0:0] or_ln86_fu_303_p2;
reg   [0:0] or_ln86_reg_445;
wire   [63:0] zext_ln86_1_fu_324_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln86_fu_348_p1;
reg   [7:0] n_fu_78;
wire   [7:0] add_ln85_fu_244_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_n_load;
reg   [3:0] c_fu_82;
reg   [3:0] ap_sig_allocacmp_c_load;
reg   [10:0] indvar_flatten37_fu_86;
wire   [10:0] add_ln83_fu_166_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten37_load;
reg    OutConv2_ce0_local;
reg    OutPadConv3_1_we0_local;
wire   [1:0] trunc_ln86_fu_355_p1;
wire   [15:0] storemerge573_fu_359_p3;
reg    OutPadConv3_1_ce0_local;
reg    OutPadConv3_we0_local;
reg    OutPadConv3_ce0_local;
reg    OutPadConv3_2_we0_local;
reg    OutPadConv3_2_ce0_local;
wire   [0:0] icmp_ln85_fu_178_p2;
wire   [3:0] add_ln83_1_fu_192_p2;
wire   [3:0] empty_fu_206_p2;
wire   [6:0] tmp_16_fu_216_p4;
wire   [7:0] p_cast69_fu_212_p1;
wire   [7:0] grp_fu_238_p0;
wire   [2:0] grp_fu_238_p1;
wire   [8:0] tmp_fu_275_p3;
wire   [10:0] p_shl_fu_268_p3;
wire   [10:0] zext_ln85_2_fu_282_p1;
wire   [0:0] icmp_ln86_1_fu_298_p2;
wire   [8:0] zext_ln85_1_fu_295_p1;
wire   [8:0] add_ln86_2_fu_308_p2;
wire  signed [10:0] sext_ln86_fu_314_p1;
wire   [10:0] add_ln85_1_fu_286_p2;
wire   [10:0] add_ln86_3_fu_318_p2;
wire   [10:0] grp_fu_377_p3;
wire   [10:0] mul_ln86_fu_332_p0;
wire   [12:0] mul_ln86_fu_332_p1;
wire   [22:0] mul_ln86_fu_332_p2;
wire   [9:0] tmp_17_fu_338_p4;
wire   [1:0] grp_fu_238_p2;
wire   [7:0] grp_fu_377_p0;
wire   [3:0] grp_fu_377_p1;
wire   [7:0] grp_fu_377_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [10:0] grp_fu_377_p10;
wire   [10:0] grp_fu_377_p20;
wire   [22:0] mul_ln86_fu_332_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 n_fu_78 = 8'd0;
#0 c_fu_82 = 4'd0;
#0 indvar_flatten37_fu_86 = 11'd0;
#0 ap_done_reg = 1'b0;
end

CNN_urem_8ns_3ns_2_12_1 #(
    .ID( 1 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_8ns_3ns_2_12_1_U126(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_238_p0),
    .din1(grp_fu_238_p1),
    .ce(1'b1),
    .dout(grp_fu_238_p2)
);

CNN_mul_11ns_13ns_23_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 23 ))
mul_11ns_13ns_23_1_1_U127(
    .din0(mul_ln86_fu_332_p0),
    .din1(mul_ln86_fu_332_p1),
    .dout(mul_ln86_fu_332_p2)
);

CNN_mac_muladd_8ns_4ns_8ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 11 ))
mac_muladd_8ns_4ns_8ns_11_4_1_U128(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_377_p0),
    .din1(grp_fu_377_p1),
    .din2(grp_fu_377_p2),
    .ce(1'b1),
    .dout(grp_fu_377_p3)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln83_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            c_fu_82 <= select_ln83_1_fu_198_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            c_fu_82 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln83_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten37_fu_86 <= add_ln83_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten37_fu_86 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln83_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n_fu_78 <= add_ln85_fu_244_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_78 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln86_reg_425_pp0_iter2_reg <= icmp_ln86_reg_425_pp0_iter1_reg;
        icmp_ln86_reg_425_pp0_iter3_reg <= icmp_ln86_reg_425_pp0_iter2_reg;
        icmp_ln86_reg_425_pp0_iter4_reg <= icmp_ln86_reg_425_pp0_iter3_reg;
        icmp_ln86_reg_425_pp0_iter5_reg <= icmp_ln86_reg_425_pp0_iter4_reg;
        icmp_ln86_reg_425_pp0_iter6_reg <= icmp_ln86_reg_425_pp0_iter5_reg;
        icmp_ln86_reg_425_pp0_iter7_reg <= icmp_ln86_reg_425_pp0_iter6_reg;
        icmp_ln86_reg_425_pp0_iter8_reg <= icmp_ln86_reg_425_pp0_iter7_reg;
        icmp_ln86_reg_425_pp0_iter9_reg <= icmp_ln86_reg_425_pp0_iter8_reg;
        or_ln86_reg_445 <= or_ln86_fu_303_p2;
        select_ln83_1_reg_418_pp0_iter2_reg <= select_ln83_1_reg_418_pp0_iter1_reg;
        select_ln83_1_reg_418_pp0_iter3_reg <= select_ln83_1_reg_418_pp0_iter2_reg;
        select_ln83_1_reg_418_pp0_iter4_reg <= select_ln83_1_reg_418_pp0_iter3_reg;
        select_ln83_1_reg_418_pp0_iter5_reg <= select_ln83_1_reg_418_pp0_iter4_reg;
        select_ln83_1_reg_418_pp0_iter6_reg <= select_ln83_1_reg_418_pp0_iter5_reg;
        select_ln83_1_reg_418_pp0_iter7_reg <= select_ln83_1_reg_418_pp0_iter6_reg;
        select_ln83_1_reg_418_pp0_iter8_reg <= select_ln83_1_reg_418_pp0_iter7_reg;
        select_ln83_1_reg_418_pp0_iter9_reg <= select_ln83_1_reg_418_pp0_iter8_reg;
        select_ln83_reg_411_pp0_iter2_reg <= select_ln83_reg_411_pp0_iter1_reg;
        select_ln83_reg_411_pp0_iter3_reg <= select_ln83_reg_411_pp0_iter2_reg;
        select_ln83_reg_411_pp0_iter4_reg <= select_ln83_reg_411_pp0_iter3_reg;
        select_ln83_reg_411_pp0_iter5_reg <= select_ln83_reg_411_pp0_iter4_reg;
        select_ln83_reg_411_pp0_iter6_reg <= select_ln83_reg_411_pp0_iter5_reg;
        select_ln83_reg_411_pp0_iter7_reg <= select_ln83_reg_411_pp0_iter6_reg;
        select_ln83_reg_411_pp0_iter8_reg <= select_ln83_reg_411_pp0_iter7_reg;
        select_ln83_reg_411_pp0_iter9_reg <= select_ln83_reg_411_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln86_reg_425 <= icmp_ln86_fu_226_p2;
        icmp_ln86_reg_425_pp0_iter1_reg <= icmp_ln86_reg_425;
        select_ln83_1_reg_418 <= select_ln83_1_fu_198_p3;
        select_ln83_1_reg_418_pp0_iter1_reg <= select_ln83_1_reg_418;
        select_ln83_reg_411 <= select_ln83_fu_184_p3;
        select_ln83_reg_411_pp0_iter1_reg <= select_ln83_reg_411;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        OutConv2_ce0_local = 1'b1;
    end else begin
        OutConv2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        OutPadConv3_1_ce0_local = 1'b1;
    end else begin
        OutPadConv3_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln86_fu_355_p1 == 2'd1))) begin
        OutPadConv3_1_we0_local = 1'b1;
    end else begin
        OutPadConv3_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        OutPadConv3_2_ce0_local = 1'b1;
    end else begin
        OutPadConv3_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln86_fu_355_p1 == 2'd0) & ~(trunc_ln86_fu_355_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        OutPadConv3_2_we0_local = 1'b1;
    end else begin
        OutPadConv3_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        OutPadConv3_ce0_local = 1'b1;
    end else begin
        OutPadConv3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1) & (trunc_ln86_fu_355_p1 == 2'd0))) begin
        OutPadConv3_we0_local = 1'b1;
    end else begin
        OutPadConv3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln83_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter10_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_c_load = 4'd0;
    end else begin
        ap_sig_allocacmp_c_load = c_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten37_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten37_load = indvar_flatten37_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_n_load = 8'd0;
    end else begin
        ap_sig_allocacmp_n_load = n_fu_78;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv2_address0 = zext_ln86_1_fu_324_p1;

assign OutConv2_ce0 = OutConv2_ce0_local;

assign OutPadConv3_1_address0 = zext_ln86_fu_348_p1;

assign OutPadConv3_1_ce0 = OutPadConv3_1_ce0_local;

assign OutPadConv3_1_d0 = storemerge573_fu_359_p3;

assign OutPadConv3_1_we0 = OutPadConv3_1_we0_local;

assign OutPadConv3_2_address0 = zext_ln86_fu_348_p1;

assign OutPadConv3_2_ce0 = OutPadConv3_2_ce0_local;

assign OutPadConv3_2_d0 = storemerge573_fu_359_p3;

assign OutPadConv3_2_we0 = OutPadConv3_2_we0_local;

assign OutPadConv3_address0 = zext_ln86_fu_348_p1;

assign OutPadConv3_ce0 = OutPadConv3_ce0_local;

assign OutPadConv3_d0 = storemerge573_fu_359_p3;

assign OutPadConv3_we0 = OutPadConv3_we0_local;

assign add_ln83_1_fu_192_p2 = (ap_sig_allocacmp_c_load + 4'd1);

assign add_ln83_fu_166_p2 = (ap_sig_allocacmp_indvar_flatten37_load + 11'd1);

assign add_ln85_1_fu_286_p2 = (p_shl_fu_268_p3 + zext_ln85_2_fu_282_p1);

assign add_ln85_fu_244_p2 = (select_ln83_fu_184_p3 + 8'd1);

assign add_ln86_2_fu_308_p2 = ($signed(zext_ln85_1_fu_295_p1) + $signed(9'd510));

assign add_ln86_3_fu_318_p2 = ($signed(sext_ln86_fu_314_p1) + $signed(add_ln85_1_fu_286_p2));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_fu_206_p2 = select_ln83_1_fu_198_p3 << 4'd1;

assign grp_fu_238_p0 = (select_ln83_fu_184_p3 + p_cast69_fu_212_p1);

assign grp_fu_238_p1 = 8'd3;

assign grp_fu_377_p0 = 11'd164;

assign grp_fu_377_p1 = grp_fu_377_p10;

assign grp_fu_377_p10 = select_ln83_1_reg_418_pp0_iter7_reg;

assign grp_fu_377_p2 = grp_fu_377_p20;

assign grp_fu_377_p20 = select_ln83_reg_411_pp0_iter9_reg;

assign icmp_ln83_fu_160_p2 = ((ap_sig_allocacmp_indvar_flatten37_load == 11'd1312) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_178_p2 = ((ap_sig_allocacmp_n_load == 8'd164) ? 1'b1 : 1'b0);

assign icmp_ln86_1_fu_298_p2 = ((select_ln83_reg_411_pp0_iter9_reg > 8'd161) ? 1'b1 : 1'b0);

assign icmp_ln86_fu_226_p2 = ((tmp_16_fu_216_p4 == 7'd0) ? 1'b1 : 1'b0);

assign mul_ln86_fu_332_p0 = mul_ln86_fu_332_p00;

assign mul_ln86_fu_332_p00 = grp_fu_377_p3;

assign mul_ln86_fu_332_p1 = 23'd2731;

assign or_ln86_fu_303_p2 = (icmp_ln86_reg_425_pp0_iter9_reg | icmp_ln86_1_fu_298_p2);

assign p_cast69_fu_212_p1 = empty_fu_206_p2;

assign p_shl_fu_268_p3 = {{select_ln83_1_reg_418_pp0_iter9_reg}, {7'd0}};

assign select_ln83_1_fu_198_p3 = ((icmp_ln85_fu_178_p2[0:0] == 1'b1) ? add_ln83_1_fu_192_p2 : ap_sig_allocacmp_c_load);

assign select_ln83_fu_184_p3 = ((icmp_ln85_fu_178_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_n_load);

assign sext_ln86_fu_314_p1 = $signed(add_ln86_2_fu_308_p2);

assign storemerge573_fu_359_p3 = ((or_ln86_reg_445[0:0] == 1'b1) ? 16'd0 : OutConv2_q0);

assign tmp_16_fu_216_p4 = {{select_ln83_fu_184_p3[7:1]}};

assign tmp_17_fu_338_p4 = {{mul_ln86_fu_332_p2[22:13]}};

assign tmp_fu_275_p3 = {{select_ln83_1_reg_418_pp0_iter9_reg}, {5'd0}};

assign trunc_ln86_fu_355_p1 = grp_fu_238_p2[1:0];

assign zext_ln85_1_fu_295_p1 = select_ln83_reg_411_pp0_iter9_reg;

assign zext_ln85_2_fu_282_p1 = tmp_fu_275_p3;

assign zext_ln86_1_fu_324_p1 = add_ln86_3_fu_318_p2;

assign zext_ln86_fu_348_p1 = tmp_17_fu_338_p4;

endmodule //CNN_CNN_Pipeline_loop_for_3_channel_pad_3_loop_for_channel_pad_3
