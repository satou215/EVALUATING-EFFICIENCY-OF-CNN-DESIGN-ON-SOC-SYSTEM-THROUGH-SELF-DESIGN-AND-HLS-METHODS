-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_3_channel_pad_1_loop_for_channel_pad_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutPadConv1_2_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv1_2_ce0 : OUT STD_LOGIC;
    OutPadConv1_2_we0 : OUT STD_LOGIC;
    OutPadConv1_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv1_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv1_1_ce0 : OUT STD_LOGIC;
    OutPadConv1_1_we0 : OUT STD_LOGIC;
    OutPadConv1_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    OutPadConv1_ce0 : OUT STD_LOGIC;
    OutPadConv1_we0 : OUT STD_LOGIC;
    OutPadConv1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    OutConv0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv0_ce0 : OUT STD_LOGIC;
    OutConv0_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_3_channel_pad_1_loop_for_channel_pad_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_510 : STD_LOGIC_VECTOR (10 downto 0) := "10100010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_144 : STD_LOGIC_VECTOR (8 downto 0) := "101000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_141 : STD_LOGIC_VECTOR (8 downto 0) := "101000001";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv19_2AB : STD_LOGIC_VECTOR (18 downto 0) := "0000000001010101011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv9_6C : STD_LOGIC_VECTOR (8 downto 0) := "001101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln31_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln33_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_405 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_405_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_405_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_405_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_405_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_405_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_405_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_405_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_405_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_181_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter6_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter7_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter8_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter9_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln31_reg_410_pp0_iter10_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln34_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_reg_417_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_1_fu_248_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln31_1_reg_422 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln31_1_reg_422_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_259_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_432 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_432_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln34_1_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln34_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal n_fu_78 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal add_ln33_fu_223_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_n_load : STD_LOGIC_VECTOR (8 downto 0);
    signal c_fu_82 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal indvar_flatten_fu_86 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln31_fu_166_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (10 downto 0);
    signal OutConv0_ce0_local : STD_LOGIC;
    signal OutPadConv1_1_we0_local : STD_LOGIC;
    signal trunc_ln34_fu_349_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal storemerge555_fu_353_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPadConv1_1_ce0_local : STD_LOGIC;
    signal OutPadConv1_we0_local : STD_LOGIC;
    signal OutPadConv1_ce0_local : STD_LOGIC;
    signal OutPadConv1_2_we0_local : STD_LOGIC;
    signal OutPadConv1_2_ce0_local : STD_LOGIC;
    signal tmp_19_fu_189_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln34_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln31_1_fu_242_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_275_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_268_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl6_fu_282_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_206_fu_286_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln34_fu_302_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_fu_302_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln34_fu_302_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_20_fu_308_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln33_1_fu_296_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln34_1_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln34_fu_328_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast44_cast_fu_292_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln34_2_fu_332_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_371_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_371_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_371_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_371_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_371_p20 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln34_fu_302_p00 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_urem_9ns_3ns_2_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component CNN_mul_9ns_11ns_19_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component CNN_mac_muladd_7ns_3ns_8ns_9_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_9ns_3ns_2_13_1_U20 : component CNN_urem_9ns_3ns_2_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln31_fu_181_p3,
        din1 => grp_fu_217_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    mul_9ns_11ns_19_1_1_U21 : component CNN_mul_9ns_11ns_19_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => mul_ln34_fu_302_p0,
        din1 => mul_ln34_fu_302_p1,
        dout => mul_ln34_fu_302_p2);

    mac_muladd_7ns_3ns_8ns_9_4_1_U22 : component CNN_mac_muladd_7ns_3ns_8ns_9_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 3,
        din2_WIDTH => 8,
        dout_WIDTH => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_371_p0,
        din1 => grp_fu_371_p1,
        din2 => grp_fu_371_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_371_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c_fu_82 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter9 = ap_const_logic_1)) then 
                    c_fu_82 <= select_ln31_1_fu_248_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln31_fu_160_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_86 <= add_ln31_fu_166_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_86 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    n_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln31_fu_160_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    n_fu_78 <= add_ln33_fu_223_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    n_fu_78 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                empty_reg_432 <= empty_fu_259_p1;
                empty_reg_432_pp0_iter10_reg <= empty_reg_432;
                icmp_ln33_reg_405_pp0_iter2_reg <= icmp_ln33_reg_405_pp0_iter1_reg;
                icmp_ln33_reg_405_pp0_iter3_reg <= icmp_ln33_reg_405_pp0_iter2_reg;
                icmp_ln33_reg_405_pp0_iter4_reg <= icmp_ln33_reg_405_pp0_iter3_reg;
                icmp_ln33_reg_405_pp0_iter5_reg <= icmp_ln33_reg_405_pp0_iter4_reg;
                icmp_ln33_reg_405_pp0_iter6_reg <= icmp_ln33_reg_405_pp0_iter5_reg;
                icmp_ln33_reg_405_pp0_iter7_reg <= icmp_ln33_reg_405_pp0_iter6_reg;
                icmp_ln33_reg_405_pp0_iter8_reg <= icmp_ln33_reg_405_pp0_iter7_reg;
                or_ln34_reg_417_pp0_iter10_reg <= or_ln34_reg_417_pp0_iter9_reg;
                or_ln34_reg_417_pp0_iter11_reg <= or_ln34_reg_417_pp0_iter10_reg;
                or_ln34_reg_417_pp0_iter2_reg <= or_ln34_reg_417_pp0_iter1_reg;
                or_ln34_reg_417_pp0_iter3_reg <= or_ln34_reg_417_pp0_iter2_reg;
                or_ln34_reg_417_pp0_iter4_reg <= or_ln34_reg_417_pp0_iter3_reg;
                or_ln34_reg_417_pp0_iter5_reg <= or_ln34_reg_417_pp0_iter4_reg;
                or_ln34_reg_417_pp0_iter6_reg <= or_ln34_reg_417_pp0_iter5_reg;
                or_ln34_reg_417_pp0_iter7_reg <= or_ln34_reg_417_pp0_iter6_reg;
                or_ln34_reg_417_pp0_iter8_reg <= or_ln34_reg_417_pp0_iter7_reg;
                or_ln34_reg_417_pp0_iter9_reg <= or_ln34_reg_417_pp0_iter8_reg;
                select_ln31_1_reg_422 <= select_ln31_1_fu_248_p3;
                select_ln31_1_reg_422_pp0_iter10_reg <= select_ln31_1_reg_422;
                select_ln31_reg_410_pp0_iter10_reg <= select_ln31_reg_410_pp0_iter9_reg;
                select_ln31_reg_410_pp0_iter2_reg <= select_ln31_reg_410_pp0_iter1_reg;
                select_ln31_reg_410_pp0_iter3_reg <= select_ln31_reg_410_pp0_iter2_reg;
                select_ln31_reg_410_pp0_iter4_reg <= select_ln31_reg_410_pp0_iter3_reg;
                select_ln31_reg_410_pp0_iter5_reg <= select_ln31_reg_410_pp0_iter4_reg;
                select_ln31_reg_410_pp0_iter6_reg <= select_ln31_reg_410_pp0_iter5_reg;
                select_ln31_reg_410_pp0_iter7_reg <= select_ln31_reg_410_pp0_iter6_reg;
                select_ln31_reg_410_pp0_iter8_reg <= select_ln31_reg_410_pp0_iter7_reg;
                select_ln31_reg_410_pp0_iter9_reg <= select_ln31_reg_410_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln33_reg_405 <= icmp_ln33_fu_175_p2;
                icmp_ln33_reg_405_pp0_iter1_reg <= icmp_ln33_reg_405;
                or_ln34_reg_417 <= or_ln34_fu_211_p2;
                or_ln34_reg_417_pp0_iter1_reg <= or_ln34_reg_417;
                select_ln31_reg_410 <= select_ln31_fu_181_p3;
                select_ln31_reg_410_pp0_iter1_reg <= select_ln31_reg_410;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv0_address0 <= zext_ln34_1_fu_338_p1(11 - 1 downto 0);
    OutConv0_ce0 <= OutConv0_ce0_local;

    OutConv0_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            OutConv0_ce0_local <= ap_const_logic_1;
        else 
            OutConv0_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv1_1_address0 <= zext_ln34_fu_343_p1(9 - 1 downto 0);
    OutPadConv1_1_ce0 <= OutPadConv1_1_ce0_local;

    OutPadConv1_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            OutPadConv1_1_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv1_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv1_1_d0 <= storemerge555_fu_353_p3;
    OutPadConv1_1_we0 <= OutPadConv1_1_we0_local;

    OutPadConv1_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, trunc_ln34_fu_349_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (trunc_ln34_fu_349_p1 = ap_const_lv2_1))) then 
            OutPadConv1_1_we0_local <= ap_const_logic_1;
        else 
            OutPadConv1_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv1_2_address0 <= zext_ln34_fu_343_p1(9 - 1 downto 0);
    OutPadConv1_2_ce0 <= OutPadConv1_2_ce0_local;

    OutPadConv1_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            OutPadConv1_2_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv1_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv1_2_d0 <= storemerge555_fu_353_p3;
    OutPadConv1_2_we0 <= OutPadConv1_2_we0_local;

    OutPadConv1_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, trunc_ln34_fu_349_p1)
    begin
        if ((not((trunc_ln34_fu_349_p1 = ap_const_lv2_0)) and not((trunc_ln34_fu_349_p1 = ap_const_lv2_1)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            OutPadConv1_2_we0_local <= ap_const_logic_1;
        else 
            OutPadConv1_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv1_address0 <= zext_ln34_fu_343_p1(9 - 1 downto 0);
    OutPadConv1_ce0 <= OutPadConv1_ce0_local;

    OutPadConv1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            OutPadConv1_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv1_d0 <= storemerge555_fu_353_p3;
    OutPadConv1_we0 <= OutPadConv1_we0_local;

    OutPadConv1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, trunc_ln34_fu_349_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (trunc_ln34_fu_349_p1 = ap_const_lv2_0))) then 
            OutPadConv1_we0_local <= ap_const_logic_1;
        else 
            OutPadConv1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln31_1_fu_242_p2 <= std_logic_vector(unsigned(c_fu_82) + unsigned(ap_const_lv3_1));
    add_ln31_fu_166_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv11_1));
    add_ln33_fu_223_p2 <= std_logic_vector(unsigned(select_ln31_fu_181_p3) + unsigned(ap_const_lv9_1));
    add_ln34_1_fu_322_p2 <= std_logic_vector(unsigned(zext_ln33_1_fu_296_p1) + unsigned(ap_const_lv10_3FE));
    add_ln34_2_fu_332_p2 <= std_logic_vector(signed(sext_ln34_fu_328_p1) + signed(p_cast44_cast_fu_292_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln31_fu_160_p2)
    begin
        if (((icmp_ln31_fu_160_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_86;
        end if; 
    end process;


    ap_sig_allocacmp_n_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, n_fu_78, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_n_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_n_load <= n_fu_78;
        end if; 
    end process;

    empty_206_fu_286_p2 <= std_logic_vector(unsigned(p_shl_fu_268_p3) + unsigned(p_shl6_fu_282_p1));
    empty_fu_259_p1 <= select_ln31_1_fu_248_p3(2 - 1 downto 0);
    grp_fu_217_p1 <= ap_const_lv9_3(3 - 1 downto 0);
    grp_fu_371_p0 <= ap_const_lv9_6C(7 - 1 downto 0);
    grp_fu_371_p1 <= grp_fu_371_p10(3 - 1 downto 0);
    grp_fu_371_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_1_fu_248_p3),9));
    grp_fu_371_p2 <= grp_fu_371_p20(8 - 1 downto 0);
    grp_fu_371_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_308_p4),9));
    icmp_ln31_fu_160_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv11_510) else "0";
    icmp_ln33_fu_175_p2 <= "1" when (ap_sig_allocacmp_n_load = ap_const_lv9_144) else "0";
    icmp_ln34_1_fu_205_p2 <= "1" when (unsigned(select_ln31_fu_181_p3) > unsigned(ap_const_lv9_141)) else "0";
    icmp_ln34_fu_199_p2 <= "1" when (tmp_19_fu_189_p4 = ap_const_lv8_0) else "0";
    mul_ln34_fu_302_p0 <= mul_ln34_fu_302_p00(9 - 1 downto 0);
    mul_ln34_fu_302_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_reg_410_pp0_iter10_reg),19));
    mul_ln34_fu_302_p1 <= ap_const_lv19_2AB(11 - 1 downto 0);
    or_ln34_fu_211_p2 <= (icmp_ln34_fu_199_p2 or icmp_ln34_1_fu_205_p2);
    p_cast44_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_206_fu_286_p2),11));
    p_shl6_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_275_p3),10));
    p_shl_fu_268_p3 <= (empty_reg_432_pp0_iter10_reg & ap_const_lv8_0);
    select_ln31_1_fu_248_p3 <= 
        add_ln31_1_fu_242_p2 when (icmp_ln33_reg_405_pp0_iter8_reg(0) = '1') else 
        c_fu_82;
    select_ln31_fu_181_p3 <= 
        ap_const_lv9_0 when (icmp_ln33_fu_175_p2(0) = '1') else 
        ap_sig_allocacmp_n_load;
        sext_ln34_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln34_1_fu_322_p2),11));

    storemerge555_fu_353_p3 <= 
        ap_const_lv16_0 when (or_ln34_reg_417_pp0_iter11_reg(0) = '1') else 
        OutConv0_q0;
    tmp_19_fu_189_p4 <= select_ln31_fu_181_p3(8 downto 1);
    tmp_20_fu_308_p4 <= mul_ln34_fu_302_p2(18 downto 11);
    tmp_fu_275_p3 <= (select_ln31_1_reg_422_pp0_iter10_reg & ap_const_lv6_0);
    trunc_ln34_fu_349_p1 <= grp_fu_217_p2(2 - 1 downto 0);
    zext_ln33_1_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_reg_410_pp0_iter10_reg),10));
    zext_ln34_1_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln34_2_fu_332_p2),64));
    zext_ln34_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_371_p3),64));
end behav;
