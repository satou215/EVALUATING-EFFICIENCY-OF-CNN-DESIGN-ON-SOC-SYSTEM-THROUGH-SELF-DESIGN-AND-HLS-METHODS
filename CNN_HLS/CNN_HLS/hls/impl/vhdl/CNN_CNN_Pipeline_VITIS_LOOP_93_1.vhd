-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_VITIS_LOOP_93_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutPool3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_ce0 : OUT STD_LOGIC;
    OutPool3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_ce1 : OUT STD_LOGIC;
    OutPool3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_1_ce0 : OUT STD_LOGIC;
    OutPool3_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_1_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_1_ce1 : OUT STD_LOGIC;
    OutPool3_1_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_2_ce0 : OUT STD_LOGIC;
    OutPool3_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_2_ce1 : OUT STD_LOGIC;
    OutPool3_2_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_3_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_3_ce0 : OUT STD_LOGIC;
    OutPool3_3_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_3_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_3_ce1 : OUT STD_LOGIC;
    OutPool3_3_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_4_ce0 : OUT STD_LOGIC;
    OutPool3_4_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_4_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_4_ce1 : OUT STD_LOGIC;
    OutPool3_4_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_5_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_5_ce0 : OUT STD_LOGIC;
    OutPool3_5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_5_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_5_ce1 : OUT STD_LOGIC;
    OutPool3_5_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_6_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_6_ce0 : OUT STD_LOGIC;
    OutPool3_6_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_6_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_6_ce1 : OUT STD_LOGIC;
    OutPool3_6_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_7_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_7_ce0 : OUT STD_LOGIC;
    OutPool3_7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_7_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_7_ce1 : OUT STD_LOGIC;
    OutPool3_7_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_8_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_8_ce0 : OUT STD_LOGIC;
    OutPool3_8_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_8_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_8_ce1 : OUT STD_LOGIC;
    OutPool3_8_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_9_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_9_ce0 : OUT STD_LOGIC;
    OutPool3_9_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool3_9_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    OutPool3_9_ce1 : OUT STD_LOGIC;
    OutPool3_9_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutGlobalAverPool1D_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    OutGlobalAverPool1D_ce0 : OUT STD_LOGIC;
    OutGlobalAverPool1D_we0 : OUT STD_LOGIC;
    OutGlobalAverPool1D_d0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_VITIS_LOOP_93_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv34_1999A : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000011001100110011010";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln93_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_reg_605 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_605_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal avg_1_fu_516_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal avg_1_reg_714 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_719 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln96_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln96_1_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal hs_fu_70 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln93_1_fu_351_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (5 downto 0);
    signal OutPool3_ce1_local : STD_LOGIC;
    signal OutPool3_ce0_local : STD_LOGIC;
    signal OutPool3_1_ce1_local : STD_LOGIC;
    signal OutPool3_1_ce0_local : STD_LOGIC;
    signal OutPool3_2_ce1_local : STD_LOGIC;
    signal OutPool3_2_ce0_local : STD_LOGIC;
    signal OutPool3_3_ce1_local : STD_LOGIC;
    signal OutPool3_3_ce0_local : STD_LOGIC;
    signal OutPool3_4_ce1_local : STD_LOGIC;
    signal OutPool3_4_ce0_local : STD_LOGIC;
    signal OutPool3_5_ce1_local : STD_LOGIC;
    signal OutPool3_5_ce0_local : STD_LOGIC;
    signal OutPool3_6_ce1_local : STD_LOGIC;
    signal OutPool3_6_ce0_local : STD_LOGIC;
    signal OutPool3_7_ce1_local : STD_LOGIC;
    signal OutPool3_7_ce0_local : STD_LOGIC;
    signal OutPool3_8_ce1_local : STD_LOGIC;
    signal OutPool3_8_ce0_local : STD_LOGIC;
    signal OutPool3_9_ce1_local : STD_LOGIC;
    signal OutPool3_9_ce0_local : STD_LOGIC;
    signal OutGlobalAverPool1D_we0_local : STD_LOGIC;
    signal select_ln98_1_fu_590_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal OutGlobalAverPool1D_ce0_local : STD_LOGIC;
    signal shl_ln96_fu_361_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln96_fu_357_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln2_fu_381_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln96_1_fu_414_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_2_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_fu_408_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_5_fu_438_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_6_fu_444_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_4_fu_432_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_7_fu_450_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_3_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_10_fu_468_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_11_fu_474_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_9_fu_462_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_14_fu_492_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_15_fu_498_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_13_fu_486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_16_fu_504_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_12_fu_480_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_17_fu_510_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln96_8_fu_456_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln98_fu_537_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln98_fu_537_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal trunc_ln98_fu_543_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sub_ln98_fu_547_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_246_cast_fu_553_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_247_cast_fu_563_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln98_fu_573_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln98_fu_580_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln98_1_fu_584_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mul_16s_18ns_34_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_18ns_34_1_1_U402 : component CNN_mul_16s_18ns_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => avg_1_reg_714,
        din1 => mul_ln98_fu_537_p1,
        dout => mul_ln98_fu_537_p2);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    hs_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln93_fu_345_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    hs_fu_70 <= add_ln93_1_fu_351_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    hs_fu_70 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                avg_1_reg_714 <= avg_1_fu_516_p2;
                i_reg_605 <= ap_sig_allocacmp_i;
                i_reg_605_pp0_iter1_reg <= i_reg_605;
                tmp_reg_719 <= avg_1_fu_516_p2(15 downto 15);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutGlobalAverPool1D_address0 <= zext_ln93_fu_530_p1(5 - 1 downto 0);
    OutGlobalAverPool1D_ce0 <= OutGlobalAverPool1D_ce0_local;

    OutGlobalAverPool1D_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            OutGlobalAverPool1D_ce0_local <= ap_const_logic_1;
        else 
            OutGlobalAverPool1D_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutGlobalAverPool1D_d0 <= select_ln98_1_fu_590_p3;
    OutGlobalAverPool1D_we0 <= OutGlobalAverPool1D_we0_local;

    OutGlobalAverPool1D_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            OutGlobalAverPool1D_we0_local <= ap_const_logic_1;
        else 
            OutGlobalAverPool1D_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_1_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_1_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_1_ce0 <= OutPool3_1_ce0_local;

    OutPool3_1_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_1_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_1_ce1 <= OutPool3_1_ce1_local;

    OutPool3_1_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_1_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_1_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_2_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_2_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_2_ce0 <= OutPool3_2_ce0_local;

    OutPool3_2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_2_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_2_ce1 <= OutPool3_2_ce1_local;

    OutPool3_2_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_2_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_3_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_3_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_3_ce0 <= OutPool3_3_ce0_local;

    OutPool3_3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_3_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_3_ce1 <= OutPool3_3_ce1_local;

    OutPool3_3_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_3_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_4_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_4_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_4_ce0 <= OutPool3_4_ce0_local;

    OutPool3_4_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_4_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_4_ce1 <= OutPool3_4_ce1_local;

    OutPool3_4_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_4_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_4_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_5_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_5_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_5_ce0 <= OutPool3_5_ce0_local;

    OutPool3_5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_5_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_5_ce1 <= OutPool3_5_ce1_local;

    OutPool3_5_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_5_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_5_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_6_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_6_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_6_ce0 <= OutPool3_6_ce0_local;

    OutPool3_6_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_6_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_6_ce1 <= OutPool3_6_ce1_local;

    OutPool3_6_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_6_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_6_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_7_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_7_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_7_ce0 <= OutPool3_7_ce0_local;

    OutPool3_7_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_7_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_7_ce1 <= OutPool3_7_ce1_local;

    OutPool3_7_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_7_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_7_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_8_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_8_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_8_ce0 <= OutPool3_8_ce0_local;

    OutPool3_8_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_8_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_8_ce1 <= OutPool3_8_ce1_local;

    OutPool3_8_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_8_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_8_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_9_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_9_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_9_ce0 <= OutPool3_9_ce0_local;

    OutPool3_9_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_9_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_9_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_9_ce1 <= OutPool3_9_ce1_local;

    OutPool3_9_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_9_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_9_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_address0 <= zext_ln96_1_fu_389_p1(6 - 1 downto 0);
    OutPool3_address1 <= zext_ln96_fu_367_p1(6 - 1 downto 0);
    OutPool3_ce0 <= OutPool3_ce0_local;

    OutPool3_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_ce0_local <= ap_const_logic_1;
        else 
            OutPool3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool3_ce1 <= OutPool3_ce1_local;

    OutPool3_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool3_ce1_local <= ap_const_logic_1;
        else 
            OutPool3_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln93_1_fu_351_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv6_1));
    add_ln96_10_fu_468_p2 <= std_logic_vector(unsigned(OutPool3_3_q0) + unsigned(OutPool3_4_q0));
    add_ln96_11_fu_474_p2 <= std_logic_vector(unsigned(add_ln96_10_fu_468_p2) + unsigned(OutPool3_2_q0));
    add_ln96_12_fu_480_p2 <= std_logic_vector(unsigned(add_ln96_11_fu_474_p2) + unsigned(add_ln96_9_fu_462_p2));
    add_ln96_13_fu_486_p2 <= std_logic_vector(unsigned(OutPool3_5_q0) + unsigned(OutPool3_6_q0));
    add_ln96_14_fu_492_p2 <= std_logic_vector(unsigned(OutPool3_8_q0) + unsigned(OutPool3_9_q0));
    add_ln96_15_fu_498_p2 <= std_logic_vector(unsigned(add_ln96_14_fu_492_p2) + unsigned(OutPool3_7_q0));
    add_ln96_16_fu_504_p2 <= std_logic_vector(unsigned(add_ln96_15_fu_498_p2) + unsigned(add_ln96_13_fu_486_p2));
    add_ln96_17_fu_510_p2 <= std_logic_vector(unsigned(add_ln96_16_fu_504_p2) + unsigned(add_ln96_12_fu_480_p2));
    add_ln96_1_fu_414_p2 <= std_logic_vector(unsigned(OutPool3_3_q1) + unsigned(OutPool3_4_q1));
    add_ln96_2_fu_420_p2 <= std_logic_vector(unsigned(add_ln96_1_fu_414_p2) + unsigned(OutPool3_2_q1));
    add_ln96_3_fu_426_p2 <= std_logic_vector(unsigned(add_ln96_2_fu_420_p2) + unsigned(add_ln96_fu_408_p2));
    add_ln96_4_fu_432_p2 <= std_logic_vector(unsigned(OutPool3_5_q1) + unsigned(OutPool3_6_q1));
    add_ln96_5_fu_438_p2 <= std_logic_vector(unsigned(OutPool3_8_q1) + unsigned(OutPool3_9_q1));
    add_ln96_6_fu_444_p2 <= std_logic_vector(unsigned(add_ln96_5_fu_438_p2) + unsigned(OutPool3_7_q1));
    add_ln96_7_fu_450_p2 <= std_logic_vector(unsigned(add_ln96_6_fu_444_p2) + unsigned(add_ln96_4_fu_432_p2));
    add_ln96_8_fu_456_p2 <= std_logic_vector(unsigned(add_ln96_7_fu_450_p2) + unsigned(add_ln96_3_fu_426_p2));
    add_ln96_9_fu_462_p2 <= std_logic_vector(unsigned(OutPool3_q0) + unsigned(OutPool3_1_q0));
    add_ln96_fu_408_p2 <= std_logic_vector(unsigned(OutPool3_1_q1) + unsigned(OutPool3_q1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln93_fu_345_p2)
    begin
        if (((icmp_ln93_fu_345_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, hs_fu_70, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i <= hs_fu_70;
        end if; 
    end process;

    avg_1_fu_516_p2 <= std_logic_vector(unsigned(add_ln96_17_fu_510_p2) + unsigned(add_ln96_8_fu_456_p2));
    icmp_ln93_fu_345_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv6_20) else "0";
    mul_ln98_fu_537_p1 <= ap_const_lv34_1999A(18 - 1 downto 0);
    or_ln2_fu_381_p3 <= (trunc_ln96_fu_357_p1 & ap_const_lv1_1);
    select_ln98_1_fu_590_p3 <= 
        sub_ln98_1_fu_584_p2 when (tmp_reg_719(0) = '1') else 
        zext_ln98_fu_580_p1;
    select_ln98_fu_573_p3 <= 
        tmp_246_cast_fu_553_p4 when (tmp_reg_719(0) = '1') else 
        tmp_247_cast_fu_563_p4;
    shl_ln96_fu_361_p2 <= std_logic_vector(shift_left(unsigned(ap_sig_allocacmp_i),to_integer(unsigned('0' & ap_const_lv6_1(6-1 downto 0)))));
    sub_ln98_1_fu_584_p2 <= std_logic_vector(unsigned(ap_const_lv12_0) - unsigned(zext_ln98_fu_580_p1));
    sub_ln98_fu_547_p2 <= std_logic_vector(unsigned(ap_const_lv33_0) - unsigned(trunc_ln98_fu_543_p1));
    tmp_246_cast_fu_553_p4 <= sub_ln98_fu_547_p2(31 downto 21);
    tmp_247_cast_fu_563_p4 <= mul_ln98_fu_537_p2(31 downto 21);
    trunc_ln96_fu_357_p1 <= ap_sig_allocacmp_i(5 - 1 downto 0);
    trunc_ln98_fu_543_p1 <= mul_ln98_fu_537_p2(33 - 1 downto 0);
    zext_ln93_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_605_pp0_iter1_reg),64));
    zext_ln96_1_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln2_fu_381_p3),64));
    zext_ln96_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln96_fu_361_p2),64));
    zext_ln98_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln98_fu_573_p3),12));
end behav;
