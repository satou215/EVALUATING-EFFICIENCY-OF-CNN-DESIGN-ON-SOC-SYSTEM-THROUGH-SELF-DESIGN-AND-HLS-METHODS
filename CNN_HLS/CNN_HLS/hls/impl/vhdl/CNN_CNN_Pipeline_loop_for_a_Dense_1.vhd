-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_a_Dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    Weights_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce1 : OUT STD_LOGIC;
    Weights_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_20 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_22 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_24 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_26 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_28 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_30 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_32 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_34 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_36 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_38 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln21_39 : IN STD_LOGIC_VECTOR (15 downto 0);
    out_Dense_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    out_Dense_ce0 : OUT STD_LOGIC;
    out_Dense_we0 : OUT STD_LOGIC;
    out_Dense_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_a_Dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv14_2AD5 : STD_LOGIC_VECTOR (13 downto 0) := "10101011010101";
    constant ap_const_lv14_2ADA : STD_LOGIC_VECTOR (13 downto 0) := "10101011011010";
    constant ap_const_lv10_2AD : STD_LOGIC_VECTOR (9 downto 0) := "1010101101";
    constant ap_const_lv14_2ADF : STD_LOGIC_VECTOR (13 downto 0) := "10101011011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv14_2AE4 : STD_LOGIC_VECTOR (13 downto 0) := "10101011100100";
    constant ap_const_lv14_2AE9 : STD_LOGIC_VECTOR (13 downto 0) := "10101011101001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv14_2AEE : STD_LOGIC_VECTOR (13 downto 0) := "10101011101110";
    constant ap_const_lv14_2AF3 : STD_LOGIC_VECTOR (13 downto 0) := "10101011110011";
    constant ap_const_lv11_55F : STD_LOGIC_VECTOR (10 downto 0) := "10101011111";
    constant ap_const_lv14_2AFD : STD_LOGIC_VECTOR (13 downto 0) := "10101011111101";
    constant ap_const_lv14_2B02 : STD_LOGIC_VECTOR (13 downto 0) := "10101100000010";
    constant ap_const_lv14_2B07 : STD_LOGIC_VECTOR (13 downto 0) := "10101100000111";
    constant ap_const_lv14_2B0C : STD_LOGIC_VECTOR (13 downto 0) := "10101100001100";
    constant ap_const_lv14_2B11 : STD_LOGIC_VECTOR (13 downto 0) := "10101100010001";
    constant ap_const_lv14_2B16 : STD_LOGIC_VECTOR (13 downto 0) := "10101100010110";
    constant ap_const_lv14_2B1B : STD_LOGIC_VECTOR (13 downto 0) := "10101100011011";
    constant ap_const_lv9_159 : STD_LOGIC_VECTOR (8 downto 0) := "101011001";
    constant ap_const_lv14_2B25 : STD_LOGIC_VECTOR (13 downto 0) := "10101100100101";
    constant ap_const_lv14_2B2A : STD_LOGIC_VECTOR (13 downto 0) := "10101100101010";
    constant ap_const_lv14_2B2F : STD_LOGIC_VECTOR (13 downto 0) := "10101100101111";
    constant ap_const_lv14_2B34 : STD_LOGIC_VECTOR (13 downto 0) := "10101100110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal icmp_ln17_reg_1492 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage10 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_448 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal reg_453 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal reg_458 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal reg_463 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal sext_ln21_39_cast_fu_468_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_39_cast_reg_1384 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln21_38_cast_fu_472_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_38_cast_reg_1389 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_36_cast_fu_476_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_36_cast_reg_1394 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_34_cast_fu_480_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_34_cast_reg_1399 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_32_cast_fu_484_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_32_cast_reg_1404 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_30_cast_fu_488_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_30_cast_reg_1409 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_28_cast_fu_492_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_28_cast_reg_1414 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_26_cast_fu_496_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_26_cast_reg_1419 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_24_cast_fu_500_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_24_cast_reg_1424 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_22_cast_fu_504_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_22_cast_reg_1429 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_20_cast_fu_508_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_20_cast_reg_1434 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_18_cast_fu_512_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_18_cast_reg_1439 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_16_cast_fu_516_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_16_cast_reg_1444 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_14_cast_fu_520_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_14_cast_reg_1449 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_12_cast_fu_524_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_12_cast_reg_1454 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_10_cast_fu_528_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_10_cast_reg_1459 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_8_cast_fu_532_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_8_cast_reg_1464 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_6_cast_fu_536_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_6_cast_reg_1469 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_4_cast_fu_540_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_4_cast_reg_1474 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_2_cast_fu_544_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln21_2_cast_reg_1479 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_1484 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1484_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln17_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln17_2_fu_568_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln17_2_reg_1496 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln17_2_reg_1496_pp0_iter1_reg : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_reg_1541 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_11_reg_1631 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_13_reg_1656 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_15_reg_1681 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_17_reg_1706 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal Weights_load_18_reg_1731 : STD_LOGIC_VECTOR (15 downto 0);
    signal Weights_load_19_reg_1736 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln21_1_fu_578_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln21_2_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln21_3_fu_624_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_4_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln21_5_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_6_fu_688_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln21_7_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_8_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln21_9_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_10_fu_772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln21_11_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_12_fu_813_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln21_13_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_14_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln21_15_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_17_fu_901_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln21_18_fu_911_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln21_19_fu_942_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln21_20_fu_952_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_fu_1200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln17_fu_1205_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_134 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln17_fu_562_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Weights_ce1_local : STD_LOGIC;
    signal Weights_address1_local : STD_LOGIC_VECTOR (13 downto 0);
    signal Weights_ce0_local : STD_LOGIC;
    signal Weights_address0_local : STD_LOGIC_VECTOR (13 downto 0);
    signal out_Dense_we0_local : STD_LOGIC;
    signal add_ln23_8_fu_1218_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_Dense_ce0_local : STD_LOGIC;
    signal add_ln21_fu_572_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_2_fu_583_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_1_cast_fu_599_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln21_cast_fu_602_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_4_fu_619_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln21_fu_633_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln21_fu_633_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln21_6_fu_652_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_8_fu_662_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_10_fu_683_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_12_fu_693_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_13_fu_703_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1225_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_703_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln21_8_cast_fu_724_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_15_fu_736_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_14_fu_746_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1233_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_746_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_17_fu_767_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_19_fu_777_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_fu_787_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1241_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_787_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_21_fu_808_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_23_fu_818_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_16_fu_828_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1249_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_828_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_25_fu_849_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_27_fu_859_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_17_fu_869_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1257_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_869_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln21_16_fu_890_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln21_17_cast_fu_893_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_30_fu_906_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_916_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1265_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_916_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln21_32_fu_937_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_34_fu_947_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_19_fu_957_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1273_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_957_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_978_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1281_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_20_fu_978_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_998_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1289_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_21_fu_998_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_1019_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1297_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_fu_1019_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_1039_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1305_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_1039_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_1060_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1313_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_24_fu_1060_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_1080_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1321_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_1080_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_1101_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1329_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_26_fu_1101_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1121_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1337_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_27_fu_1121_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_1141_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1345_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_28_fu_1141_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_1161_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1353_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_1161_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_1178_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1361_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_30_fu_1178_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln23_fu_1195_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln_fu_1209_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1369_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln_fu_1209_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1225_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1225_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1233_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1233_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1241_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1241_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1249_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1249_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1257_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1257_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1265_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1273_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1273_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1281_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1281_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1289_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1289_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1297_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1297_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1305_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1305_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1313_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1313_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1321_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1321_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1329_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1329_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1337_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1337_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1345_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1353_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1353_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1361_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1361_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1369_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1369_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0_1to2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mul_16s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_16s_24_1_1_U483 : component CNN_mul_16s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => Weights_q1,
        din1 => mul_ln21_fu_633_p1,
        dout => mul_ln21_fu_633_p2);

    mac_muladd_16s_16s_24ns_24_4_1_U484 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_q1,
        din1 => grp_fu_1225_p1,
        din2 => grp_fu_1225_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1225_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U485 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_448,
        din1 => grp_fu_1233_p1,
        din2 => grp_fu_1233_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1233_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U486 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_448,
        din1 => grp_fu_1241_p1,
        din2 => grp_fu_1241_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1241_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U487 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_448,
        din1 => grp_fu_1249_p1,
        din2 => grp_fu_1249_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1249_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U488 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_453,
        din1 => grp_fu_1257_p1,
        din2 => grp_fu_1257_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1257_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U489 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_448,
        din1 => grp_fu_1265_p1,
        din2 => grp_fu_1265_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1265_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U490 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_458,
        din1 => grp_fu_1273_p1,
        din2 => grp_fu_1273_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1273_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U491 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_453,
        din1 => grp_fu_1281_p1,
        din2 => grp_fu_1281_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1281_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U492 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_463,
        din1 => grp_fu_1289_p1,
        din2 => grp_fu_1289_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1289_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U493 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_448,
        din1 => grp_fu_1297_p1,
        din2 => grp_fu_1297_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1297_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U494 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_11_reg_1631,
        din1 => grp_fu_1305_p1,
        din2 => grp_fu_1305_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1305_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U495 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_458,
        din1 => grp_fu_1313_p1,
        din2 => grp_fu_1313_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1313_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U496 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_13_reg_1656,
        din1 => grp_fu_1321_p1,
        din2 => grp_fu_1321_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1321_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U497 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_453,
        din1 => grp_fu_1329_p1,
        din2 => grp_fu_1329_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1329_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U498 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_15_reg_1681,
        din1 => grp_fu_1337_p1,
        din2 => grp_fu_1337_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1337_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U499 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_463,
        din1 => grp_fu_1345_p1,
        din2 => grp_fu_1345_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1345_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U500 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_17_reg_1706,
        din1 => grp_fu_1353_p1,
        din2 => grp_fu_1353_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1353_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U501 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_18_reg_1731,
        din1 => grp_fu_1361_p1,
        din2 => grp_fu_1361_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1361_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U502 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => Weights_load_19_reg_1736,
        din1 => grp_fu_1369_p1,
        din2 => grp_fu_1369_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1369_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage10,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage10)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    i_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln17_fu_556_p2 = ap_const_lv1_0))) then 
                    i_fu_134 <= add_ln17_fu_562_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_134 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_448 <= Weights_q1;
            elsif ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                reg_448 <= Weights_q0;
            end if; 
        end if;
    end process;

    reg_453_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                reg_453 <= Weights_q1;
            elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                reg_453 <= Weights_q0;
            end if; 
        end if;
    end process;

    reg_458_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    reg_458 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    reg_458 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    reg_463 <= Weights_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    reg_463 <= Weights_q0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                Weights_load_11_reg_1631 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                Weights_load_13_reg_1656 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                Weights_load_15_reg_1681 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                Weights_load_17_reg_1706 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                Weights_load_18_reg_1731 <= Weights_q1;
                Weights_load_19_reg_1736 <= Weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_1484 <= ap_sig_allocacmp_i_1;
                i_1_reg_1484_pp0_iter1_reg <= i_1_reg_1484;
                icmp_ln17_reg_1492 <= icmp_ln17_fu_556_p2;
                sext_ln21_10_cast_reg_1459 <= sext_ln21_10_cast_fu_528_p1;
                sext_ln21_12_cast_reg_1454 <= sext_ln21_12_cast_fu_524_p1;
                sext_ln21_14_cast_reg_1449 <= sext_ln21_14_cast_fu_520_p1;
                sext_ln21_16_cast_reg_1444 <= sext_ln21_16_cast_fu_516_p1;
                sext_ln21_18_cast_reg_1439 <= sext_ln21_18_cast_fu_512_p1;
                sext_ln21_20_cast_reg_1434 <= sext_ln21_20_cast_fu_508_p1;
                sext_ln21_22_cast_reg_1429 <= sext_ln21_22_cast_fu_504_p1;
                sext_ln21_24_cast_reg_1424 <= sext_ln21_24_cast_fu_500_p1;
                sext_ln21_26_cast_reg_1419 <= sext_ln21_26_cast_fu_496_p1;
                sext_ln21_28_cast_reg_1414 <= sext_ln21_28_cast_fu_492_p1;
                sext_ln21_2_cast_reg_1479 <= sext_ln21_2_cast_fu_544_p1;
                sext_ln21_30_cast_reg_1409 <= sext_ln21_30_cast_fu_488_p1;
                sext_ln21_32_cast_reg_1404 <= sext_ln21_32_cast_fu_484_p1;
                sext_ln21_34_cast_reg_1399 <= sext_ln21_34_cast_fu_480_p1;
                sext_ln21_36_cast_reg_1394 <= sext_ln21_36_cast_fu_476_p1;
                sext_ln21_38_cast_reg_1389 <= sext_ln21_38_cast_fu_472_p1;
                sext_ln21_39_cast_reg_1384 <= sext_ln21_39_cast_fu_468_p1;
                sext_ln21_4_cast_reg_1474 <= sext_ln21_4_cast_fu_540_p1;
                sext_ln21_6_cast_reg_1469 <= sext_ln21_6_cast_fu_536_p1;
                sext_ln21_8_cast_reg_1464 <= sext_ln21_8_cast_fu_532_p1;
                    zext_ln17_2_reg_1496(2 downto 0) <= zext_ln17_2_fu_568_p1(2 downto 0);
                    zext_ln17_2_reg_1496_pp0_iter1_reg(2 downto 0) <= zext_ln17_2_reg_1496(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_s_reg_1541 <= mul_ln21_fu_633_p2(23 downto 8);
            end if;
        end if;
    end process;
    zext_ln17_2_reg_1496(13 downto 3) <= "00000000000";
    zext_ln17_2_reg_1496_pp0_iter1_reg(13 downto 3) <= "00000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage10_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter1_stage0, ap_idle_pp0_0to0, ap_idle_pp0_1to2, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to2 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    Weights_address0 <= Weights_address0_local;

    Weights_address0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage0, zext_ln21_2_fu_589_p1, ap_block_pp0_stage1, zext_ln21_3_fu_624_p1, ap_block_pp0_stage2, zext_ln21_5_fu_667_p1, ap_block_pp0_stage3, zext_ln21_7_fu_698_p1, ap_block_pp0_stage4, zext_ln21_9_fu_741_p1, ap_block_pp0_stage5, zext_ln21_11_fu_782_p1, ap_block_pp0_stage6, zext_ln21_13_fu_823_p1, ap_block_pp0_stage7, zext_ln21_15_fu_864_p1, ap_block_pp0_stage8, zext_ln21_18_fu_911_p1, ap_block_pp0_stage9, zext_ln21_20_fu_952_p1, zext_ln23_fu_1200_p1, ap_block_pp0_stage10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            Weights_address0_local <= zext_ln23_fu_1200_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            Weights_address0_local <= zext_ln21_20_fu_952_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            Weights_address0_local <= zext_ln21_18_fu_911_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            Weights_address0_local <= zext_ln21_15_fu_864_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            Weights_address0_local <= zext_ln21_13_fu_823_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            Weights_address0_local <= zext_ln21_11_fu_782_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            Weights_address0_local <= zext_ln21_9_fu_741_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            Weights_address0_local <= zext_ln21_7_fu_698_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Weights_address0_local <= zext_ln21_5_fu_667_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_address0_local <= zext_ln21_3_fu_624_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Weights_address0_local <= zext_ln21_2_fu_589_p1(14 - 1 downto 0);
        else 
            Weights_address0_local <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    Weights_address1 <= Weights_address1_local;

    Weights_address1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage9, zext_ln21_1_fu_578_p1, ap_block_pp0_stage0, zext_ln21_fu_610_p1, ap_block_pp0_stage1, zext_ln21_4_fu_657_p1, ap_block_pp0_stage2, zext_ln21_6_fu_688_p1, ap_block_pp0_stage3, zext_ln21_8_fu_731_p1, ap_block_pp0_stage4, zext_ln21_10_fu_772_p1, ap_block_pp0_stage5, zext_ln21_12_fu_813_p1, ap_block_pp0_stage6, zext_ln21_14_fu_854_p1, ap_block_pp0_stage7, zext_ln21_17_fu_901_p1, ap_block_pp0_stage8, zext_ln21_19_fu_942_p1, ap_block_pp0_stage9)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            Weights_address1_local <= zext_ln21_19_fu_942_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            Weights_address1_local <= zext_ln21_17_fu_901_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            Weights_address1_local <= zext_ln21_14_fu_854_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            Weights_address1_local <= zext_ln21_12_fu_813_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            Weights_address1_local <= zext_ln21_10_fu_772_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            Weights_address1_local <= zext_ln21_8_fu_731_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            Weights_address1_local <= zext_ln21_6_fu_688_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            Weights_address1_local <= zext_ln21_4_fu_657_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Weights_address1_local <= zext_ln21_fu_610_p1(14 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Weights_address1_local <= zext_ln21_1_fu_578_p1(14 - 1 downto 0);
        else 
            Weights_address1_local <= "XXXXXXXXXXXXXX";
        end if; 
    end process;

    Weights_ce0 <= Weights_ce0_local;

    Weights_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage0_11001, ap_block_pp0_stage10_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and 
    (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            Weights_ce0_local <= ap_const_logic_1;
        else 
            Weights_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Weights_ce1 <= Weights_ce1_local;

    Weights_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter0_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and 
    (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            Weights_ce1_local <= ap_const_logic_1;
        else 
            Weights_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln17_fu_562_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    add_ln21_10_fu_683_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2AEE));
    add_ln21_12_fu_693_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2AF3));
    add_ln21_15_fu_736_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2AFD));
    add_ln21_17_fu_767_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2B02));
    add_ln21_19_fu_777_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2B07));
    add_ln21_21_fu_808_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2B0C));
    add_ln21_23_fu_818_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2B11));
    add_ln21_25_fu_849_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2B16));
    add_ln21_27_fu_859_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2B1B));
    add_ln21_2_fu_583_p2 <= std_logic_vector(unsigned(zext_ln17_2_fu_568_p1) + unsigned(ap_const_lv14_2ADA));
    add_ln21_30_fu_906_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2B25));
    add_ln21_32_fu_937_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2B2A));
    add_ln21_34_fu_947_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2B2F));
    add_ln21_4_fu_619_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2ADF));
    add_ln21_6_fu_652_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2AE4));
    add_ln21_8_fu_662_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496) + unsigned(ap_const_lv14_2AE9));
    add_ln21_fu_572_p2 <= std_logic_vector(unsigned(zext_ln17_2_fu_568_p1) + unsigned(ap_const_lv14_2AD5));
    add_ln23_8_fu_1218_p2 <= std_logic_vector(unsigned(Weights_q0) + unsigned(trunc_ln_fu_1209_p4));
    add_ln23_fu_1195_p2 <= std_logic_vector(unsigned(zext_ln17_2_reg_1496_pp0_iter1_reg) + unsigned(ap_const_lv14_2B34));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage10_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone, ap_enable_reg_pp0_iter0_reg, icmp_ln17_reg_1492)
    begin
        if (((icmp_ln17_reg_1492 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln17_reg_1492, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln17_reg_1492 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to2_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage10;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_subdone, ap_enable_reg_pp0_iter0_reg)
    begin
        if (((ap_enable_reg_pp0_iter0_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_134, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_134;
        end if; 
    end process;

    grp_fu_1225_p1 <= sext_ln21_4_cast_reg_1474(16 - 1 downto 0);
    grp_fu_1225_p2 <= (tmp_s_reg_1541 & ap_const_lv8_0);
    grp_fu_1233_p1 <= sext_ln21_6_cast_reg_1469(16 - 1 downto 0);
    grp_fu_1233_p2 <= (tmp_13_fu_703_p4 & ap_const_lv8_0);
    grp_fu_1241_p1 <= sext_ln21_8_cast_reg_1464(16 - 1 downto 0);
    grp_fu_1241_p2 <= (tmp_14_fu_746_p4 & ap_const_lv8_0);
    grp_fu_1249_p1 <= sext_ln21_10_cast_reg_1459(16 - 1 downto 0);
    grp_fu_1249_p2 <= (tmp_15_fu_787_p4 & ap_const_lv8_0);
    grp_fu_1257_p1 <= sext_ln21_12_cast_reg_1454(16 - 1 downto 0);
    grp_fu_1257_p2 <= (tmp_16_fu_828_p4 & ap_const_lv8_0);
    grp_fu_1265_p1 <= sext_ln21_14_cast_reg_1449(16 - 1 downto 0);
    grp_fu_1265_p2 <= (tmp_17_fu_869_p4 & ap_const_lv8_0);
    grp_fu_1273_p1 <= sext_ln21_16_cast_reg_1444(16 - 1 downto 0);
    grp_fu_1273_p2 <= (tmp_18_fu_916_p4 & ap_const_lv8_0);
    grp_fu_1281_p1 <= sext_ln21_18_cast_reg_1439(16 - 1 downto 0);
    grp_fu_1281_p2 <= (tmp_19_fu_957_p4 & ap_const_lv8_0);
    grp_fu_1289_p1 <= sext_ln21_20_cast_reg_1434(16 - 1 downto 0);
    grp_fu_1289_p2 <= (tmp_20_fu_978_p4 & ap_const_lv8_0);
    grp_fu_1297_p1 <= sext_ln21_22_cast_reg_1429(16 - 1 downto 0);
    grp_fu_1297_p2 <= (tmp_21_fu_998_p4 & ap_const_lv8_0);
    grp_fu_1305_p1 <= sext_ln21_24_cast_reg_1424(16 - 1 downto 0);
    grp_fu_1305_p2 <= (tmp_22_fu_1019_p4 & ap_const_lv8_0);
    grp_fu_1313_p1 <= sext_ln21_26_cast_reg_1419(16 - 1 downto 0);
    grp_fu_1313_p2 <= (tmp_23_fu_1039_p4 & ap_const_lv8_0);
    grp_fu_1321_p1 <= sext_ln21_28_cast_reg_1414(16 - 1 downto 0);
    grp_fu_1321_p2 <= (tmp_24_fu_1060_p4 & ap_const_lv8_0);
    grp_fu_1329_p1 <= sext_ln21_30_cast_reg_1409(16 - 1 downto 0);
    grp_fu_1329_p2 <= (tmp_25_fu_1080_p4 & ap_const_lv8_0);
    grp_fu_1337_p1 <= sext_ln21_32_cast_reg_1404(16 - 1 downto 0);
    grp_fu_1337_p2 <= (tmp_26_fu_1101_p4 & ap_const_lv8_0);
    grp_fu_1345_p1 <= sext_ln21_34_cast_reg_1399(16 - 1 downto 0);
    grp_fu_1345_p2 <= (tmp_27_fu_1121_p4 & ap_const_lv8_0);
    grp_fu_1353_p1 <= sext_ln21_36_cast_reg_1394(16 - 1 downto 0);
    grp_fu_1353_p2 <= (tmp_28_fu_1141_p4 & ap_const_lv8_0);
    grp_fu_1361_p1 <= sext_ln21_38_cast_reg_1389(16 - 1 downto 0);
    grp_fu_1361_p2 <= (tmp_29_fu_1161_p4 & ap_const_lv8_0);
    grp_fu_1369_p1 <= sext_ln21_39_cast_reg_1384(16 - 1 downto 0);
    grp_fu_1369_p2 <= (tmp_30_fu_1178_p4 & ap_const_lv8_0);
    i_1_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_1484),4));
    icmp_ln17_fu_556_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_5) else "0";
    mul_ln21_fu_633_p1 <= sext_ln21_2_cast_reg_1479(16 - 1 downto 0);
    out_Dense_address0 <= zext_ln17_fu_1205_p1(3 - 1 downto 0);
    out_Dense_ce0 <= out_Dense_ce0_local;

    out_Dense_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_Dense_ce0_local <= ap_const_logic_1;
        else 
            out_Dense_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    out_Dense_d0 <= add_ln23_8_fu_1218_p2;
    out_Dense_we0 <= out_Dense_we0_local;

    out_Dense_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_Dense_we0_local <= ap_const_logic_1;
        else 
            out_Dense_we0_local <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln21_10_cast_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_10),24));

        sext_ln21_12_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_12),24));

        sext_ln21_14_cast_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_14),24));

        sext_ln21_16_cast_fu_516_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_16),24));

        sext_ln21_18_cast_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_18),24));

        sext_ln21_20_cast_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_20),24));

        sext_ln21_22_cast_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_22),24));

        sext_ln21_24_cast_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_24),24));

        sext_ln21_26_cast_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_26),24));

        sext_ln21_28_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_28),24));

        sext_ln21_2_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_2),24));

        sext_ln21_30_cast_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_30),24));

        sext_ln21_32_cast_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_32),24));

        sext_ln21_34_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_34),24));

        sext_ln21_36_cast_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_36),24));

        sext_ln21_38_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_38),24));

        sext_ln21_39_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_39),24));

        sext_ln21_4_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_4),24));

        sext_ln21_6_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_6),24));

        sext_ln21_8_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln21_8),24));

    tmp_13_fu_703_p1 <= grp_fu_1225_p3;
    tmp_13_fu_703_p4 <= tmp_13_fu_703_p1(23 downto 8);
    tmp_14_fu_746_p1 <= grp_fu_1233_p3;
    tmp_14_fu_746_p4 <= tmp_14_fu_746_p1(23 downto 8);
    tmp_15_fu_787_p1 <= grp_fu_1241_p3;
    tmp_15_fu_787_p4 <= tmp_15_fu_787_p1(23 downto 8);
    tmp_16_fu_828_p1 <= grp_fu_1249_p3;
    tmp_16_fu_828_p4 <= tmp_16_fu_828_p1(23 downto 8);
    tmp_17_fu_869_p1 <= grp_fu_1257_p3;
    tmp_17_fu_869_p4 <= tmp_17_fu_869_p1(23 downto 8);
    tmp_18_fu_916_p1 <= grp_fu_1265_p3;
    tmp_18_fu_916_p4 <= tmp_18_fu_916_p1(23 downto 8);
    tmp_19_fu_957_p1 <= grp_fu_1273_p3;
    tmp_19_fu_957_p4 <= tmp_19_fu_957_p1(23 downto 8);
    tmp_20_fu_978_p1 <= grp_fu_1281_p3;
    tmp_20_fu_978_p4 <= tmp_20_fu_978_p1(23 downto 8);
    tmp_21_fu_998_p1 <= grp_fu_1289_p3;
    tmp_21_fu_998_p4 <= tmp_21_fu_998_p1(23 downto 8);
    tmp_22_fu_1019_p1 <= grp_fu_1297_p3;
    tmp_22_fu_1019_p4 <= tmp_22_fu_1019_p1(23 downto 8);
    tmp_23_fu_1039_p1 <= grp_fu_1305_p3;
    tmp_23_fu_1039_p4 <= tmp_23_fu_1039_p1(23 downto 8);
    tmp_24_fu_1060_p1 <= grp_fu_1313_p3;
    tmp_24_fu_1060_p4 <= tmp_24_fu_1060_p1(23 downto 8);
    tmp_25_fu_1080_p1 <= grp_fu_1321_p3;
    tmp_25_fu_1080_p4 <= tmp_25_fu_1080_p1(23 downto 8);
    tmp_26_fu_1101_p1 <= grp_fu_1329_p3;
    tmp_26_fu_1101_p4 <= tmp_26_fu_1101_p1(23 downto 8);
    tmp_27_fu_1121_p1 <= grp_fu_1337_p3;
    tmp_27_fu_1121_p4 <= tmp_27_fu_1121_p1(23 downto 8);
    tmp_28_fu_1141_p1 <= grp_fu_1345_p3;
    tmp_28_fu_1141_p4 <= tmp_28_fu_1141_p1(23 downto 8);
    tmp_29_fu_1161_p1 <= grp_fu_1353_p3;
    tmp_29_fu_1161_p4 <= tmp_29_fu_1161_p1(23 downto 8);
    tmp_30_fu_1178_p1 <= grp_fu_1361_p3;
    tmp_30_fu_1178_p4 <= tmp_30_fu_1178_p1(23 downto 8);
    trunc_ln_fu_1209_p1 <= grp_fu_1369_p3;
    trunc_ln_fu_1209_p4 <= trunc_ln_fu_1209_p1(23 downto 8);
    zext_ln17_2_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),14));
    zext_ln17_fu_1205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_1484_pp0_iter1_reg),64));
    zext_ln21_10_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_17_fu_767_p2),64));
    zext_ln21_11_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_19_fu_777_p2),64));
    zext_ln21_12_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_21_fu_808_p2),64));
    zext_ln21_13_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_23_fu_818_p2),64));
    zext_ln21_14_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_25_fu_849_p2),64));
    zext_ln21_15_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_27_fu_859_p2),64));
    zext_ln21_16_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_1484),5));
    zext_ln21_17_cast_fu_893_p3 <= (ap_const_lv9_159 & zext_ln21_16_fu_890_p1);
    zext_ln21_17_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln21_17_cast_fu_893_p3),64));
    zext_ln21_18_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_30_fu_906_p2),64));
    zext_ln21_19_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_32_fu_937_p2),64));
    zext_ln21_1_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_fu_572_p2),64));
    zext_ln21_20_fu_952_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_34_fu_947_p2),64));
    zext_ln21_2_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_2_fu_583_p2),64));
    zext_ln21_3_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_4_fu_619_p2),64));
    zext_ln21_4_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_6_fu_652_p2),64));
    zext_ln21_5_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_8_fu_662_p2),64));
    zext_ln21_6_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_10_fu_683_p2),64));
    zext_ln21_7_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_12_fu_693_p2),64));
    zext_ln21_8_cast_fu_724_p3 <= (ap_const_lv11_55F & i_1_reg_1484);
    zext_ln21_8_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln21_8_cast_fu_724_p3),64));
    zext_ln21_9_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln21_15_fu_736_p2),64));
    zext_ln21_cast_fu_602_p3 <= (ap_const_lv10_2AD & i_1_cast_fu_599_p1);
    zext_ln21_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln21_cast_fu_602_p3),64));
    zext_ln23_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_1195_p2),64));
end behav;
