-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_channel_pool_2_loop_for_weight_pool_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    OutConv5_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv5_ce0 : OUT STD_LOGIC;
    OutConv5_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutConv5_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv5_ce1 : OUT STD_LOGIC;
    OutConv5_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPool2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    OutPool2_ce0 : OUT STD_LOGIC;
    OutPool2_we0 : OUT STD_LOGIC;
    OutPool2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_channel_pool_2_loop_for_weight_pool_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv16_F600 : STD_LOGIC_VECTOR (15 downto 0) := "1111011000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln52_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln63_fu_288_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln63_reg_382 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln60_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln60_1_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln64_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_fu_66 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal add_ln65_fu_294_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_y_load : STD_LOGIC_VECTOR (5 downto 0);
    signal z_fu_70 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln52_1_fu_172_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_z_load : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten106_fu_74 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln52_fu_140_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_indvar_flatten106_load : STD_LOGIC_VECTOR (9 downto 0);
    signal OutConv5_ce1_local : STD_LOGIC;
    signal OutConv5_ce0_local : STD_LOGIC;
    signal OutPool2_we0_local : STD_LOGIC;
    signal max_2_fu_335_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutPool2_ce0_local : STD_LOGIC;
    signal icmp_ln55_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln52_1_fu_166_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_188_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_fu_180_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_fu_196_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_214_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_206_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_fu_222_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_200_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_232_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln52_fu_158_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_254_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln59_fu_262_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln59_fu_266_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_3_fu_242_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln59_1_fu_277_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln55_fu_250_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_193_fu_226_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln61_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_fu_321_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln61_1_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten106_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten106_fu_74 <= add_ln52_fu_140_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten106_fu_74 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    y_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    y_fu_66 <= add_ln65_fu_294_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_66 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    z_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln52_fu_134_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    z_fu_70 <= select_ln52_1_fu_172_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    z_fu_70 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln63_reg_382 <= add_ln63_fu_288_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv5_address0 <= zext_ln60_1_fu_283_p1(11 - 1 downto 0);
    OutConv5_address1 <= zext_ln60_fu_272_p1(11 - 1 downto 0);
    OutConv5_ce0 <= OutConv5_ce0_local;

    OutConv5_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv5_ce0_local <= ap_const_logic_1;
        else 
            OutConv5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutConv5_ce1 <= OutConv5_ce1_local;

    OutConv5_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutConv5_ce1_local <= ap_const_logic_1;
        else 
            OutConv5_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool2_address0 <= zext_ln64_fu_344_p1(10 - 1 downto 0);
    OutPool2_ce0 <= OutPool2_ce0_local;

    OutPool2_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool2_ce0_local <= ap_const_logic_1;
        else 
            OutPool2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPool2_d0 <= max_2_fu_335_p3;
    OutPool2_we0 <= OutPool2_we0_local;

    OutPool2_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            OutPool2_we0_local <= ap_const_logic_1;
        else 
            OutPool2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln52_1_fu_166_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_z_load) + unsigned(ap_const_lv5_1));
    add_ln52_fu_140_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten106_load) + unsigned(ap_const_lv10_1));
    add_ln59_1_fu_277_p2 <= std_logic_vector(unsigned(zext_ln59_fu_262_p1) + unsigned(tmp_3_fu_242_p3));
    add_ln59_fu_266_p2 <= std_logic_vector(unsigned(zext_ln59_fu_262_p1) + unsigned(empty_fu_200_p2));
    add_ln63_fu_288_p2 <= std_logic_vector(unsigned(zext_ln55_fu_250_p1) + unsigned(empty_193_fu_226_p2));
    add_ln65_fu_294_p2 <= std_logic_vector(unsigned(select_ln52_fu_158_p3) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln52_fu_134_p2)
    begin
        if (((icmp_ln52_fu_134_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten106_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten106_fu_74)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten106_load <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_indvar_flatten106_load <= indvar_flatten106_fu_74;
        end if; 
    end process;


    ap_sig_allocacmp_y_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, y_fu_66, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_y_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_y_load <= y_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_z_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, z_fu_70)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_z_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_z_load <= z_fu_70;
        end if; 
    end process;

    empty_193_fu_226_p2 <= std_logic_vector(unsigned(p_shl_fu_206_p3) + unsigned(p_shl1_fu_222_p1));
    empty_fu_200_p2 <= std_logic_vector(unsigned(p_shl2_fu_180_p3) + unsigned(p_shl3_fu_196_p1));
    icmp_ln52_fu_134_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten106_load = ap_const_lv10_280) else "0";
    icmp_ln55_fu_152_p2 <= "1" when (ap_sig_allocacmp_y_load = ap_const_lv6_28) else "0";
    icmp_ln61_1_fu_329_p2 <= "1" when (signed(OutConv5_q0) > signed(max_fu_321_p3)) else "0";
    icmp_ln61_fu_315_p2 <= "1" when (signed(OutConv5_q1) > signed(ap_const_lv16_F600)) else "0";
    max_2_fu_335_p3 <= 
        OutConv5_q0 when (icmp_ln61_1_fu_329_p2(0) = '1') else 
        max_fu_321_p3;
    max_fu_321_p3 <= 
        OutConv5_q1 when (icmp_ln61_fu_315_p2(0) = '1') else 
        ap_const_lv16_F600;
    p_shl1_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_214_p3),10));
    p_shl2_fu_180_p3 <= (select_ln52_1_fu_172_p3 & ap_const_lv6_0);
    p_shl3_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_188_p3),11));
    p_shl_fu_206_p3 <= (select_ln52_1_fu_172_p3 & ap_const_lv5_0);
    select_ln52_1_fu_172_p3 <= 
        add_ln52_1_fu_166_p2 when (icmp_ln55_fu_152_p2(0) = '1') else 
        ap_sig_allocacmp_z_load;
    select_ln52_fu_158_p3 <= 
        ap_const_lv6_0 when (icmp_ln55_fu_152_p2(0) = '1') else 
        ap_sig_allocacmp_y_load;
    tmp_3_fu_242_p3 <= (tmp_s_fu_232_p4 & ap_const_lv1_1);
    tmp_4_fu_214_p3 <= (select_ln52_1_fu_172_p3 & ap_const_lv3_0);
    tmp_5_fu_254_p3 <= (select_ln52_fu_158_p3 & ap_const_lv1_0);
    tmp_fu_188_p3 <= (select_ln52_1_fu_172_p3 & ap_const_lv4_0);
    tmp_s_fu_232_p4 <= empty_fu_200_p2(10 downto 1);
    zext_ln55_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln52_fu_158_p3),10));
    zext_ln59_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_254_p3),11));
    zext_ln60_1_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln59_1_fu_277_p2),64));
    zext_ln60_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln59_fu_266_p2),64));
    zext_ln64_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_reg_382),64));
end behav;
