-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity CNN_CNN_Pipeline_loop_for_ap_7_loop_for_fc_7_loop_for_fa_7 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_cast125 : IN STD_LOGIC_VECTOR (12 downto 0);
    Weights_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    Weights_ce0 : OUT STD_LOGIC;
    Weights_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    OutPadConv7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutPadConv7_ce0 : OUT STD_LOGIC;
    OutPadConv7_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i16_i86_i437 : IN STD_LOGIC_VECTOR (15 downto 0);
    mul_ln199 : IN STD_LOGIC_VECTOR (10 downto 0);
    OutConv7_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    OutConv7_ce0 : OUT STD_LOGIC;
    OutConv7_we0 : OUT STD_LOGIC;
    OutConv7_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    Weights_load_133 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of CNN_CNN_Pipeline_loop_for_ap_7_loop_for_fc_7_loop_for_fa_7 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1900 : STD_LOGIC_VECTOR (12 downto 0) := "1100100000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv13_141C : STD_LOGIC_VECTOR (12 downto 0) := "1010000011100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv11_2C : STD_LOGIC_VECTOR (10 downto 0) := "00000101100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln199_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal conv_i_i16_i86_i437_cast_fu_181_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv_i_i16_i86_i437_cast_reg_616 : STD_LOGIC_VECTOR (16 downto 0);
    signal icmp_ln202_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_reg_625_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_reg_625_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_reg_625_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_reg_625_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_reg_625_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln199_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln199_reg_631 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln199_reg_631_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln199_reg_631_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln199_reg_631_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln199_reg_631_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln199_reg_631_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_mid2_fu_283_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_mid2_reg_636 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_mid2_reg_636_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_mid2_reg_636_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln202_fu_291_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln202_reg_642 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln202_reg_642_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln202_reg_642_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln204_1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_1_reg_653 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_1_reg_653_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_1_reg_653_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_1_reg_653_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_1_reg_653_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_1_reg_653_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln204_1_reg_653_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_657 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_657_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_657_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_657_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_657_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_657_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_reg_657_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln199_1_fu_364_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln199_1_reg_661 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln199_1_reg_661_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln199_1_reg_661_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln199_1_reg_661_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln199_1_reg_661_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln205_4_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln205_1_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln207_fu_517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal s_fu_94 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal s_1_fu_486_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_s_load : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_98 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln204_fu_303_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_102 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten154_fu_106 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    signal select_ln202_1_fu_327_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten154_load : STD_LOGIC_VECTOR (8 downto 0);
    signal y_fu_110 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal indvar_flatten174_fu_114 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal add_ln199_fu_227_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_sig_allocacmp_indvar_flatten174_load : STD_LOGIC_VECTOR (12 downto 0);
    signal Weights_ce0_local : STD_LOGIC;
    signal OutPadConv7_ce0_local : STD_LOGIC;
    signal OutConv7_we0_local : STD_LOGIC;
    signal select_ln207_fu_527_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal OutConv7_ce0_local : STD_LOGIC;
    signal icmp_ln204_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln199_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln199_fu_245_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln202_fu_271_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln202_1_fu_321_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln199_1_fu_358_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln204_2_fu_371_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln205_fu_374_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_392_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_399_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln202_fu_389_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_197_fu_403_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_541_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_cast126_fu_409_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln205_2_fu_420_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln204_1_fu_413_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln205_5_fu_429_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln205_3_fu_435_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln205_2_fu_425_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln205_3_fu_439_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln199_2_fu_461_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_198_fu_468_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_1_fu_486_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_550_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln207_fu_495_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln207_fu_499_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln199_fu_483_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln207_1_fu_512_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_504_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln207_2_fu_522_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_541_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_541_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_541_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_550_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_541_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_541_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component CNN_mac_muladd_6ns_6ns_6ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component CNN_mac_muladd_16s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component CNN_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_6ns_6ns_6ns_11_4_1_U378 : component CNN_mac_muladd_6ns_6ns_6ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_541_p0,
        din1 => grp_fu_541_p1,
        din2 => grp_fu_541_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_541_p3);

    mac_muladd_16s_16s_24ns_24_4_1_U379 : component CNN_mac_muladd_16s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => OutPadConv7_q0,
        din1 => Weights_q0,
        din2 => grp_fu_550_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_550_p3);

    flow_control_loop_pipe_sequential_init_U : component CNN_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten154_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln199_fu_221_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten154_fu_106 <= select_ln202_1_fu_327_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten154_fu_106 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten174_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln199_fu_221_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten174_fu_114 <= add_ln199_fu_227_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten174_fu_114 <= ap_const_lv13_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln199_fu_221_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_98 <= add_ln204_fu_303_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_98 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln199_fu_221_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    k_fu_102 <= select_ln202_fu_291_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_102 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    s_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    s_fu_94 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter7 = ap_const_logic_1)) then 
                    s_fu_94 <= s_1_fu_486_p1(23 downto 8);
                end if;
            end if; 
        end if;
    end process;

    y_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    y_fu_110 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    y_fu_110 <= select_ln199_1_fu_364_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln199_reg_631 <= and_ln199_fu_265_p2;
                and_ln199_reg_631_pp0_iter1_reg <= and_ln199_reg_631;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                conv_i_i16_i86_i437_cast_reg_616 <= conv_i_i16_i86_i437_cast_fu_181_p1;
                icmp_ln202_1_reg_657 <= icmp_ln202_1_fu_315_p2;
                icmp_ln202_1_reg_657_pp0_iter1_reg <= icmp_ln202_1_reg_657;
                icmp_ln202_reg_625 <= icmp_ln202_fu_239_p2;
                icmp_ln202_reg_625_pp0_iter1_reg <= icmp_ln202_reg_625;
                icmp_ln204_1_reg_653 <= icmp_ln204_1_fu_309_p2;
                icmp_ln204_1_reg_653_pp0_iter1_reg <= icmp_ln204_1_reg_653;
                j_2_mid2_reg_636 <= j_2_mid2_fu_283_p3;
                j_2_mid2_reg_636_pp0_iter1_reg <= j_2_mid2_reg_636;
                select_ln202_reg_642 <= select_ln202_fu_291_p3;
                select_ln202_reg_642_pp0_iter1_reg <= select_ln202_reg_642;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                and_ln199_reg_631_pp0_iter2_reg <= and_ln199_reg_631_pp0_iter1_reg;
                and_ln199_reg_631_pp0_iter3_reg <= and_ln199_reg_631_pp0_iter2_reg;
                and_ln199_reg_631_pp0_iter4_reg <= and_ln199_reg_631_pp0_iter3_reg;
                and_ln199_reg_631_pp0_iter5_reg <= and_ln199_reg_631_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                icmp_ln202_1_reg_657_pp0_iter2_reg <= icmp_ln202_1_reg_657_pp0_iter1_reg;
                icmp_ln202_1_reg_657_pp0_iter3_reg <= icmp_ln202_1_reg_657_pp0_iter2_reg;
                icmp_ln202_1_reg_657_pp0_iter4_reg <= icmp_ln202_1_reg_657_pp0_iter3_reg;
                icmp_ln202_1_reg_657_pp0_iter5_reg <= icmp_ln202_1_reg_657_pp0_iter4_reg;
                icmp_ln202_1_reg_657_pp0_iter6_reg <= icmp_ln202_1_reg_657_pp0_iter5_reg;
                icmp_ln202_reg_625_pp0_iter2_reg <= icmp_ln202_reg_625_pp0_iter1_reg;
                icmp_ln202_reg_625_pp0_iter3_reg <= icmp_ln202_reg_625_pp0_iter2_reg;
                icmp_ln202_reg_625_pp0_iter4_reg <= icmp_ln202_reg_625_pp0_iter3_reg;
                icmp_ln202_reg_625_pp0_iter5_reg <= icmp_ln202_reg_625_pp0_iter4_reg;
                icmp_ln204_1_reg_653_pp0_iter2_reg <= icmp_ln204_1_reg_653_pp0_iter1_reg;
                icmp_ln204_1_reg_653_pp0_iter3_reg <= icmp_ln204_1_reg_653_pp0_iter2_reg;
                icmp_ln204_1_reg_653_pp0_iter4_reg <= icmp_ln204_1_reg_653_pp0_iter3_reg;
                icmp_ln204_1_reg_653_pp0_iter5_reg <= icmp_ln204_1_reg_653_pp0_iter4_reg;
                icmp_ln204_1_reg_653_pp0_iter6_reg <= icmp_ln204_1_reg_653_pp0_iter5_reg;
                j_2_mid2_reg_636_pp0_iter2_reg <= j_2_mid2_reg_636_pp0_iter1_reg;
                select_ln199_1_reg_661 <= select_ln199_1_fu_364_p3;
                select_ln199_1_reg_661_pp0_iter3_reg <= select_ln199_1_reg_661;
                select_ln199_1_reg_661_pp0_iter4_reg <= select_ln199_1_reg_661_pp0_iter3_reg;
                select_ln199_1_reg_661_pp0_iter5_reg <= select_ln199_1_reg_661_pp0_iter4_reg;
                select_ln199_1_reg_661_pp0_iter6_reg <= select_ln199_1_reg_661_pp0_iter5_reg;
                select_ln202_reg_642_pp0_iter2_reg <= select_ln202_reg_642_pp0_iter1_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OutConv7_address0 <= zext_ln207_fu_517_p1(11 - 1 downto 0);
    OutConv7_ce0 <= OutConv7_ce0_local;

    OutConv7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            OutConv7_ce0_local <= ap_const_logic_1;
        else 
            OutConv7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutConv7_d0 <= select_ln207_fu_527_p3;
    OutConv7_we0 <= OutConv7_we0_local;

    OutConv7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001, icmp_ln204_1_reg_653_pp0_iter6_reg, icmp_ln202_1_reg_657_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln202_1_reg_657_pp0_iter6_reg = ap_const_lv1_1) and (icmp_ln204_1_reg_653_pp0_iter6_reg = ap_const_lv1_1))) then 
            OutConv7_we0_local <= ap_const_logic_1;
        else 
            OutConv7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    OutPadConv7_address0 <= zext_ln205_1_fu_416_p1(11 - 1 downto 0);
    OutPadConv7_ce0 <= OutPadConv7_ce0_local;

    OutPadConv7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            OutPadConv7_ce0_local <= ap_const_logic_1;
        else 
            OutPadConv7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    Weights_address0 <= zext_ln205_4_fu_445_p1(14 - 1 downto 0);
    Weights_ce0 <= Weights_ce0_local;

    Weights_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            Weights_ce0_local <= ap_const_logic_1;
        else 
            Weights_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln199_1_fu_358_p2 <= std_logic_vector(unsigned(y_fu_110) + unsigned(ap_const_lv6_1));
    add_ln199_fu_227_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten174_load) + unsigned(ap_const_lv13_1));
    add_ln202_1_fu_321_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten154_load) + unsigned(ap_const_lv9_1));
    add_ln202_fu_271_p2 <= std_logic_vector(unsigned(select_ln199_fu_245_p3) + unsigned(ap_const_lv6_1));
    add_ln204_fu_303_p2 <= std_logic_vector(unsigned(j_2_mid2_fu_283_p3) + unsigned(ap_const_lv3_1));
    add_ln205_2_fu_420_p2 <= std_logic_vector(unsigned(p_cast125) + unsigned(p_cast126_fu_409_p1));
    add_ln205_3_fu_439_p2 <= std_logic_vector(unsigned(zext_ln205_3_fu_435_p1) + unsigned(zext_ln205_2_fu_425_p1));
    add_ln205_5_fu_429_p2 <= std_logic_vector(unsigned(zext_ln204_1_fu_413_p1) + unsigned(ap_const_lv13_141C));
    add_ln205_fu_374_p2 <= std_logic_vector(unsigned(select_ln199_1_fu_364_p3) + unsigned(zext_ln204_2_fu_371_p1));
    add_ln207_1_fu_512_p2 <= std_logic_vector(unsigned(zext_ln199_fu_483_p1) + unsigned(mul_ln199));
    add_ln207_2_fu_522_p2 <= std_logic_vector(unsigned(Weights_load_133) + unsigned(s_1_fu_486_p4));
    add_ln207_fu_499_p2 <= std_logic_vector(signed(sext_ln207_fu_495_p1) + signed(conv_i_i16_i86_i437_cast_reg_616));
    and_ln199_fu_265_p2 <= (xor_ln199_fu_253_p2 and icmp_ln204_fu_259_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln199_fu_221_p2)
    begin
        if (((icmp_ln199_fu_221_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten154_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten154_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten154_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten154_load <= indvar_flatten154_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten174_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten174_fu_114)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten174_load <= ap_const_lv13_0;
        else 
            ap_sig_allocacmp_indvar_flatten174_load <= indvar_flatten174_fu_114;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_98;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k_fu_102)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_s_load_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0, s_fu_94, s_1_fu_486_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            ap_sig_allocacmp_s_load <= s_1_fu_486_p1(23 downto 8);
        else 
            ap_sig_allocacmp_s_load <= s_fu_94;
        end if; 
    end process;

        conv_i_i16_i86_i437_cast_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_i_i16_i86_i437),17));

    empty_197_fu_403_p2 <= std_logic_vector(unsigned(p_shl_fu_399_p1) + unsigned(zext_ln202_fu_389_p1));
    empty_198_fu_468_p3 <= 
        ap_sig_allocacmp_s_load when (and_ln199_reg_631_pp0_iter5_reg(0) = '1') else 
        select_ln199_2_fu_461_p3;
    empty_fu_277_p2 <= (icmp_ln202_fu_239_p2 or and_ln199_fu_265_p2);
    grp_fu_541_p0 <= grp_fu_541_p00(6 - 1 downto 0);
    grp_fu_541_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln202_fu_291_p3),11));
    grp_fu_541_p1 <= ap_const_lv11_2C(6 - 1 downto 0);
    grp_fu_541_p2 <= grp_fu_541_p20(6 - 1 downto 0);
    grp_fu_541_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_fu_374_p2),11));
    grp_fu_550_p2 <= (empty_198_fu_468_p3 & ap_const_lv8_0);
    icmp_ln199_fu_221_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten174_load = ap_const_lv13_1900) else "0";
    icmp_ln202_1_fu_315_p2 <= "1" when (select_ln202_fu_291_p3 = ap_const_lv6_1F) else "0";
    icmp_ln202_fu_239_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten154_load = ap_const_lv9_A0) else "0";
    icmp_ln204_1_fu_309_p2 <= "1" when (add_ln204_fu_303_p2 = ap_const_lv3_5) else "0";
    icmp_ln204_fu_259_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv3_5) else "0";
    j_2_mid2_fu_283_p3 <= 
        ap_const_lv3_0 when (empty_fu_277_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    p_cast126_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_197_fu_403_p2),13));
    p_shl_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_392_p3),9));
    s_1_fu_486_p1 <= grp_fu_550_p3;
    s_1_fu_486_p4 <= s_1_fu_486_p1(23 downto 8);
    select_ln199_1_fu_364_p3 <= 
        add_ln199_1_fu_358_p2 when (icmp_ln202_reg_625_pp0_iter1_reg(0) = '1') else 
        y_fu_110;
    select_ln199_2_fu_461_p3 <= 
        ap_const_lv16_0 when (icmp_ln202_reg_625_pp0_iter5_reg(0) = '1') else 
        ap_sig_allocacmp_s_load;
    select_ln199_fu_245_p3 <= 
        ap_const_lv6_0 when (icmp_ln202_fu_239_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    select_ln202_1_fu_327_p3 <= 
        ap_const_lv9_1 when (icmp_ln202_fu_239_p2(0) = '1') else 
        add_ln202_1_fu_321_p2;
    select_ln202_fu_291_p3 <= 
        add_ln202_fu_271_p2 when (and_ln199_fu_265_p2(0) = '1') else 
        select_ln199_fu_245_p3;
    select_ln207_fu_527_p3 <= 
        ap_const_lv16_0 when (tmp_7_fu_504_p3(0) = '1') else 
        add_ln207_2_fu_522_p2;
        sext_ln207_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(s_1_fu_486_p4),17));

    tmp_7_fu_504_p3 <= add_ln207_fu_499_p2(16 downto 16);
    tmp_fu_392_p3 <= (select_ln202_reg_642_pp0_iter2_reg & ap_const_lv2_0);
    xor_ln199_fu_253_p2 <= (icmp_ln202_fu_239_p2 xor ap_const_lv1_1);
    zext_ln199_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln199_1_reg_661_pp0_iter6_reg),11));
    zext_ln202_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln202_reg_642_pp0_iter2_reg),9));
    zext_ln204_1_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_mid2_reg_636_pp0_iter2_reg),13));
    zext_ln204_2_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_mid2_reg_636_pp0_iter1_reg),6));
    zext_ln205_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_541_p3),64));
    zext_ln205_2_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_2_fu_420_p2),14));
    zext_ln205_3_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_5_fu_429_p2),14));
    zext_ln205_4_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln205_3_fu_439_p2),64));
    zext_ln207_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln207_1_fu_512_p2),64));
end behav;
