// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_channel_pad_0 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutPadConv0_address0,
        OutPadConv0_ce0,
        OutPadConv0_we0,
        OutPadConv0_d0,
        InModel_address0,
        InModel_ce0,
        InModel_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] OutPadConv0_address0;
output   OutPadConv0_ce0;
output   OutPadConv0_we0;
output  [15:0] OutPadConv0_d0;
output  [8:0] InModel_address0;
output   InModel_ce0;
input  [15:0] InModel_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln7_fu_84_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [8:0] n_1_reg_158;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln8_fu_102_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln7_fu_112_p1;
reg   [8:0] n_fu_46;
wire   [8:0] add_ln7_fu_90_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_n_1;
reg    InModel_ce0_local;
reg    OutPadConv0_we0_local;
wire   [15:0] storemerge_fu_142_p3;
reg    OutPadConv0_ce0_local;
wire   [8:0] add_ln8_fu_96_p2;
wire   [7:0] tmp_fu_116_p4;
wire   [0:0] icmp_ln8_fu_125_p2;
wire   [0:0] icmp_ln8_1_fu_131_p2;
wire   [0:0] or_ln8_fu_136_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 n_fu_46 = 9'd0;
#0 ap_done_reg = 1'b0;
end

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln7_fu_84_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n_fu_46 <= add_ln7_fu_90_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_46 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        n_1_reg_158 <= ap_sig_allocacmp_n_1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        InModel_ce0_local = 1'b1;
    end else begin
        InModel_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPadConv0_ce0_local = 1'b1;
    end else begin
        OutPadConv0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPadConv0_we0_local = 1'b1;
    end else begin
        OutPadConv0_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_84_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_n_1 = 9'd0;
    end else begin
        ap_sig_allocacmp_n_1 = n_fu_46;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign InModel_address0 = zext_ln8_fu_102_p1;

assign InModel_ce0 = InModel_ce0_local;

assign OutPadConv0_address0 = zext_ln7_fu_112_p1;

assign OutPadConv0_ce0 = OutPadConv0_ce0_local;

assign OutPadConv0_d0 = storemerge_fu_142_p3;

assign OutPadConv0_we0 = OutPadConv0_we0_local;

assign add_ln7_fu_90_p2 = (ap_sig_allocacmp_n_1 + 9'd1);

assign add_ln8_fu_96_p2 = ($signed(ap_sig_allocacmp_n_1) + $signed(9'd510));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln7_fu_84_p2 = ((ap_sig_allocacmp_n_1 == 9'd324) ? 1'b1 : 1'b0);

assign icmp_ln8_1_fu_131_p2 = ((n_1_reg_158 > 9'd321) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_125_p2 = ((tmp_fu_116_p4 == 8'd0) ? 1'b1 : 1'b0);

assign or_ln8_fu_136_p2 = (icmp_ln8_fu_125_p2 | icmp_ln8_1_fu_131_p2);

assign storemerge_fu_142_p3 = ((or_ln8_fu_136_p2[0:0] == 1'b1) ? 16'd0 : InModel_q0);

assign tmp_fu_116_p4 = {{n_1_reg_158[8:1]}};

assign zext_ln7_fu_112_p1 = n_1_reg_158;

assign zext_ln8_fu_102_p1 = add_ln8_fu_96_p2;

endmodule //CNN_CNN_Pipeline_loop_for_channel_pad_0
