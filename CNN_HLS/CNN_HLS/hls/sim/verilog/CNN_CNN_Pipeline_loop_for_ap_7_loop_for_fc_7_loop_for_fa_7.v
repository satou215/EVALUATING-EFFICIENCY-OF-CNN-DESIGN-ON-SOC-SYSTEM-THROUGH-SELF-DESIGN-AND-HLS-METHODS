// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_ap_7_loop_for_fc_7_loop_for_fa_7 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_cast125,
        Weights_address0,
        Weights_ce0,
        Weights_q0,
        OutPadConv7_address0,
        OutPadConv7_ce0,
        OutPadConv7_q0,
        conv_i_i16_i86_i437,
        mul_ln199,
        OutConv7_address0,
        OutConv7_ce0,
        OutConv7_we0,
        OutConv7_d0,
        Weights_load_133
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [12:0] p_cast125;
output  [13:0] Weights_address0;
output   Weights_ce0;
input  [15:0] Weights_q0;
output  [10:0] OutPadConv7_address0;
output   OutPadConv7_ce0;
input  [15:0] OutPadConv7_q0;
input  [15:0] conv_i_i16_i86_i437;
input  [10:0] mul_ln199;
output  [10:0] OutConv7_address0;
output   OutConv7_ce0;
output   OutConv7_we0;
output  [15:0] OutConv7_d0;
input  [15:0] Weights_load_133;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln199_fu_221_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [16:0] conv_i_i16_i86_i437_cast_fu_181_p1;
reg  signed [16:0] conv_i_i16_i86_i437_cast_reg_616;
wire   [0:0] icmp_ln202_fu_239_p2;
reg   [0:0] icmp_ln202_reg_625;
reg   [0:0] icmp_ln202_reg_625_pp0_iter1_reg;
reg   [0:0] icmp_ln202_reg_625_pp0_iter2_reg;
reg   [0:0] icmp_ln202_reg_625_pp0_iter3_reg;
reg   [0:0] icmp_ln202_reg_625_pp0_iter4_reg;
reg   [0:0] icmp_ln202_reg_625_pp0_iter5_reg;
wire   [0:0] and_ln199_fu_265_p2;
reg   [0:0] and_ln199_reg_631;
reg   [0:0] and_ln199_reg_631_pp0_iter1_reg;
reg   [0:0] and_ln199_reg_631_pp0_iter2_reg;
reg   [0:0] and_ln199_reg_631_pp0_iter3_reg;
reg   [0:0] and_ln199_reg_631_pp0_iter4_reg;
reg   [0:0] and_ln199_reg_631_pp0_iter5_reg;
wire   [2:0] j_2_mid2_fu_283_p3;
reg   [2:0] j_2_mid2_reg_636;
reg   [2:0] j_2_mid2_reg_636_pp0_iter1_reg;
reg   [2:0] j_2_mid2_reg_636_pp0_iter2_reg;
wire   [5:0] select_ln202_fu_291_p3;
reg   [5:0] select_ln202_reg_642;
reg   [5:0] select_ln202_reg_642_pp0_iter1_reg;
reg   [5:0] select_ln202_reg_642_pp0_iter2_reg;
wire   [0:0] icmp_ln204_1_fu_309_p2;
reg   [0:0] icmp_ln204_1_reg_653;
reg   [0:0] icmp_ln204_1_reg_653_pp0_iter1_reg;
reg   [0:0] icmp_ln204_1_reg_653_pp0_iter2_reg;
reg   [0:0] icmp_ln204_1_reg_653_pp0_iter3_reg;
reg   [0:0] icmp_ln204_1_reg_653_pp0_iter4_reg;
reg   [0:0] icmp_ln204_1_reg_653_pp0_iter5_reg;
reg   [0:0] icmp_ln204_1_reg_653_pp0_iter6_reg;
wire   [0:0] icmp_ln202_1_fu_315_p2;
reg   [0:0] icmp_ln202_1_reg_657;
reg   [0:0] icmp_ln202_1_reg_657_pp0_iter1_reg;
reg   [0:0] icmp_ln202_1_reg_657_pp0_iter2_reg;
reg   [0:0] icmp_ln202_1_reg_657_pp0_iter3_reg;
reg   [0:0] icmp_ln202_1_reg_657_pp0_iter4_reg;
reg   [0:0] icmp_ln202_1_reg_657_pp0_iter5_reg;
reg   [0:0] icmp_ln202_1_reg_657_pp0_iter6_reg;
wire   [5:0] select_ln199_1_fu_364_p3;
reg   [5:0] select_ln199_1_reg_661;
reg   [5:0] select_ln199_1_reg_661_pp0_iter3_reg;
reg   [5:0] select_ln199_1_reg_661_pp0_iter4_reg;
reg   [5:0] select_ln199_1_reg_661_pp0_iter5_reg;
reg   [5:0] select_ln199_1_reg_661_pp0_iter6_reg;
wire   [63:0] zext_ln205_4_fu_445_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln205_1_fu_416_p1;
wire   [63:0] zext_ln207_fu_517_p1;
reg   [15:0] s_fu_94;
wire  signed [15:0] s_1_fu_486_p4;
reg   [15:0] ap_sig_allocacmp_s_load;
wire    ap_loop_init;
reg   [2:0] j_fu_98;
wire   [2:0] add_ln204_fu_303_p2;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [5:0] k_fu_102;
reg   [5:0] ap_sig_allocacmp_k_load;
reg   [8:0] indvar_flatten154_fu_106;
wire   [8:0] select_ln202_1_fu_327_p3;
reg   [8:0] ap_sig_allocacmp_indvar_flatten154_load;
reg   [5:0] y_fu_110;
reg   [12:0] indvar_flatten174_fu_114;
wire   [12:0] add_ln199_fu_227_p2;
reg   [12:0] ap_sig_allocacmp_indvar_flatten174_load;
reg    Weights_ce0_local;
reg    OutPadConv7_ce0_local;
reg    OutConv7_we0_local;
wire   [15:0] select_ln207_fu_527_p3;
reg    OutConv7_ce0_local;
wire   [0:0] icmp_ln204_fu_259_p2;
wire   [0:0] xor_ln199_fu_253_p2;
wire   [5:0] select_ln199_fu_245_p3;
wire   [0:0] empty_fu_277_p2;
wire   [5:0] add_ln202_fu_271_p2;
wire   [8:0] add_ln202_1_fu_321_p2;
wire   [5:0] add_ln199_1_fu_358_p2;
wire   [5:0] zext_ln204_2_fu_371_p1;
wire   [5:0] add_ln205_fu_374_p2;
wire   [7:0] tmp_fu_392_p3;
wire   [8:0] p_shl_fu_399_p1;
wire   [8:0] zext_ln202_fu_389_p1;
wire   [8:0] empty_197_fu_403_p2;
wire   [10:0] grp_fu_541_p3;
wire   [12:0] p_cast126_fu_409_p1;
wire   [12:0] add_ln205_2_fu_420_p2;
wire   [12:0] zext_ln204_1_fu_413_p1;
wire   [12:0] add_ln205_5_fu_429_p2;
wire   [13:0] zext_ln205_3_fu_435_p1;
wire   [13:0] zext_ln205_2_fu_425_p1;
wire   [13:0] add_ln205_3_fu_439_p2;
wire   [15:0] select_ln199_2_fu_461_p3;
wire   [15:0] empty_198_fu_468_p3;
wire  signed [23:0] s_1_fu_486_p1;
wire   [23:0] grp_fu_550_p3;
wire  signed [16:0] sext_ln207_fu_495_p1;
wire   [16:0] add_ln207_fu_499_p2;
wire   [10:0] zext_ln199_fu_483_p1;
wire   [10:0] add_ln207_1_fu_512_p2;
wire   [0:0] tmp_7_fu_504_p3;
wire   [15:0] add_ln207_2_fu_522_p2;
wire   [5:0] grp_fu_541_p0;
wire   [5:0] grp_fu_541_p1;
wire   [5:0] grp_fu_541_p2;
wire   [23:0] grp_fu_550_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [10:0] grp_fu_541_p00;
wire   [10:0] grp_fu_541_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 s_fu_94 = 16'd0;
#0 j_fu_98 = 3'd0;
#0 k_fu_102 = 6'd0;
#0 indvar_flatten154_fu_106 = 9'd0;
#0 y_fu_110 = 6'd0;
#0 indvar_flatten174_fu_114 = 13'd0;
#0 ap_done_reg = 1'b0;
end

CNN_mac_muladd_6ns_6ns_6ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 11 ))
mac_muladd_6ns_6ns_6ns_11_4_1_U378(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_541_p0),
    .din1(grp_fu_541_p1),
    .din2(grp_fu_541_p2),
    .ce(1'b1),
    .dout(grp_fu_541_p3)
);

CNN_mac_muladd_16s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_16s_16s_24ns_24_4_1_U379(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(OutPadConv7_q0),
    .din1(Weights_q0),
    .din2(grp_fu_550_p2),
    .ce(1'b1),
    .dout(grp_fu_550_p3)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln199_fu_221_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten154_fu_106 <= select_ln202_1_fu_327_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten154_fu_106 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln199_fu_221_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten174_fu_114 <= add_ln199_fu_227_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten174_fu_114 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln199_fu_221_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_98 <= add_ln204_fu_303_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_98 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln199_fu_221_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            k_fu_102 <= select_ln202_fu_291_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            k_fu_102 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            s_fu_94 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            s_fu_94 <= {{s_1_fu_486_p1[23:8]}};
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            y_fu_110 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            y_fu_110 <= select_ln199_1_fu_364_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln199_reg_631 <= and_ln199_fu_265_p2;
        and_ln199_reg_631_pp0_iter1_reg <= and_ln199_reg_631;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        conv_i_i16_i86_i437_cast_reg_616 <= conv_i_i16_i86_i437_cast_fu_181_p1;
        icmp_ln202_1_reg_657 <= icmp_ln202_1_fu_315_p2;
        icmp_ln202_1_reg_657_pp0_iter1_reg <= icmp_ln202_1_reg_657;
        icmp_ln202_reg_625 <= icmp_ln202_fu_239_p2;
        icmp_ln202_reg_625_pp0_iter1_reg <= icmp_ln202_reg_625;
        icmp_ln204_1_reg_653 <= icmp_ln204_1_fu_309_p2;
        icmp_ln204_1_reg_653_pp0_iter1_reg <= icmp_ln204_1_reg_653;
        j_2_mid2_reg_636 <= j_2_mid2_fu_283_p3;
        j_2_mid2_reg_636_pp0_iter1_reg <= j_2_mid2_reg_636;
        select_ln202_reg_642 <= select_ln202_fu_291_p3;
        select_ln202_reg_642_pp0_iter1_reg <= select_ln202_reg_642;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        and_ln199_reg_631_pp0_iter2_reg <= and_ln199_reg_631_pp0_iter1_reg;
        and_ln199_reg_631_pp0_iter3_reg <= and_ln199_reg_631_pp0_iter2_reg;
        and_ln199_reg_631_pp0_iter4_reg <= and_ln199_reg_631_pp0_iter3_reg;
        and_ln199_reg_631_pp0_iter5_reg <= and_ln199_reg_631_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln202_1_reg_657_pp0_iter2_reg <= icmp_ln202_1_reg_657_pp0_iter1_reg;
        icmp_ln202_1_reg_657_pp0_iter3_reg <= icmp_ln202_1_reg_657_pp0_iter2_reg;
        icmp_ln202_1_reg_657_pp0_iter4_reg <= icmp_ln202_1_reg_657_pp0_iter3_reg;
        icmp_ln202_1_reg_657_pp0_iter5_reg <= icmp_ln202_1_reg_657_pp0_iter4_reg;
        icmp_ln202_1_reg_657_pp0_iter6_reg <= icmp_ln202_1_reg_657_pp0_iter5_reg;
        icmp_ln202_reg_625_pp0_iter2_reg <= icmp_ln202_reg_625_pp0_iter1_reg;
        icmp_ln202_reg_625_pp0_iter3_reg <= icmp_ln202_reg_625_pp0_iter2_reg;
        icmp_ln202_reg_625_pp0_iter4_reg <= icmp_ln202_reg_625_pp0_iter3_reg;
        icmp_ln202_reg_625_pp0_iter5_reg <= icmp_ln202_reg_625_pp0_iter4_reg;
        icmp_ln204_1_reg_653_pp0_iter2_reg <= icmp_ln204_1_reg_653_pp0_iter1_reg;
        icmp_ln204_1_reg_653_pp0_iter3_reg <= icmp_ln204_1_reg_653_pp0_iter2_reg;
        icmp_ln204_1_reg_653_pp0_iter4_reg <= icmp_ln204_1_reg_653_pp0_iter3_reg;
        icmp_ln204_1_reg_653_pp0_iter5_reg <= icmp_ln204_1_reg_653_pp0_iter4_reg;
        icmp_ln204_1_reg_653_pp0_iter6_reg <= icmp_ln204_1_reg_653_pp0_iter5_reg;
        j_2_mid2_reg_636_pp0_iter2_reg <= j_2_mid2_reg_636_pp0_iter1_reg;
        select_ln199_1_reg_661 <= select_ln199_1_fu_364_p3;
        select_ln199_1_reg_661_pp0_iter3_reg <= select_ln199_1_reg_661;
        select_ln199_1_reg_661_pp0_iter4_reg <= select_ln199_1_reg_661_pp0_iter3_reg;
        select_ln199_1_reg_661_pp0_iter5_reg <= select_ln199_1_reg_661_pp0_iter4_reg;
        select_ln199_1_reg_661_pp0_iter6_reg <= select_ln199_1_reg_661_pp0_iter5_reg;
        select_ln202_reg_642_pp0_iter2_reg <= select_ln202_reg_642_pp0_iter1_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        OutConv7_ce0_local = 1'b1;
    end else begin
        OutConv7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln202_1_reg_657_pp0_iter6_reg == 1'd1) & (icmp_ln204_1_reg_653_pp0_iter6_reg == 1'd1))) begin
        OutConv7_we0_local = 1'b1;
    end else begin
        OutConv7_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        OutPadConv7_ce0_local = 1'b1;
    end else begin
        OutPadConv7_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        Weights_ce0_local = 1'b1;
    end else begin
        Weights_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln199_fu_221_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten154_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten154_load = indvar_flatten154_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten174_load = 13'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten174_load = indvar_flatten174_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_98;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_k_load = 6'd0;
    end else begin
        ap_sig_allocacmp_k_load = k_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        ap_sig_allocacmp_s_load = {{s_1_fu_486_p1[23:8]}};
    end else begin
        ap_sig_allocacmp_s_load = s_fu_94;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv7_address0 = zext_ln207_fu_517_p1;

assign OutConv7_ce0 = OutConv7_ce0_local;

assign OutConv7_d0 = select_ln207_fu_527_p3;

assign OutConv7_we0 = OutConv7_we0_local;

assign OutPadConv7_address0 = zext_ln205_1_fu_416_p1;

assign OutPadConv7_ce0 = OutPadConv7_ce0_local;

assign Weights_address0 = zext_ln205_4_fu_445_p1;

assign Weights_ce0 = Weights_ce0_local;

assign add_ln199_1_fu_358_p2 = (y_fu_110 + 6'd1);

assign add_ln199_fu_227_p2 = (ap_sig_allocacmp_indvar_flatten174_load + 13'd1);

assign add_ln202_1_fu_321_p2 = (ap_sig_allocacmp_indvar_flatten154_load + 9'd1);

assign add_ln202_fu_271_p2 = (select_ln199_fu_245_p3 + 6'd1);

assign add_ln204_fu_303_p2 = (j_2_mid2_fu_283_p3 + 3'd1);

assign add_ln205_2_fu_420_p2 = (p_cast125 + p_cast126_fu_409_p1);

assign add_ln205_3_fu_439_p2 = (zext_ln205_3_fu_435_p1 + zext_ln205_2_fu_425_p1);

assign add_ln205_5_fu_429_p2 = ($signed(zext_ln204_1_fu_413_p1) + $signed(13'd5148));

assign add_ln205_fu_374_p2 = (select_ln199_1_fu_364_p3 + zext_ln204_2_fu_371_p1);

assign add_ln207_1_fu_512_p2 = (zext_ln199_fu_483_p1 + mul_ln199);

assign add_ln207_2_fu_522_p2 = ($signed(Weights_load_133) + $signed(s_1_fu_486_p4));

assign add_ln207_fu_499_p2 = ($signed(sext_ln207_fu_495_p1) + $signed(conv_i_i16_i86_i437_cast_reg_616));

assign and_ln199_fu_265_p2 = (xor_ln199_fu_253_p2 & icmp_ln204_fu_259_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign conv_i_i16_i86_i437_cast_fu_181_p1 = $signed(conv_i_i16_i86_i437);

assign empty_197_fu_403_p2 = (p_shl_fu_399_p1 + zext_ln202_fu_389_p1);

assign empty_198_fu_468_p3 = ((and_ln199_reg_631_pp0_iter5_reg[0:0] == 1'b1) ? ap_sig_allocacmp_s_load : select_ln199_2_fu_461_p3);

assign empty_fu_277_p2 = (icmp_ln202_fu_239_p2 | and_ln199_fu_265_p2);

assign grp_fu_541_p0 = grp_fu_541_p00;

assign grp_fu_541_p00 = select_ln202_fu_291_p3;

assign grp_fu_541_p1 = 11'd44;

assign grp_fu_541_p2 = grp_fu_541_p20;

assign grp_fu_541_p20 = add_ln205_fu_374_p2;

assign grp_fu_550_p2 = {{empty_198_fu_468_p3}, {8'd0}};

assign icmp_ln199_fu_221_p2 = ((ap_sig_allocacmp_indvar_flatten174_load == 13'd6400) ? 1'b1 : 1'b0);

assign icmp_ln202_1_fu_315_p2 = ((select_ln202_fu_291_p3 == 6'd31) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_239_p2 = ((ap_sig_allocacmp_indvar_flatten154_load == 9'd160) ? 1'b1 : 1'b0);

assign icmp_ln204_1_fu_309_p2 = ((add_ln204_fu_303_p2 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln204_fu_259_p2 = ((ap_sig_allocacmp_j_load == 3'd5) ? 1'b1 : 1'b0);

assign j_2_mid2_fu_283_p3 = ((empty_fu_277_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign p_cast126_fu_409_p1 = empty_197_fu_403_p2;

assign p_shl_fu_399_p1 = tmp_fu_392_p3;

assign s_1_fu_486_p1 = grp_fu_550_p3;

assign s_1_fu_486_p4 = {{s_1_fu_486_p1[23:8]}};

assign select_ln199_1_fu_364_p3 = ((icmp_ln202_reg_625_pp0_iter1_reg[0:0] == 1'b1) ? add_ln199_1_fu_358_p2 : y_fu_110);

assign select_ln199_2_fu_461_p3 = ((icmp_ln202_reg_625_pp0_iter5_reg[0:0] == 1'b1) ? 16'd0 : ap_sig_allocacmp_s_load);

assign select_ln199_fu_245_p3 = ((icmp_ln202_fu_239_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_k_load);

assign select_ln202_1_fu_327_p3 = ((icmp_ln202_fu_239_p2[0:0] == 1'b1) ? 9'd1 : add_ln202_1_fu_321_p2);

assign select_ln202_fu_291_p3 = ((and_ln199_fu_265_p2[0:0] == 1'b1) ? add_ln202_fu_271_p2 : select_ln199_fu_245_p3);

assign select_ln207_fu_527_p3 = ((tmp_7_fu_504_p3[0:0] == 1'b1) ? 16'd0 : add_ln207_2_fu_522_p2);

assign sext_ln207_fu_495_p1 = s_1_fu_486_p4;

assign tmp_7_fu_504_p3 = add_ln207_fu_499_p2[32'd16];

assign tmp_fu_392_p3 = {{select_ln202_reg_642_pp0_iter2_reg}, {2'd0}};

assign xor_ln199_fu_253_p2 = (icmp_ln202_fu_239_p2 ^ 1'd1);

assign zext_ln199_fu_483_p1 = select_ln199_1_reg_661_pp0_iter6_reg;

assign zext_ln202_fu_389_p1 = select_ln202_reg_642_pp0_iter2_reg;

assign zext_ln204_1_fu_413_p1 = j_2_mid2_reg_636_pp0_iter2_reg;

assign zext_ln204_2_fu_371_p1 = j_2_mid2_reg_636_pp0_iter1_reg;

assign zext_ln205_1_fu_416_p1 = grp_fu_541_p3;

assign zext_ln205_2_fu_425_p1 = add_ln205_2_fu_420_p2;

assign zext_ln205_3_fu_435_p1 = add_ln205_5_fu_429_p2;

assign zext_ln205_4_fu_445_p1 = add_ln205_3_fu_439_p2;

assign zext_ln207_fu_517_p1 = add_ln207_1_fu_512_p2;

endmodule //CNN_CNN_Pipeline_loop_for_ap_7_loop_for_fc_7_loop_for_fa_7
