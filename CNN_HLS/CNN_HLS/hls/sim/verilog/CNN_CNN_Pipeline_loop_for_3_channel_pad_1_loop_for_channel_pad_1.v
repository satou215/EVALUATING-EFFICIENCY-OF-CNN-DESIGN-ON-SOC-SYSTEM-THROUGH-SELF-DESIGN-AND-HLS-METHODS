// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_3_channel_pad_1_loop_for_channel_pad_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutPadConv1_2_address0,
        OutPadConv1_2_ce0,
        OutPadConv1_2_we0,
        OutPadConv1_2_d0,
        OutPadConv1_1_address0,
        OutPadConv1_1_ce0,
        OutPadConv1_1_we0,
        OutPadConv1_1_d0,
        OutPadConv1_address0,
        OutPadConv1_ce0,
        OutPadConv1_we0,
        OutPadConv1_d0,
        OutConv0_address0,
        OutConv0_ce0,
        OutConv0_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] OutPadConv1_2_address0;
output   OutPadConv1_2_ce0;
output   OutPadConv1_2_we0;
output  [15:0] OutPadConv1_2_d0;
output  [8:0] OutPadConv1_1_address0;
output   OutPadConv1_1_ce0;
output   OutPadConv1_1_we0;
output  [15:0] OutPadConv1_1_d0;
output  [8:0] OutPadConv1_address0;
output   OutPadConv1_ce0;
output   OutPadConv1_we0;
output  [15:0] OutPadConv1_d0;
output  [10:0] OutConv0_address0;
output   OutConv0_ce0;
input  [15:0] OutConv0_q0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln31_fu_160_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln33_fu_175_p2;
reg   [0:0] icmp_ln33_reg_405;
reg   [0:0] icmp_ln33_reg_405_pp0_iter1_reg;
reg   [0:0] icmp_ln33_reg_405_pp0_iter2_reg;
reg   [0:0] icmp_ln33_reg_405_pp0_iter3_reg;
reg   [0:0] icmp_ln33_reg_405_pp0_iter4_reg;
reg   [0:0] icmp_ln33_reg_405_pp0_iter5_reg;
reg   [0:0] icmp_ln33_reg_405_pp0_iter6_reg;
reg   [0:0] icmp_ln33_reg_405_pp0_iter7_reg;
reg   [0:0] icmp_ln33_reg_405_pp0_iter8_reg;
wire   [8:0] select_ln31_fu_181_p3;
reg   [8:0] select_ln31_reg_410;
reg   [8:0] select_ln31_reg_410_pp0_iter1_reg;
reg   [8:0] select_ln31_reg_410_pp0_iter2_reg;
reg   [8:0] select_ln31_reg_410_pp0_iter3_reg;
reg   [8:0] select_ln31_reg_410_pp0_iter4_reg;
reg   [8:0] select_ln31_reg_410_pp0_iter5_reg;
reg   [8:0] select_ln31_reg_410_pp0_iter6_reg;
reg   [8:0] select_ln31_reg_410_pp0_iter7_reg;
reg   [8:0] select_ln31_reg_410_pp0_iter8_reg;
reg   [8:0] select_ln31_reg_410_pp0_iter9_reg;
reg   [8:0] select_ln31_reg_410_pp0_iter10_reg;
wire   [0:0] or_ln34_fu_211_p2;
reg   [0:0] or_ln34_reg_417;
reg   [0:0] or_ln34_reg_417_pp0_iter1_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter2_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter3_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter4_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter5_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter6_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter7_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter8_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter9_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter10_reg;
reg   [0:0] or_ln34_reg_417_pp0_iter11_reg;
wire   [2:0] select_ln31_1_fu_248_p3;
reg   [2:0] select_ln31_1_reg_422;
reg   [2:0] select_ln31_1_reg_422_pp0_iter10_reg;
wire   [1:0] empty_fu_259_p1;
reg   [1:0] empty_reg_432;
reg   [1:0] empty_reg_432_pp0_iter10_reg;
wire   [63:0] zext_ln34_1_fu_338_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln34_fu_343_p1;
reg   [8:0] n_fu_78;
wire   [8:0] add_ln33_fu_223_p2;
wire    ap_loop_init;
reg   [8:0] ap_sig_allocacmp_n_load;
reg   [2:0] c_fu_82;
reg   [10:0] indvar_flatten_fu_86;
wire   [10:0] add_ln31_fu_166_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
reg    OutConv0_ce0_local;
reg    OutPadConv1_1_we0_local;
wire   [1:0] trunc_ln34_fu_349_p1;
wire   [15:0] storemerge555_fu_353_p3;
reg    OutPadConv1_1_ce0_local;
reg    OutPadConv1_we0_local;
reg    OutPadConv1_ce0_local;
reg    OutPadConv1_2_we0_local;
reg    OutPadConv1_2_ce0_local;
wire   [7:0] tmp_19_fu_189_p4;
wire   [0:0] icmp_ln34_fu_199_p2;
wire   [0:0] icmp_ln34_1_fu_205_p2;
wire   [2:0] grp_fu_217_p1;
wire   [2:0] add_ln31_1_fu_242_p2;
wire   [8:0] tmp_fu_275_p3;
wire   [9:0] p_shl_fu_268_p3;
wire   [9:0] p_shl6_fu_282_p1;
wire   [9:0] empty_206_fu_286_p2;
wire   [8:0] mul_ln34_fu_302_p0;
wire   [10:0] mul_ln34_fu_302_p1;
wire   [18:0] mul_ln34_fu_302_p2;
wire   [7:0] tmp_20_fu_308_p4;
wire   [9:0] zext_ln33_1_fu_296_p1;
wire   [9:0] add_ln34_1_fu_322_p2;
wire  signed [10:0] sext_ln34_fu_328_p1;
wire   [10:0] p_cast44_cast_fu_292_p1;
wire   [10:0] add_ln34_2_fu_332_p2;
wire   [8:0] grp_fu_371_p3;
wire   [1:0] grp_fu_217_p2;
wire   [6:0] grp_fu_371_p0;
wire   [2:0] grp_fu_371_p1;
wire   [7:0] grp_fu_371_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [8:0] grp_fu_371_p10;
wire   [8:0] grp_fu_371_p20;
wire   [18:0] mul_ln34_fu_302_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 n_fu_78 = 9'd0;
#0 c_fu_82 = 3'd0;
#0 indvar_flatten_fu_86 = 11'd0;
#0 ap_done_reg = 1'b0;
end

CNN_urem_9ns_3ns_2_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 2 ))
urem_9ns_3ns_2_13_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln31_fu_181_p3),
    .din1(grp_fu_217_p1),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

CNN_mul_9ns_11ns_19_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 19 ))
mul_9ns_11ns_19_1_1_U21(
    .din0(mul_ln34_fu_302_p0),
    .din1(mul_ln34_fu_302_p1),
    .dout(mul_ln34_fu_302_p2)
);

CNN_mac_muladd_7ns_3ns_8ns_9_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 9 ))
mac_muladd_7ns_3ns_8ns_9_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_371_p0),
    .din1(grp_fu_371_p1),
    .din2(grp_fu_371_p2),
    .ce(1'b1),
    .dout(grp_fu_371_p3)
);

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c_fu_82 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter9 == 1'b1)) begin
            c_fu_82 <= select_ln31_1_fu_248_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln31_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_86 <= add_ln31_fu_166_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_86 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln31_fu_160_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            n_fu_78 <= add_ln33_fu_223_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            n_fu_78 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        empty_reg_432 <= empty_fu_259_p1;
        empty_reg_432_pp0_iter10_reg <= empty_reg_432;
        icmp_ln33_reg_405_pp0_iter2_reg <= icmp_ln33_reg_405_pp0_iter1_reg;
        icmp_ln33_reg_405_pp0_iter3_reg <= icmp_ln33_reg_405_pp0_iter2_reg;
        icmp_ln33_reg_405_pp0_iter4_reg <= icmp_ln33_reg_405_pp0_iter3_reg;
        icmp_ln33_reg_405_pp0_iter5_reg <= icmp_ln33_reg_405_pp0_iter4_reg;
        icmp_ln33_reg_405_pp0_iter6_reg <= icmp_ln33_reg_405_pp0_iter5_reg;
        icmp_ln33_reg_405_pp0_iter7_reg <= icmp_ln33_reg_405_pp0_iter6_reg;
        icmp_ln33_reg_405_pp0_iter8_reg <= icmp_ln33_reg_405_pp0_iter7_reg;
        or_ln34_reg_417_pp0_iter10_reg <= or_ln34_reg_417_pp0_iter9_reg;
        or_ln34_reg_417_pp0_iter11_reg <= or_ln34_reg_417_pp0_iter10_reg;
        or_ln34_reg_417_pp0_iter2_reg <= or_ln34_reg_417_pp0_iter1_reg;
        or_ln34_reg_417_pp0_iter3_reg <= or_ln34_reg_417_pp0_iter2_reg;
        or_ln34_reg_417_pp0_iter4_reg <= or_ln34_reg_417_pp0_iter3_reg;
        or_ln34_reg_417_pp0_iter5_reg <= or_ln34_reg_417_pp0_iter4_reg;
        or_ln34_reg_417_pp0_iter6_reg <= or_ln34_reg_417_pp0_iter5_reg;
        or_ln34_reg_417_pp0_iter7_reg <= or_ln34_reg_417_pp0_iter6_reg;
        or_ln34_reg_417_pp0_iter8_reg <= or_ln34_reg_417_pp0_iter7_reg;
        or_ln34_reg_417_pp0_iter9_reg <= or_ln34_reg_417_pp0_iter8_reg;
        select_ln31_1_reg_422 <= select_ln31_1_fu_248_p3;
        select_ln31_1_reg_422_pp0_iter10_reg <= select_ln31_1_reg_422;
        select_ln31_reg_410_pp0_iter10_reg <= select_ln31_reg_410_pp0_iter9_reg;
        select_ln31_reg_410_pp0_iter2_reg <= select_ln31_reg_410_pp0_iter1_reg;
        select_ln31_reg_410_pp0_iter3_reg <= select_ln31_reg_410_pp0_iter2_reg;
        select_ln31_reg_410_pp0_iter4_reg <= select_ln31_reg_410_pp0_iter3_reg;
        select_ln31_reg_410_pp0_iter5_reg <= select_ln31_reg_410_pp0_iter4_reg;
        select_ln31_reg_410_pp0_iter6_reg <= select_ln31_reg_410_pp0_iter5_reg;
        select_ln31_reg_410_pp0_iter7_reg <= select_ln31_reg_410_pp0_iter6_reg;
        select_ln31_reg_410_pp0_iter8_reg <= select_ln31_reg_410_pp0_iter7_reg;
        select_ln31_reg_410_pp0_iter9_reg <= select_ln31_reg_410_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln33_reg_405 <= icmp_ln33_fu_175_p2;
        icmp_ln33_reg_405_pp0_iter1_reg <= icmp_ln33_reg_405;
        or_ln34_reg_417 <= or_ln34_fu_211_p2;
        or_ln34_reg_417_pp0_iter1_reg <= or_ln34_reg_417;
        select_ln31_reg_410 <= select_ln31_fu_181_p3;
        select_ln31_reg_410_pp0_iter1_reg <= select_ln31_reg_410;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter11 == 1'b1))) begin
        OutConv0_ce0_local = 1'b1;
    end else begin
        OutConv0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        OutPadConv1_1_ce0_local = 1'b1;
    end else begin
        OutPadConv1_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln34_fu_349_p1 == 2'd1))) begin
        OutPadConv1_1_we0_local = 1'b1;
    end else begin
        OutPadConv1_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        OutPadConv1_2_ce0_local = 1'b1;
    end else begin
        OutPadConv1_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln34_fu_349_p1 == 2'd0) & ~(trunc_ln34_fu_349_p1 == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        OutPadConv1_2_we0_local = 1'b1;
    end else begin
        OutPadConv1_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1))) begin
        OutPadConv1_ce0_local = 1'b1;
    end else begin
        OutPadConv1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter12 == 1'b1) & (trunc_ln34_fu_349_p1 == 2'd0))) begin
        OutPadConv1_we0_local = 1'b1;
    end else begin
        OutPadConv1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln31_fu_160_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter11_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_86;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_n_load = 9'd0;
    end else begin
        ap_sig_allocacmp_n_load = n_fu_78;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv0_address0 = zext_ln34_1_fu_338_p1;

assign OutConv0_ce0 = OutConv0_ce0_local;

assign OutPadConv1_1_address0 = zext_ln34_fu_343_p1;

assign OutPadConv1_1_ce0 = OutPadConv1_1_ce0_local;

assign OutPadConv1_1_d0 = storemerge555_fu_353_p3;

assign OutPadConv1_1_we0 = OutPadConv1_1_we0_local;

assign OutPadConv1_2_address0 = zext_ln34_fu_343_p1;

assign OutPadConv1_2_ce0 = OutPadConv1_2_ce0_local;

assign OutPadConv1_2_d0 = storemerge555_fu_353_p3;

assign OutPadConv1_2_we0 = OutPadConv1_2_we0_local;

assign OutPadConv1_address0 = zext_ln34_fu_343_p1;

assign OutPadConv1_ce0 = OutPadConv1_ce0_local;

assign OutPadConv1_d0 = storemerge555_fu_353_p3;

assign OutPadConv1_we0 = OutPadConv1_we0_local;

assign add_ln31_1_fu_242_p2 = (c_fu_82 + 3'd1);

assign add_ln31_fu_166_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln33_fu_223_p2 = (select_ln31_fu_181_p3 + 9'd1);

assign add_ln34_1_fu_322_p2 = ($signed(zext_ln33_1_fu_296_p1) + $signed(10'd1022));

assign add_ln34_2_fu_332_p2 = ($signed(sext_ln34_fu_328_p1) + $signed(p_cast44_cast_fu_292_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_206_fu_286_p2 = (p_shl_fu_268_p3 + p_shl6_fu_282_p1);

assign empty_fu_259_p1 = select_ln31_1_fu_248_p3[1:0];

assign grp_fu_217_p1 = 9'd3;

assign grp_fu_371_p0 = 9'd108;

assign grp_fu_371_p1 = grp_fu_371_p10;

assign grp_fu_371_p10 = select_ln31_1_fu_248_p3;

assign grp_fu_371_p2 = grp_fu_371_p20;

assign grp_fu_371_p20 = tmp_20_fu_308_p4;

assign icmp_ln31_fu_160_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1296) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_175_p2 = ((ap_sig_allocacmp_n_load == 9'd324) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_205_p2 = ((select_ln31_fu_181_p3 > 9'd321) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_199_p2 = ((tmp_19_fu_189_p4 == 8'd0) ? 1'b1 : 1'b0);

assign mul_ln34_fu_302_p0 = mul_ln34_fu_302_p00;

assign mul_ln34_fu_302_p00 = select_ln31_reg_410_pp0_iter10_reg;

assign mul_ln34_fu_302_p1 = 19'd683;

assign or_ln34_fu_211_p2 = (icmp_ln34_fu_199_p2 | icmp_ln34_1_fu_205_p2);

assign p_cast44_cast_fu_292_p1 = empty_206_fu_286_p2;

assign p_shl6_fu_282_p1 = tmp_fu_275_p3;

assign p_shl_fu_268_p3 = {{empty_reg_432_pp0_iter10_reg}, {8'd0}};

assign select_ln31_1_fu_248_p3 = ((icmp_ln33_reg_405_pp0_iter8_reg[0:0] == 1'b1) ? add_ln31_1_fu_242_p2 : c_fu_82);

assign select_ln31_fu_181_p3 = ((icmp_ln33_fu_175_p2[0:0] == 1'b1) ? 9'd0 : ap_sig_allocacmp_n_load);

assign sext_ln34_fu_328_p1 = $signed(add_ln34_1_fu_322_p2);

assign storemerge555_fu_353_p3 = ((or_ln34_reg_417_pp0_iter11_reg[0:0] == 1'b1) ? 16'd0 : OutConv0_q0);

assign tmp_19_fu_189_p4 = {{select_ln31_fu_181_p3[8:1]}};

assign tmp_20_fu_308_p4 = {{mul_ln34_fu_302_p2[18:11]}};

assign tmp_fu_275_p3 = {{select_ln31_1_reg_422_pp0_iter10_reg}, {6'd0}};

assign trunc_ln34_fu_349_p1 = grp_fu_217_p2[1:0];

assign zext_ln33_1_fu_296_p1 = select_ln31_reg_410_pp0_iter10_reg;

assign zext_ln34_1_fu_338_p1 = add_ln34_2_fu_332_p2;

assign zext_ln34_fu_343_p1 = grp_fu_371_p3;

endmodule //CNN_CNN_Pipeline_loop_for_3_channel_pad_1_loop_for_channel_pad_1
