// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module CNN_CNN_Pipeline_loop_for_channel_pool_2_loop_for_weight_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OutConv5_address0,
        OutConv5_ce0,
        OutConv5_q0,
        OutConv5_address1,
        OutConv5_ce1,
        OutConv5_q1,
        OutPool2_address0,
        OutPool2_ce0,
        OutPool2_we0,
        OutPool2_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] OutConv5_address0;
output   OutConv5_ce0;
input  [15:0] OutConv5_q0;
output  [10:0] OutConv5_address1;
output   OutConv5_ce1;
input  [15:0] OutConv5_q1;
output  [9:0] OutPool2_address0;
output   OutPool2_ce0;
output   OutPool2_we0;
output  [15:0] OutPool2_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_fu_134_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln63_fu_288_p2;
reg   [9:0] add_ln63_reg_382;
wire   [63:0] zext_ln60_fu_272_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln60_1_fu_283_p1;
wire   [63:0] zext_ln64_fu_344_p1;
reg   [5:0] y_fu_66;
wire   [5:0] add_ln65_fu_294_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_y_load;
reg   [4:0] z_fu_70;
wire   [4:0] select_ln52_1_fu_172_p3;
reg   [4:0] ap_sig_allocacmp_z_load;
reg   [9:0] indvar_flatten106_fu_74;
wire   [9:0] add_ln52_fu_140_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten106_load;
reg    OutConv5_ce1_local;
reg    OutConv5_ce0_local;
reg    OutPool2_we0_local;
wire   [15:0] max_2_fu_335_p3;
reg    OutPool2_ce0_local;
wire   [0:0] icmp_ln55_fu_152_p2;
wire   [4:0] add_ln52_1_fu_166_p2;
wire   [8:0] tmp_fu_188_p3;
wire   [10:0] p_shl2_fu_180_p3;
wire   [10:0] p_shl3_fu_196_p1;
wire   [7:0] tmp_4_fu_214_p3;
wire   [9:0] p_shl_fu_206_p3;
wire   [9:0] p_shl1_fu_222_p1;
wire   [10:0] empty_fu_200_p2;
wire   [9:0] tmp_s_fu_232_p4;
wire   [5:0] select_ln52_fu_158_p3;
wire   [6:0] tmp_5_fu_254_p3;
wire   [10:0] zext_ln59_fu_262_p1;
wire   [10:0] add_ln59_fu_266_p2;
wire   [10:0] tmp_3_fu_242_p3;
wire   [10:0] add_ln59_1_fu_277_p2;
wire   [9:0] zext_ln55_fu_250_p1;
wire   [9:0] empty_193_fu_226_p2;
wire   [0:0] icmp_ln61_fu_315_p2;
wire   [15:0] max_fu_321_p3;
wire   [0:0] icmp_ln61_1_fu_329_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 y_fu_66 = 6'd0;
#0 z_fu_70 = 5'd0;
#0 indvar_flatten106_fu_74 = 10'd0;
#0 ap_done_reg = 1'b0;
end

CNN_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten106_fu_74 <= add_ln52_fu_140_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten106_fu_74 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            y_fu_66 <= add_ln65_fu_294_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            y_fu_66 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_134_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            z_fu_70 <= select_ln52_1_fu_172_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            z_fu_70 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln63_reg_382 <= add_ln63_fu_288_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv5_ce0_local = 1'b1;
    end else begin
        OutConv5_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutConv5_ce1_local = 1'b1;
    end else begin
        OutConv5_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPool2_ce0_local = 1'b1;
    end else begin
        OutPool2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OutPool2_we0_local = 1'b1;
    end else begin
        OutPool2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_134_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten106_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten106_load = indvar_flatten106_fu_74;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_y_load = 6'd0;
    end else begin
        ap_sig_allocacmp_y_load = y_fu_66;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_z_load = 5'd0;
    end else begin
        ap_sig_allocacmp_z_load = z_fu_70;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OutConv5_address0 = zext_ln60_1_fu_283_p1;

assign OutConv5_address1 = zext_ln60_fu_272_p1;

assign OutConv5_ce0 = OutConv5_ce0_local;

assign OutConv5_ce1 = OutConv5_ce1_local;

assign OutPool2_address0 = zext_ln64_fu_344_p1;

assign OutPool2_ce0 = OutPool2_ce0_local;

assign OutPool2_d0 = max_2_fu_335_p3;

assign OutPool2_we0 = OutPool2_we0_local;

assign add_ln52_1_fu_166_p2 = (ap_sig_allocacmp_z_load + 5'd1);

assign add_ln52_fu_140_p2 = (ap_sig_allocacmp_indvar_flatten106_load + 10'd1);

assign add_ln59_1_fu_277_p2 = (zext_ln59_fu_262_p1 + tmp_3_fu_242_p3);

assign add_ln59_fu_266_p2 = (zext_ln59_fu_262_p1 + empty_fu_200_p2);

assign add_ln63_fu_288_p2 = (zext_ln55_fu_250_p1 + empty_193_fu_226_p2);

assign add_ln65_fu_294_p2 = (select_ln52_fu_158_p3 + 6'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign empty_193_fu_226_p2 = (p_shl_fu_206_p3 + p_shl1_fu_222_p1);

assign empty_fu_200_p2 = (p_shl2_fu_180_p3 + p_shl3_fu_196_p1);

assign icmp_ln52_fu_134_p2 = ((ap_sig_allocacmp_indvar_flatten106_load == 10'd640) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_152_p2 = ((ap_sig_allocacmp_y_load == 6'd40) ? 1'b1 : 1'b0);

assign icmp_ln61_1_fu_329_p2 = (($signed(OutConv5_q0) > $signed(max_fu_321_p3)) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_315_p2 = (($signed(OutConv5_q1) > $signed(16'd62976)) ? 1'b1 : 1'b0);

assign max_2_fu_335_p3 = ((icmp_ln61_1_fu_329_p2[0:0] == 1'b1) ? OutConv5_q0 : max_fu_321_p3);

assign max_fu_321_p3 = ((icmp_ln61_fu_315_p2[0:0] == 1'b1) ? OutConv5_q1 : 16'd62976);

assign p_shl1_fu_222_p1 = tmp_4_fu_214_p3;

assign p_shl2_fu_180_p3 = {{select_ln52_1_fu_172_p3}, {6'd0}};

assign p_shl3_fu_196_p1 = tmp_fu_188_p3;

assign p_shl_fu_206_p3 = {{select_ln52_1_fu_172_p3}, {5'd0}};

assign select_ln52_1_fu_172_p3 = ((icmp_ln55_fu_152_p2[0:0] == 1'b1) ? add_ln52_1_fu_166_p2 : ap_sig_allocacmp_z_load);

assign select_ln52_fu_158_p3 = ((icmp_ln55_fu_152_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_y_load);

assign tmp_3_fu_242_p3 = {{tmp_s_fu_232_p4}, {1'd1}};

assign tmp_4_fu_214_p3 = {{select_ln52_1_fu_172_p3}, {3'd0}};

assign tmp_5_fu_254_p3 = {{select_ln52_fu_158_p3}, {1'd0}};

assign tmp_fu_188_p3 = {{select_ln52_1_fu_172_p3}, {4'd0}};

assign tmp_s_fu_232_p4 = {{empty_fu_200_p2[10:1]}};

assign zext_ln55_fu_250_p1 = select_ln52_fu_158_p3;

assign zext_ln59_fu_262_p1 = tmp_5_fu_254_p3;

assign zext_ln60_1_fu_283_p1 = add_ln59_1_fu_277_p2;

assign zext_ln60_fu_272_p1 = add_ln59_fu_266_p2;

assign zext_ln64_fu_344_p1 = add_ln63_reg_382;

endmodule //CNN_CNN_Pipeline_loop_for_channel_pool_2_loop_for_weight_pool_2
